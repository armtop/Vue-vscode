/**
 * tdesign v1.2.3
 * (c) 2024 TDesign Group
 * @license MIT
 */

import _slicedToArray from '@babel/runtime/helpers/slicedToArray';
import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { defineComponent, inject, computed, h, createVNode, resolveComponent, Fragment, provide, toRefs } from 'vue';
import { CheckCircleFilledIcon, CircleIcon, MinusCircleFilledIcon, MinusRectangleFilledIcon, CheckRectangleFilledIcon } from 'tdesign-icons-vue-next';
import config from '../config.js';
import CheckboxProps from './props.js';
import '../shared/index.js';
import { useTNodeJSX, useContent } from '../hooks/tnode.js';
import TNodeComponent from '../shared/render-tnode.js';
import { useDefault } from '../shared/useDefault/index.js';
import _typeof from '@babel/runtime/helpers/typeof';
import _toConsumableArray from '@babel/runtime/helpers/toConsumableArray';
import props from './checkbox-group-props.js';
import './hooks/index.js';
import { getOptions } from './hooks/getOptions.js';
import { setCheckAllStatus } from './hooks/setCheckAllStatus.js';
import './style/css.js';
import './type.js';
import { withInstall } from '../shared/component.js';
import '../shared/functions.js';
import '../shared/util.js';
import 'lodash/isNumber';
import '../shared/constants.js';
import '../shared/render.js';
import 'lodash/camelCase';
import '../shared/useToggle/index.js';
import '../shared/useCountDown/index.js';
import '@babel/runtime/helpers/asyncToGenerator';
import '@babel/runtime/regenerator';
import '@vueuse/core';
import '../shared/useCountDown/utils.js';
import '../shared/useChildSlots/index.js';
import '../shared/useVModel/index.js';
import 'lodash/kebabCase';
import '../shared/useTouch/index.js';
import '../shared/useScrollParent/index.js';
import '../shared/useExpose/index.js';
import '../shared/useTest/index.js';
import '../shared/useClickAway/index.js';
import 'lodash/isArray';
import '../shared/useGesture/index.js';
import '@use-gesture/vanilla';
import '../shared/hover.js';
import 'lodash/isFunction';
import '../hooks/render-tnode.js';
import 'lodash/isEmpty';
import 'lodash/isString';
import 'lodash/isObject';
import 'lodash/intersection';

var MinusLineFilledIcon = "data:image/svg+xml,%3Csvg%20width%3D%2224%22%20height%3D%2225%22%20viewBox%3D%220%200%2024%2025%22%20fill%3D%22none%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%20%20%20%20%3Cpath%20d%3D%22M5%2012.5C5%2011.6716%205.69645%2011%206.55556%2011H17.4444C18.3036%2011%2019%2011.6716%2019%2012.5C19%2013.3284%2018.3036%2014%2017.4444%2014H6.55556C5.69645%2014%205%2013.3284%205%2012.5Z%22%20fill%3D%22%230052D9%22%2F%3E%3C%2Fsvg%3E";

var CheckLineFilledIcon = "data:image/svg+xml,%3Csvg%20width%3D%2224%22%20height%3D%2224%22%20viewBox%3D%220%200%2024%2024%22%20fill%3D%22none%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%20%20%20%20%3Cpath%20fill-rule%3D%22evenodd%22%20clip-rule%3D%22evenodd%22%20d%3D%22M20.0606%206.93921C20.6463%207.525%2020.6464%208.47475%2020.0606%209.06053L11.7677%2017.3535C10.7914%2018.3296%209.20843%2018.3297%208.23212%2017.3534L3.93923%2013.0606C3.35344%2012.4748%203.35343%2011.525%203.93921%2010.9392C4.52499%2010.3534%205.47474%2010.3534%206.06053%2010.9392L9.99995%2014.8786L17.9392%206.93922C18.525%206.35343%2019.4748%206.35343%2020.0606%206.93921Z%22%20fill%3D%22%230052D9%22%2F%3E%3C%2Fsvg%3E";

function ownKeys$1(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$1(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var prefix$1 = config.prefix;
var name$1 = "".concat(prefix$1, "-checkbox");
var _CheckBox = defineComponent({
  name: name$1,
  components: {
    TNode: TNodeComponent
  },
  props: _objectSpread$1(_objectSpread$1({}, CheckboxProps), {}, {
    borderless: {
      type: Boolean,
      value: false
    }
  }),
  emits: ["update:checked", "update:modelValue", "change"],
  setup: function setup(props, context) {
    var renderTNodeJSX = useTNodeJSX();
    var renderContent = useContent();
    var _useDefault = useDefault(props, context.emit, "checked", "change"),
      _useDefault2 = _slicedToArray(_useDefault, 2),
      innerChecked = _useDefault2[0],
      setInnerChecked = _useDefault2[1];
    var checkboxGroup = inject("checkboxGroup", void 0);
    var indeterminate = computed(function () {
      if (props.checkAll && checkboxGroup != null) return checkboxGroup.checkAllStatus.value === "indeterminate";
      return props.indeterminate;
    });
    var isIconArray = Array.isArray(props.icon);
    var defaultCheckIcons = [h(CheckCircleFilledIcon), h(CircleIcon)];
    var checkIcons = computed(function () {
      if (isIconArray && props.icon.length > 1) {
        return props.icon.map(function (icon) {
          return typeof icon === "string" ? h("img", {
            class: "".concat(name$1, "__icon-image"),
            src: icon
          }) : icon;
        });
      }
      return defaultCheckIcons;
    });
    var checkedIcon = computed(function () {
      if (props.icon === "circle" || props.icon === true) return indeterminate.value ? h(MinusCircleFilledIcon) : h(CheckCircleFilledIcon);
      if (props.icon === "rectangle") return indeterminate.value ? h(MinusRectangleFilledIcon) : h(CheckRectangleFilledIcon);
      if (props.icon === "line") return indeterminate.value ? h("img", {
        src: MinusLineFilledIcon
      }) : h("img", {
        src: CheckLineFilledIcon
      });
      return null;
    });
    var isChecked = computed(function () {
      if (props.checkAll) {
        var checkAllStatus = checkboxGroup === null || checkboxGroup === void 0 ? void 0 : checkboxGroup.checkAllStatus.value;
        return checkAllStatus === "checked" || checkAllStatus === "indeterminate";
      }
      if (checkboxGroup != null && props.value != null) {
        var _checkboxGroup$checke;
        return !!((_checkboxGroup$checke = checkboxGroup.checkedSet.value) !== null && _checkboxGroup$checke !== void 0 && _checkboxGroup$checke.has(props.value));
      }
      return innerChecked.value;
    });
    var isDisabled = computed(function () {
      if (checkboxGroup !== null && checkboxGroup !== void 0 && checkboxGroup.max.value) return checkboxGroup.max.value <= checkboxGroup.innerValue.value.length && !isChecked.value;
      if (props.disabled != null) return props.disabled;
      return !!(checkboxGroup !== null && checkboxGroup !== void 0 && checkboxGroup.disabled.value);
    });
    var handleChange = function handleChange(e, source) {
      if (isDisabled.value) return;
      if (source === "text" && props.contentDisabled) return;
      var value = !isChecked.value;
      setInnerChecked(value, {
        e: e
      });
      e.stopPropagation();
      if (checkboxGroup && checkboxGroup !== null && checkboxGroup !== void 0 && checkboxGroup.onCheckedChange) {
        checkboxGroup.onCheckedChange({
          checked: value,
          checkAll: props.checkAll,
          e: e,
          option: props
        });
      }
    };
    return function () {
      var placement = props.placement,
        block = props.block,
        icon = props.icon,
        maxLabelRow = props.maxLabelRow,
        maxContentRow = props.maxContentRow,
        borderless = props.borderless;
      var renderIconArray = function renderIconArray() {
        if (isIconArray) {
          return createVNode(resolveComponent("t-node"), {
            "content": checkIcons.value[isChecked.value ? 0 : 1],
            "class": "".concat(name$1, "__icon-wrapper")
          }, null);
        }
        if (isChecked.value) {
          return createVNode(resolveComponent("t-node"), {
            "content": checkedIcon.value,
            "class": "".concat(name$1, "__icon-wrapper")
          }, null);
        }
        return createVNode(Fragment, null, [(icon === "circle" || icon === true || icon === "rectangle") && createVNode("div", {
          "class": _defineProperty(_defineProperty(_defineProperty({}, "".concat(name$1, "__icon-circle"), icon === true), "".concat(name$1, "__icon-").concat(icon), typeof icon === "string"), "".concat(name$1, "__icon-").concat(icon, "--disabled"), isDisabled.value)
        }, null), icon === "line" && createVNode("div", {
          "class": "placeholder"
        }, null)]);
      };
      var renderIconNode = function renderIconNode() {
        if (!icon) {
          return null;
        }
        return createVNode("div", {
          "class": _defineProperty(_defineProperty(_defineProperty(_defineProperty({}, "".concat(name$1, "__icon"), true), "".concat(name$1, "__icon--").concat(placement), true), "".concat(name$1, "__icon--checked"), isChecked.value), "".concat(name$1, "__icon--disabled"), isDisabled.value)
        }, [renderIconArray()]);
      };
      var renderCheckBoxContent = function renderCheckBoxContent() {
        var labelContent = renderContent("default", "label");
        var checkboxContent = renderTNodeJSX("content");
        return createVNode("div", {
          "class": "".concat(name$1, "__content"),
          "onClick": function onClick(event) {
            event.stopPropagation();
            handleChange(event, "text");
          }
        }, [createVNode("div", {
          "class": _defineProperty(_defineProperty(_defineProperty({}, "".concat(name$1, "__title"), true), "".concat(name$1, "__title--checked"), isChecked.value), "".concat(name$1, "__title--disabled"), isDisabled.value),
          "style": {
            "-webkit-line-clamp": maxLabelRow
          }
        }, [labelContent]), createVNode("div", {
          "class": _defineProperty(_defineProperty({}, "".concat(name$1, "__description"), true), "".concat(name$1, "__description--disabled"), isDisabled.value),
          "style": {
            "-webkit-line-clamp": maxContentRow
          }
        }, [checkboxContent])]);
      };
      return createVNode("div", {
        "class": _defineProperty(_defineProperty(_defineProperty(_defineProperty({}, "".concat(name$1), true), "".concat(name$1, "--").concat(placement), true), "".concat(name$1, "--checked"), isChecked.value), "".concat(name$1, "--block"), block),
        "onClick": handleChange
      }, [renderIconNode(), renderCheckBoxContent(), !borderless && createVNode("div", {
        "class": "".concat(name$1, "__border ").concat(name$1, "__border--").concat(placement)
      }, null)]);
    };
  }
});

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var prefix = config.prefix;
var name = "".concat(prefix, "-checkbox-group");
var _CheckBoxGroup = defineComponent({
  name: name,
  components: {
    Checkbox: _CheckBox
  },
  props: props,
  emits: ["update:value", "update:modelValue", "change"],
  setup: function setup(props2, context) {
    var renderTNodeJSX = useTNodeJSX();
    var isArray = Array.isArray;
    var _useDefault = useDefault(props2, context.emit, "value", "change"),
      _useDefault2 = _slicedToArray(_useDefault, 2),
      innerValue = _useDefault2[0],
      setInnerValue = _useDefault2[1];
    var optionList = getOptions(props2, context.slots);
    var checkedSet = computed(function () {
      if (isArray(innerValue.value)) {
        return new Set(innerValue.value);
      }
      return /* @__PURE__ */new Set();
    });
    var checkAllStatus = setCheckAllStatus(optionList, innerValue, checkedSet);
    var maxExceeded = computed(function () {
      return props2.max !== void 0 && innerValue.value.length === props2.max;
    });
    var onCheckedChange = function onCheckedChange(p) {
      var checked = p.checked,
        checkAll = p.checkAll,
        e = p.e;
      if (checkAll) {
        onCheckAllChange(checked, {
          e: e
        });
      } else {
        handleCheckboxChange(p);
      }
    };
    var handleCheckboxChange = function handleCheckboxChange(data) {
      var currentValue = data.option.value;
      if (isArray(innerValue.value)) {
        if (currentValue === void 0) {
          return;
        }
        var val = _toConsumableArray(innerValue.value);
        if (data.checked) {
          val.push(currentValue);
        } else {
          var i = val.indexOf(currentValue);
          val.splice(i, 1);
        }
        setInnerValue(val, {
          e: data.e,
          current: data.option.value,
          type: data.checked ? "check" : "uncheck"
        });
      } else {
        console.warn("TDesign CheckboxGroup Warn: `value` must be an array, instead of ".concat(_typeof(innerValue.value)));
      }
    };
    var getAllCheckboxValue = function getAllCheckboxValue() {
      var val = /* @__PURE__ */new Set();
      for (var i = 0, len = optionList.value.length; i < len; i++) {
        var item = optionList.value[i];
        if (item.checkAll) continue;
        if (item.value === void 0) continue;
        val.add(item.value);
        if (maxExceeded.value) break;
      }
      return _toConsumableArray(val);
    };
    var onCheckAllChange = function onCheckAllChange(checked, context2) {
      var value = checked ? getAllCheckboxValue() : [];
      setInnerValue(value, {
        e: context2.e,
        type: checked ? "check" : "uncheck",
        current: void 0
      });
    };
    provide("checkboxGroup", _objectSpread(_objectSpread({}, toRefs(props2)), {}, {
      innerValue: innerValue,
      checkAllStatus: checkAllStatus,
      checkedSet: checkedSet,
      onCheckedChange: onCheckedChange
    }));
    return function () {
      var checkboxNode = function checkboxNode() {
        return createVNode("span", null, [optionList.value.map(function (item, idx) {
          return createVNode(resolveComponent("checkbox"), {
            "key": idx,
            "name": item.name || "",
            "label": item.label || item.text || "",
            "value": item.value,
            "check-all": item.checkAll,
            "block": item.block || true,
            "checked": item.checked || false,
            "content": item.content || "",
            "content-disabled": item.contentDisabled || false,
            "icon": item.icon || "circle",
            "indeterminate": item.indeterminate || false,
            "disabled": item.disabled,
            "max-content-row": item.maxContentRow || 5,
            "max-label-row": item.maxLabelRow || 3,
            "readonly": item.readonly || false,
            "placement": item.placement || "left"
          }, null);
        })]);
      };
      return createVNode("div", {
        "class": "".concat(prefix, "-checkbox-group")
      }, [!(props2.options && props2.options.length) ? renderTNodeJSX("default") : checkboxNode()]);
    };
  }
});

var CheckBox = withInstall(_CheckBox);
var CheckboxGroup = withInstall(_CheckBoxGroup);

export { CheckboxGroup, CheckBox as default };
//# sourceMappingURL=index.js.map
