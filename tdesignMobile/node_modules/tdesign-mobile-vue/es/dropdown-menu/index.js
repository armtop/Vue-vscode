/**
 * tdesign v1.2.3
 * (c) 2024 TDesign Group
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { defineComponent, reactive, ref, watch, computed, provide, createVNode, resolveComponent, isVNode, toRefs, inject, onBeforeMount, nextTick } from 'vue';
import { onClickOutside } from '@vueuse/core';
import { CaretDownSmallIcon, CaretUpSmallIcon } from 'tdesign-icons-vue-next';
import camelCase from 'lodash/camelCase';
import config from '../config.js';
import { context, DropdownMenuExpandState } from './context.js';
import '../shared/index.js';
import { findRelativeRect, findRelativeContainer } from './dom-utils.js';
import { useContent, useTNodeJSX } from '../hooks/tnode.js';
import DropdownMenuProps from './props.js';
import { useExpose } from '../shared/useExpose/index.js';
import _slicedToArray from '@babel/runtime/helpers/slicedToArray';
import _Radio, { RadioGroup } from '../radio/index.js';
import _Button from '../button/index.js';
import _Popup from '../popup/index.js';
import CheckBox, { CheckboxGroup } from '../checkbox/index.js';
import DropdownItemProps from './dropdown-item-props.js';
import { useConfig } from '../config-provider/useConfig.js';
import { uniqueFactory } from '../shared/util.js';
import { useVModel } from '../shared/useVModel/index.js';
import './style/css.js';
import './type.js';
import { withInstall } from '../shared/component.js';
import '../shared/functions.js';
import '../shared/constants.js';
import '../shared/render.js';
import '@babel/runtime/helpers/typeof';
import '../shared/render-tnode.js';
import '../shared/useToggle/index.js';
import '../shared/useCountDown/index.js';
import '@babel/runtime/helpers/asyncToGenerator';
import '@babel/runtime/regenerator';
import '../shared/useCountDown/utils.js';
import '../shared/useDefault/index.js';
import '../shared/useChildSlots/index.js';
import '@babel/runtime/helpers/toConsumableArray';
import '../shared/useTouch/index.js';
import '../shared/useScrollParent/index.js';
import '../shared/useTest/index.js';
import '../shared/useClickAway/index.js';
import 'lodash/isArray';
import '../shared/useGesture/index.js';
import '@use-gesture/vanilla';
import '../shared/hover.js';
import 'lodash/isFunction';
import 'lodash/kebabCase';
import '../hooks/render-tnode.js';
import 'lodash/isEmpty';
import 'lodash/isString';
import 'lodash/isObject';
import '../radio/props.js';
import '../form/hooks.js';
import '../hooks/useClass.js';
import '../radio/radio-group-props.js';
import '../radio/type.js';
import 'lodash/isNumber';
import 'lodash/cloneDeep';
import '../config-provider/context.js';
import 'lodash/mergeWith';
import 'lodash/merge';
import '../_common/js/global-config/mobile/default-config.js';
import '../_common/js/global-config/mobile/locale/zh_CN.js';
import '../_chunks/dep-4c6045f6.js';
import '../_chunks/dep-1d280204.js';
import 'dayjs';
import '../_chunks/dep-5101c61a.js';
import '../config-provider/type.js';
import '../loading/index.js';
import '../_common/js/loading/circle-adapter.js';
import '../_common/js/utils/set-style.js';
import '../_common/js/utils/helper.js';
import '@babel/runtime/helpers/objectWithoutProperties';
import 'lodash/isNull';
import 'lodash/isUndefined';
import '../loading/props.js';
import '../loading/type.js';
import '../button/props.js';
import '../button/type.js';
import '../popup/popup.js';
import '../popup/props.js';
import '../overlay/index.js';
import '../shared/dom.js';
import '../overlay/props.js';
import '../popup/type.js';
import '../checkbox/props.js';
import '../checkbox/checkbox-group-props.js';
import '../checkbox/hooks/index.js';
import '../checkbox/hooks/getOptions.js';
import '../checkbox/hooks/setCheckAllStatus.js';
import 'lodash/intersection';
import '../checkbox/type.js';

var prefix$1 = config.prefix;
var name$1 = "".concat(prefix$1, "-dropdown-menu");
var LocalDropdownMenu = defineComponent({
  name: name$1,
  components: {
    CaretDownSmallIcon: CaretDownSmallIcon,
    CaretUpSmallIcon: CaretUpSmallIcon
  },
  props: DropdownMenuProps,
  emits: ["menuOpened", "menuClosed"],
  setup: function setup(props, _ref) {
    var slots = _ref.slots;
    var renderContent = useContent();
    var state = reactive({
      activeId: null,
      barRect: {},
      childCount: 0,
      itemsLabel: []
    });
    var menuItems = ref([]);
    var updateItems = function updateItems() {
      if (slots.default) {
        var itemName = "".concat(prefix$1, "-dropdown-item");
        var children = slots.default();
        menuItems.value = children.filter(function (child) {
          var _child$type;
          var childTypeName = child === null || child === void 0 || (_child$type = child.type) === null || _child$type === void 0 ? void 0 : _child$type.name;
          return (childTypeName === null || childTypeName === void 0 ? void 0 : childTypeName.includes) && childTypeName.includes(itemName);
        });
      }
    };
    watch(function () {
      var _slots$default;
      return slots === null || slots === void 0 || (_slots$default = slots.default) === null || _slots$default === void 0 ? void 0 : _slots$default.call(slots);
    }, updateItems, {
      deep: true,
      immediate: true
    });
    var menuTitles = computed(function () {
      return menuItems.value.map(function (item, index) {
        var _item$props = item.props,
          keys = _item$props.keys,
          label = _item$props.label,
          value = _item$props.value,
          modelValue = _item$props.modelValue,
          defaultValue = _item$props.defaultValue,
          disabled = _item$props.disabled,
          options = _item$props.options;
        var currentValue = value || modelValue || defaultValue;
        var target = options === null || options === void 0 ? void 0 : options.find(function (item2) {
          var _keys$value;
          return item2[(_keys$value = keys === null || keys === void 0 ? void 0 : keys.value) !== null && _keys$value !== void 0 ? _keys$value : "value"] === currentValue;
        });
        if (state.itemsLabel.length < index + 1) {
          var _keys$label;
          var targetLabel = target && target[(_keys$label = keys === null || keys === void 0 ? void 0 : keys.label) !== null && _keys$label !== void 0 ? _keys$label : "label"] || "";
          var computedLabel = label || targetLabel;
          state.itemsLabel.push(computedLabel);
          return {
            label: computedLabel,
            disabled: disabled !== void 0 && disabled !== false
          };
        }
        return {
          label: label || target.label,
          disabled: disabled !== void 0 && disabled !== false
        };
      });
    });
    provide("dropdownMenuProps", props);
    provide("dropdownMenuState", state);
    var classes = computed(function () {
      return ["".concat(name$1)];
    });
    var refBar = ref();
    var styleBarItem = computed(function () {
      return function (item, idx) {
        return ["".concat(name$1, "__item"), _defineProperty(_defineProperty({}, "".concat(name$1, "__item--disabled"), item.disabled), "".concat(name$1, "__item--active"), idx === state.activeId)];
      };
    });
    var styleIcon = computed(function () {
      return function (item, idx) {
        return ["".concat(name$1, "__icon"), _defineProperty({}, "".concat(name$1, "__icon--active"), idx === state.activeId)];
      };
    });
    var expandMenu = function expandMenu(item, idx) {
      var _props$onMenuOpened;
      var disabled = item.disabled;
      if (disabled) return;
      if (state.activeId === idx) {
        var _props$onMenuClosed;
        collapseMenu();
        (_props$onMenuClosed = props.onMenuClosed) === null || _props$onMenuClosed === void 0 || _props$onMenuClosed.call(props, {
          trigger: "menu"
        });
        return;
      }
      (_props$onMenuOpened = props.onMenuOpened) === null || _props$onMenuOpened === void 0 || _props$onMenuOpened.call(props, "menuOpened");
      state.activeId = idx;
      state.itemsLabel[idx] = item.label;
      var bar = refBar.value;
      var barRect = findRelativeRect(bar);
      state.barRect = barRect;
      var container = findRelativeContainer(bar) || document.body;
      context.recordMenuExpanded(container, control, DropdownMenuExpandState.expanded);
    };
    var collapseMenu = function collapseMenu() {
      menuTitles.value.forEach(function (item, index) {
        item.label = state.itemsLabel[index];
      });
      state.activeId = null;
      var bar = refBar.value;
      var container = findRelativeContainer(bar) || document.body;
      context.recordMenuExpanded(container, control, DropdownMenuExpandState.collapsed);
    };
    onClickOutside(refBar, function () {
      var _props$onMenuClosed2;
      collapseMenu();
      (_props$onMenuClosed2 = props.onMenuClosed) === null || _props$onMenuClosed2 === void 0 || _props$onMenuClosed2.call(props, {
        trigger: "outside"
      });
    });
    var control = {
      expandMenu: expandMenu,
      collapseMenu: collapseMenu,
      emitEvents: function emitEvents(emit, trigger) {
        var _props;
        (_props = props["on".concat(camelCase(emit))]) === null || _props === void 0 || _props.call(props, trigger);
      }
    };
    provide("dropdownMenuControl", control);
    useExpose({
      toggle: function toggle(idx) {
        if (idx != null) {
          var item = menuTitles.value[idx];
          expandMenu(item, idx);
        } else {
          collapseMenu();
        }
      }
    });
    useExpose({
      expandMenu: expandMenu,
      collapseMenu: collapseMenu
    });
    return function () {
      var defaultSlot = renderContent("default", "content");
      var renderDownIcon = function renderDownIcon(item, idx) {
        if (props.direction === "down") {
          return createVNode(resolveComponent("caret-down-small-icon"), {
            "class": styleIcon.value(item, idx)
          }, null);
        }
        return createVNode(resolveComponent("caret-up-small-icon"), {
          "class": styleIcon.value(item, idx)
        }, null);
      };
      return createVNode("div", {
        "ref": refBar,
        "class": classes.value
      }, [(menuTitles.value || []).map(function (item, idx) {
        return createVNode("div", {
          "class": styleBarItem.value(item, idx),
          "onClick": function onClick() {
            return expandMenu(item, idx);
          }
        }, [createVNode("div", {
          "class": "".concat(name$1, "__title")
        }, [item.label]), renderDownIcon(item, idx)]);
      }), defaultSlot]);
    };
  }
});

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _isSlot(s) {
  return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !isVNode(s);
}
var prefix = config.prefix;
var name = "".concat(prefix, "-dropdown-item");
var getUniqueID = uniqueFactory("dropdown-popup");
var LocalDropdownItem = defineComponent({
  name: name,
  components: {
    TRadio: _Radio,
    TButton: _Button,
    TPopup: _Popup,
    TCheckbox: CheckBox,
    TRadioGroup: RadioGroup,
    TCheckboxGroup: CheckboxGroup
  },
  props: DropdownItemProps,
  emits: ["change", "open", "opened", "close", "closed", "update:value", "update:modelValue"],
  setup: function setup(props) {
    var _useConfig = useConfig("dropdownMenu"),
      globalConfig = _useConfig.globalConfig;
    var renderContent = useContent();
    var renderTNodeJSX = useTNodeJSX();
    var popupContent = ref(null);
    var _toRefs = toRefs(props),
      value = _toRefs.value,
      modelValue = _toRefs.modelValue;
    var _useVModel = useVModel(value, modelValue, props.defaultValue),
      _useVModel2 = _slicedToArray(_useVModel, 2),
      passInValue = _useVModel2[0],
      setValue = _useVModel2[1];
    var menuProps = inject("dropdownMenuProps");
    var menuState = inject("dropdownMenuState");
    var _inject = inject("dropdownMenuControl"),
      expandMenu = _inject.expandMenu,
      collapseMenu = _inject.collapseMenu,
      emitEvents = _inject.emitEvents;
    var classes = computed(function () {
      return ["".concat(name)];
    });
    var itemId = ref(0);
    onBeforeMount(function () {
      itemId.value = menuState.childCount;
      menuState.childCount += 1;
    });
    var state = reactive({
      showOverlay: computed(function () {
        return menuProps.showOverlay;
      }),
      duration: computed(function () {
        return menuProps.duration;
      }),
      isShowItems: false,
      wrapperVisible: false,
      expandStyle: {},
      multiple: computed(function () {
        return props.multiple;
      }),
      options: computed(function () {
        if (props.keys) {
          var _props$options;
          return (_props$options = props.options) === null || _props$options === void 0 ? void 0 : _props$options.map(function (item) {
            var _props$keys$value, _props$keys, _props$keys$label, _props$keys2;
            return {
              value: item[(_props$keys$value = (_props$keys = props.keys) === null || _props$keys === void 0 ? void 0 : _props$keys.value) !== null && _props$keys$value !== void 0 ? _props$keys$value : "value"],
              label: item[(_props$keys$label = (_props$keys2 = props.keys) === null || _props$keys2 === void 0 ? void 0 : _props$keys2.label) !== null && _props$keys$label !== void 0 ? _props$keys$label : "label"],
              disabled: item.disabled
            };
          });
        }
        return props.options;
      })
    });
    var isCheckedRadio = function isCheckedRadio(value2) {
      return value2 === radioSelect.value;
    };
    var styleDropRadio = function styleDropRadio(value2) {
      return ["".concat(name, "__radio-item"), _defineProperty(_defineProperty({}, "".concat(prefix, "-is-tick"), !props.multiple), "".concat(prefix, "-is-checked"), isCheckedRadio(value2))];
    };
    var popupStyle = computed(function () {
      return {
        zIndex: menuProps.zIndex && menuProps.zIndex + 1,
        position: "absolute"
      };
    });
    var styleContent = computed(function () {
      return ["".concat(name, "__content"), "t-popup__content"];
    });
    var contentStyle = computed(function () {
      return menuProps.direction === "up" ? {
        transform: "rotateX(180deg) rotateY(180deg)"
      } : {};
    });
    var popupId = getUniqueID();
    var setExpand = function setExpand(val) {
      var _props;
      var _menuState$barRect = menuState.barRect,
        bottom = _menuState$barRect.bottom,
        top = _menuState$barRect.top;
      menuProps.direction === "up" ? state.expandStyle = {
        transform: menuProps.direction === "up" ? "rotateX(180deg) rotateY(180deg)" : "",
        zIndex: menuProps.zIndex,
        bottom: "calc(100vh - ".concat(top, "px)")
      } : state.expandStyle = {
        zIndex: menuProps.zIndex,
        top: "".concat(bottom, "px")
      };
      var duration2 = menuProps.duration;
      (_props = props["on".concat(val ? "Open" : "Close")]) === null || _props === void 0 || _props.call(props);
      if (val) {
        state.wrapperVisible = true;
      }
      nextTick(function () {
        state.isShowItems = val;
      });
      if (!val) {
        setTimeout(function () {
          state.wrapperVisible = false;
        }, Number(duration2));
      }
      setTimeout(function () {
        var _props2;
        (_props2 = props["on".concat(val ? "Opened" : "Closed")]) === null || _props2 === void 0 || _props2.call(props);
      }, Number(duration2));
    };
    watch(function () {
      return menuState.activeId === itemId.value;
    }, function (val) {
      return setExpand(val);
    });
    var radioSelect = ref();
    var checkSelect = ref();
    var updateSelectValue = function updateSelectValue(val) {
      if (!props.multiple) {
        var _ref2;
        var list = state.options;
        var firstChild = list === null || list === void 0 ? void 0 : list[0];
        var newValue = (_ref2 = val !== null && val !== void 0 ? val : firstChild === null || firstChild === void 0 ? void 0 : firstChild.value) !== null && _ref2 !== void 0 ? _ref2 : null;
        radioSelect.value = newValue;
      } else if (props.multiple) {
        checkSelect.value = val !== null && val !== void 0 ? val : [];
      }
    };
    updateSelectValue(passInValue.value || null);
    watch(function () {
      return passInValue.value;
    }, function (val) {
      if (!val) return;
      updateSelectValue(val);
    });
    var isBtnDisabled = computed(function () {
      return Array.isArray(checkSelect.value) && checkSelect.value.length <= 0;
    });
    var resetSelect = function resetSelect() {
      var _props$onReset;
      checkSelect.value = [];
      var values = checkSelect.value;
      values = JSON.parse(JSON.stringify(values));
      (_props$onReset = props.onReset) === null || _props$onReset === void 0 || _props$onReset.call(props, values);
    };
    var confirmSelect = function confirmSelect() {
      var _props$onConfirm;
      var values = checkSelect.value;
      values = JSON.parse(JSON.stringify(values));
      (_props$onConfirm = props.onConfirm) === null || _props$onConfirm === void 0 || _props$onConfirm.call(props, values);
      setValue(values);
      collapseMenu();
      emitEvents("menuClosed", "confirm");
    };
    watch(checkSelect, function (val) {
      if (!props.multiple) return;
      if (!state.isShowItems) return;
      if (val) {
        var _props$onChange;
        var value2 = JSON.stringify(passInValue.value || []);
        var values = JSON.stringify(val);
        if (value2 === values) return;
        (_props$onChange = props.onChange) === null || _props$onChange === void 0 || _props$onChange.call(props, JSON.parse(values));
      }
    });
    watch(radioSelect, function (val) {
      var _props$onChange2;
      if (menuState.activeId !== null) {
        var _state$options;
        var target = (_state$options = state.options) === null || _state$options === void 0 ? void 0 : _state$options.find(function (item) {
          return item.value === val;
        });
        menuState.itemsLabel[menuState.activeId] = target === null || target === void 0 ? void 0 : target.label;
      }
      if (props.multiple) return;
      if (!state.isShowItems) return;
      var value2 = passInValue.value || [];
      if (value2[0] === val) return;
      (_props$onChange2 = props.onChange) === null || _props$onChange2 === void 0 || _props$onChange2.call(props, val);
      setValue(val);
      collapseMenu();
      emitEvents("menuClosed", "content");
    });
    var onVisibleChange = function onVisibleChange(visible) {
      if (menuProps.closeOnClickOverlay && !visible) {
        collapseMenu();
        emitEvents("menuClosed", "overlay");
      }
    };
    var _toRefs2 = toRefs(state),
      showOverlay = _toRefs2.showOverlay,
      duration = _toRefs2.duration,
      isShowItems = _toRefs2.isShowItems,
      wrapperVisible = _toRefs2.wrapperVisible,
      expandStyle = _toRefs2.expandStyle,
      multiple = _toRefs2.multiple,
      options = _toRefs2.options;
    return function () {
      var handleRadioChange = function handleRadioChange(value2) {
        radioSelect.value = value2;
      };
      var handleCheckboxChange = function handleCheckboxChange(value2) {
        checkSelect.value = value2;
      };
      var defaultSlot = function defaultSlot() {
        var _slot2;
        if (!multiple.value) {
          var _slot;
          return createVNode(resolveComponent("t-radio-group"), {
            "value": radioSelect.value,
            "onChange": handleRadioChange,
            "placement": "right",
            "class": "".concat(name, "__radio-group")
          }, _isSlot(_slot = (options.value || []).map(function (option) {
            return createVNode(resolveComponent("t-radio"), {
              "key": option.value,
              "value": option.value,
              "label": option.label,
              "disabled": option.disabled,
              "class": styleDropRadio(option.value),
              "checked": isCheckedRadio(option.value),
              "icon": "line"
            }, null);
          })) ? _slot : {
            default: function _default() {
              return [_slot];
            }
          });
        }
        return createVNode(resolveComponent("t-checkbox-group"), {
          "value": checkSelect.value,
          "onChange": handleCheckboxChange,
          "class": "".concat(name, "__checkbox-group"),
          "style": "grid-template-columns: repeat(".concat(props.optionsColumns, ", 1fr)")
        }, _isSlot(_slot2 = (options.value || []).map(function (option) {
          return createVNode(resolveComponent("t-checkbox"), {
            "key": option.value,
            "class": "".concat(name, "__checkbox-item t-checkbox--tag"),
            "icon": false,
            "borderless": true,
            "value": option.value,
            "label": option.label,
            "disabled": option.disabled
          }, null);
        })) ? _slot2 : {
          default: function _default() {
            return [_slot2];
          }
        });
      };
      var footerSlot = function footerSlot() {
        if (multiple.value) {
          return createVNode("div", {
            "class": "".concat(name, "__footer")
          }, [createVNode(resolveComponent("t-button"), {
            "theme": "light",
            "class": "".concat(name, "__footer-btn ").concat(name, "__reset-btn"),
            "disabled": isBtnDisabled.value,
            "onClick": resetSelect
          }, {
            default: function _default() {
              return [globalConfig.value.reset];
            }
          }), createVNode(resolveComponent("t-button"), {
            "theme": "primary",
            "class": "".concat(name, "__footer-btn ").concat(name, "__confirm-btn"),
            "disabled": isBtnDisabled.value,
            "onClick": confirmSelect
          }, {
            default: function _default() {
              return [globalConfig.value.confirm];
            }
          })]);
        }
      };
      var content = renderContent("default", "content");
      var footer = renderTNodeJSX("footer");
      return wrapperVisible.value && createVNode("div", {
        "id": popupId,
        "class": classes.value,
        "style": _objectSpread({}, expandStyle.value)
      }, [createVNode(resolveComponent("t-popup"), {
        "visible": isShowItems.value,
        "duration": duration.value,
        "showOverlay": showOverlay.value,
        "style": popupStyle.value,
        "overlayProps": {
          style: "position: absolute"
        },
        "class": "".concat(name, "__popup-host"),
        "attach": "#".concat(popupId),
        "onVisibleChange": onVisibleChange
      }, {
        default: function _default() {
          return [createVNode("div", {
            "ref": popupContent,
            "class": styleContent.value,
            "style": contentStyle.value
          }, [createVNode("div", {
            "class": "".concat(name, "__body")
          }, [content || defaultSlot()]), footer || footerSlot()])];
        }
      })]);
    };
  }
});

var DropdownMenu = withInstall(LocalDropdownMenu);
var DropdownItem = withInstall(LocalDropdownItem);

export { DropdownItem, DropdownMenu };
//# sourceMappingURL=index.js.map
