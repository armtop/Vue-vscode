/**
 * tdesign v1.2.3
 * (c) 2024 TDesign Group
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import _slicedToArray from '@babel/runtime/helpers/slicedToArray';
import { defineComponent, ref, computed, h, openBlock, createElementBlock, normalizeClass, createElementVNode, Fragment, renderList, createBlock, resolveDynamicComponent, normalizeStyle, toDisplayString, createCommentVNode } from 'vue';
import { StarFilledIcon } from 'tdesign-icons-vue-next';
import { onClickOutside } from '@vueuse/core';
import rateProps from './props.js';
import config from '../config.js';
import '../shared/index.js';
import { useFormDisabled } from '../form/hooks.js';
import { useConfig } from '../config-provider/useConfig.js';
import { useDefault } from '../shared/useDefault/index.js';
import '../shared/functions.js';
import '../shared/util.js';
import 'lodash/isNumber';
import '../shared/component.js';
import '../shared/constants.js';
import '../shared/render.js';
import '@babel/runtime/helpers/typeof';
import 'lodash/camelCase';
import '../shared/render-tnode.js';
import '../shared/useToggle/index.js';
import '../shared/useCountDown/index.js';
import '@babel/runtime/helpers/asyncToGenerator';
import '@babel/runtime/regenerator';
import '../shared/useCountDown/utils.js';
import '../shared/useChildSlots/index.js';
import '@babel/runtime/helpers/toConsumableArray';
import '../shared/useVModel/index.js';
import 'lodash/kebabCase';
import '../shared/useTouch/index.js';
import '../shared/useScrollParent/index.js';
import '../shared/useExpose/index.js';
import '../shared/useTest/index.js';
import '../shared/useClickAway/index.js';
import 'lodash/isArray';
import '../shared/useGesture/index.js';
import '@use-gesture/vanilla';
import '../shared/hover.js';
import 'lodash/isFunction';
import 'lodash/cloneDeep';
import 'lodash/isString';
import '../config-provider/context.js';
import 'lodash/mergeWith';
import 'lodash/merge';
import '../_common/js/global-config/mobile/default-config.js';
import '../_common/js/global-config/mobile/locale/zh_CN.js';
import '../_chunks/dep-4c6045f6.js';
import '../_chunks/dep-1d280204.js';
import 'dayjs';
import '../_chunks/dep-5101c61a.js';
import '../config-provider/type.js';

var prefix = config.prefix;
var name = "".concat(prefix, "-rate");
var script = defineComponent({
  name: name,
  props: rateProps,
  emits: ["change", "update:value", "update:modelValue"],
  setup: function setup(props, context) {
    var _useConfig = useConfig("rate"),
      t = _useConfig.t,
      globalConfig = _useConfig.globalConfig;
    var disabled = useFormDisabled();
    var rateWrapper = ref(null);
    var _useDefault = useDefault(props, context.emit, "value", "change"),
      _useDefault2 = _slicedToArray(_useDefault, 1),
      actualVal = _useDefault2[0];
    var rateText = computed(function () {
      if (Array.isArray(props.texts) && props.texts.length > 0) {
        return props.texts[actualVal.value - 1];
      }
      return actualVal.value > 0 ? t(globalConfig.value.valueText, {
        value: actualVal.value
      }) : globalConfig.value.noValueText;
    });
    var colors = computed(function () {
      var color = props.color;
      if (Array.isArray(color) && color.length === 2) {
        return {
          "--td-rate-selected-color": color[0],
          "--td-rate-unselected-color": color[1]
        };
      }
      if (typeof color === "string") {
        return {
          "--td-rate-selected-color": color
        };
      }
      return {};
    });
    var regSize = function regSize(val) {
      return "".concat(val).includes("px") ? val : "".concat(val, "px");
    };
    var unitConvert = function unitConvert(value) {
      if (typeof value === "string") {
        return parseInt(value, 10);
      }
      return value;
    };
    var icon = function icon(isSelect) {
      var icon2 = props.icon;
      var startComponent = StarFilledIcon;
      var select = startComponent;
      var unSelect = startComponent;
      if (Array.isArray(icon2)) {
        var _icon = _slicedToArray(icon2, 2),
          _select = _icon[0],
          _unSelect = _icon[1];
        if (typeof _select === "function") {
          select = _select(h);
        } else {
          select = _select;
        }
        if (typeof _unSelect === "function") {
          unSelect = _unSelect(h);
        } else {
          unSelect = _unSelect;
        }
      }
      if (isSelect) {
        return select || startComponent;
      }
      return unSelect || startComponent;
    };
    var iconComponent = function iconComponent(n, value) {
      var allowHalf = props.allowHalf,
        size = props.size;
      var classPrefix = "".concat(name, "__icon-left");
      var select = value >= n;
      var selectHalf = Math.ceil(value) >= n;
      return h("div", {
        style: {
          fontSize: regSize(size)
        }
      }, allowHalf ? [h("div", {
        class: "".concat(classPrefix, " ").concat(selectHalf ? "".concat(classPrefix, "--selected") : "".concat(classPrefix, "--unselected"))
      }, h(icon(selectHalf))), h(icon(select))] : h(icon(select)));
    };
    var rootClasses = computed(function () {
      return ["".concat(name), _defineProperty({}, "".concat(name, "--disabled"), disabled.value)];
    });
    var classes = function classes(n) {
      var classPrefix = "".concat(name, "__icon");
      return _defineProperty(_defineProperty(_defineProperty({}, classPrefix, true), "".concat(classPrefix, "--current"), scaleIndex.value === Math.ceil(n)), "".concat(classPrefix, "--").concat(actualVal.value >= n ? "selected" : "unselected"), true);
    };
    var ratePopoverRef = ref();
    var scaleIndex = ref(-1);
    var popoverValue = ref(0);
    var timer = ref(null);
    var touchEnd = ref(false);
    var tipsVisible = ref(false);
    var tipsLeft = ref(0);
    var actionType = ref("tap");
    var touchStartTime = ref(0);
    onClickOutside(ratePopoverRef, function (event) {
      hideTips();
    });
    var hideTips = function hideTips() {
      var delay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      if (delay) {
        timer.value = setTimeout(function () {
          handleCloseTips();
        }, 3e3);
      } else {
        handleCloseTips();
      }
    };
    var handleCloseTips = function handleCloseTips() {
      tipsVisible.value = false;
      scaleIndex.value = -1;
      if (timer.value) {
        clearTimeout(timer.value);
      }
    };
    var onClick = function onClick(event) {
      if (disabled.value) return;
      getRect(event, "tap");
    };
    var onTouch = function onTouch(e, eventType) {
      var _e$touches = _slicedToArray(e.touches, 1),
        touch = _e$touches[0];
      getRect(touch, eventType);
    };
    var onTouchstart = function onTouchstart(e) {
      if (disabled.value) return;
      touchStartTime.value = Date.now();
      touchEnd.value = false;
    };
    var onTouchmove = function onTouchmove(e) {
      if (disabled.value) return;
      if (Date.now() - touchStartTime.value <= 200) return;
      onTouch(e, "move");
    };
    var onTouchEnd = function onTouchEnd(e) {
      if (disabled.value) return;
      touchEnd.value = true;
      hideTips();
    };
    var getRect = function getRect(event, eventType) {
      if (rateWrapper.value) {
        var count = props.count,
          allowHalf = props.allowHalf,
          gap = props.gap,
          currentValue = props.value,
          size = props.size;
        var margin = unitConvert(gap);
        var _rateWrapper$value$ge = rateWrapper.value.getBoundingClientRect(),
          width = _rateWrapper$value$ge.width,
          left = _rateWrapper$value$ge.left;
        var starWidth = (width - (count - 1) * margin) / count;
        var offsetX = event.pageX - left;
        var num = (offsetX + margin) / (starWidth + margin);
        var remainder = num % 1;
        var integral = num - remainder;
        var value = remainder <= 0.5 && allowHalf ? integral + 0.5 : integral + 1;
        if (value > count) {
          value = count;
        } else if (value < 0) {
          value = 0;
        }
        popoverValue.value = value;
        var fontSize = size || getComputedStyle(rateWrapper.value).getPropertyValue("font-size");
        var leftDis = Math.ceil(value - 1) * (unitConvert(gap) + unitConvert(fontSize)) + unitConvert(fontSize) * 0.5;
        tipsVisible.value = true;
        tipsLeft.value = Math.max(leftDis, unitConvert(fontSize) * 0.5);
        scaleIndex.value = Math.ceil(value);
        actionType.value = eventType;
        if (value !== currentValue) {
          actualVal.value = value;
        }
        if (touchEnd.value) {
          hideTips(true);
        }
      }
    };
    var onSelect = function onSelect(value) {
      actualVal.value = value;
      hideTips();
    };
    return {
      name: ref(name),
      rootClasses: rootClasses,
      classes: classes,
      rateWrapper: rateWrapper,
      actualVal: actualVal,
      regSize: regSize,
      unitConvert: unitConvert,
      colors: colors,
      rateText: rateText,
      onClick: onClick,
      onTouchstart: onTouchstart,
      onTouchmove: onTouchmove,
      onTouchEnd: onTouchEnd,
      tipsVisible: tipsVisible,
      tipsLeft: tipsLeft,
      actionType: actionType,
      onSelect: onSelect,
      popoverValue: popoverValue,
      ratePopoverRef: ratePopoverRef,
      iconComponent: iconComponent
    };
  }
});

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var _hoisted_1 = {
  key: 0,
  style: {
    "display": "flex"
  }
};
function render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", {
    class: normalizeClass(_ctx.rootClasses)
  }, [createElementVNode("div", {
    ref: "rateWrapper",
    class: normalizeClass("".concat(_ctx.name, "__wrapper")),
    onTouchstart: _cache[0] || (_cache[0] = function () {
      return _ctx.onTouchstart && _ctx.onTouchstart.apply(_ctx, arguments);
    }),
    onTouchmove: _cache[1] || (_cache[1] = function () {
      return _ctx.onTouchmove && _ctx.onTouchmove.apply(_ctx, arguments);
    }),
    onTouchend: _cache[2] || (_cache[2] = function () {
      return _ctx.onTouchEnd && _ctx.onTouchEnd.apply(_ctx, arguments);
    }),
    onTouchcancel: _cache[3] || (_cache[3] = function () {
      return _ctx.onTouchEnd && _ctx.onTouchEnd.apply(_ctx, arguments);
    })
  }, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.count, function (n) {
    return openBlock(), createBlock(resolveDynamicComponent(_ctx.iconComponent(n, _ctx.actualVal)), {
      key: n,
      class: normalizeClass(_ctx.classes(n)),
      size: _ctx.size,
      style: normalizeStyle(_objectSpread({
        marginRight: "".concat(_ctx.count > n ? _ctx.gap : 0, "px")
      }, _ctx.colors)),
      onClick: _ctx.onClick
    }, null, 8, ["class", "size", "style", "onClick"]);
  }), 128))], 34), _ctx.showText ? (openBlock(), createElementBlock("span", {
    key: 0,
    class: normalizeClass(_defineProperty(_defineProperty({}, "".concat(_ctx.name, "__text"), true), "".concat(_ctx.name, "__text--active"), _ctx.actualVal > 0))
  }, toDisplayString(_ctx.rateText), 3)) : createCommentVNode("", true), _ctx.tipsVisible ? (openBlock(), createElementBlock("div", {
    key: 1,
    ref: "ratePopoverRef",
    class: normalizeClass("".concat(_ctx.name, "__tips")),
    style: normalizeStyle({
      left: "".concat(_ctx.tipsLeft, "px")
    })
  }, [_ctx.actionType === "tap" ? (openBlock(), createElementBlock("div", _hoisted_1, [_ctx.allowHalf ? (openBlock(), createElementBlock("div", {
    key: 0,
    class: normalizeClass(_defineProperty(_defineProperty({}, "".concat(_ctx.name, "__tips-item"), true), "".concat(_ctx.name, "__tips-item--active"), _ctx.actualVal === Math.ceil(_ctx.popoverValue) - 0.5)),
    onClick: _cache[4] || (_cache[4] = function () {
      return _ctx.onSelect(Math.ceil(_ctx.popoverValue) - 0.5);
    })
  }, [(openBlock(), createBlock(resolveDynamicComponent(_ctx.iconComponent(Math.ceil(_ctx.popoverValue), Math.ceil(_ctx.popoverValue) - 0.5)), {
    style: normalizeStyle(_objectSpread({}, _ctx.colors)),
    size: _ctx.size,
    class: normalizeClass("".concat(_ctx.name, "__icon ").concat(_ctx.name, "__icon--unselected"))
  }, null, 8, ["style", "size", "class"])), createElementVNode("span", {
    class: normalizeClass("".concat(_ctx.name, "__tips-text"))
  }, toDisplayString(Math.ceil(_ctx.popoverValue) - 0.5), 3)], 2)) : createCommentVNode("", true), createElementVNode("div", {
    class: normalizeClass(_defineProperty(_defineProperty({}, "".concat(_ctx.name, "__tips-item"), true), "".concat(_ctx.name, "__tips-item--active"), _ctx.allowHalf && _ctx.actualVal === Math.ceil(_ctx.popoverValue))),
    onClick: _cache[5] || (_cache[5] = function () {
      return _ctx.onSelect(Math.ceil(_ctx.popoverValue));
    })
  }, [(openBlock(), createBlock(resolveDynamicComponent(_ctx.iconComponent(Math.ceil(_ctx.popoverValue), Math.ceil(_ctx.popoverValue))), {
    style: normalizeStyle(_objectSpread({}, _ctx.colors)),
    size: _ctx.size,
    class: normalizeClass("".concat(_ctx.name, "__icon ").concat(_ctx.name, "__icon--selected"))
  }, null, 8, ["style", "size", "class"])), createElementVNode("span", {
    class: normalizeClass("".concat(_ctx.name, "__tips-text"))
  }, toDisplayString(Math.ceil(_ctx.popoverValue)), 3)], 2)])) : (openBlock(), createElementBlock("div", {
    key: 1,
    class: normalizeClass("".concat(_ctx.name, "__tips-item")),
    onClick: _cache[6] || (_cache[6] = function () {
      return _ctx.onSelect(_ctx.popoverValue);
    })
  }, [(openBlock(), createBlock(resolveDynamicComponent(_ctx.iconComponent(Math.ceil(_ctx.popoverValue), _ctx.popoverValue)), {
    style: normalizeStyle(_objectSpread({}, _ctx.colors)),
    size: _ctx.size,
    class: normalizeClass(_defineProperty(_defineProperty(_defineProperty({}, "".concat(_ctx.name, "__icon"), true), "".concat(_ctx.name, "__icon--selected"), Math.ceil(_ctx.popoverValue) === _ctx.popoverValue), "".concat(_ctx.name, "__icon--unselected"), Math.ceil(_ctx.popoverValue) !== _ctx.popoverValue))
  }, null, 8, ["style", "size", "class"])), createElementVNode("span", {
    class: normalizeClass("".concat(_ctx.name, "__tips-text"))
  }, toDisplayString(_ctx.popoverValue), 3)], 2))], 6)) : createCommentVNode("", true)], 2);
}

script.render = render;

export { script as default };
//# sourceMappingURL=rate.js.map
