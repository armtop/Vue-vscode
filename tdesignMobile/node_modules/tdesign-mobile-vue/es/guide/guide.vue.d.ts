import { h } from 'vue';
import { ButtonProps } from '../button';
import { GuideStep, TdGuideProps } from './type';
import { SizeEnum } from '../common';
declare const _default: import("vue").DefineComponent<{
    backButtonProps: {
        type: import("vue").PropType<import("../button").TdButtonProps>;
    };
    counter: {
        type: import("vue").PropType<(h: typeof h, props: {
            current: number;
            total: number;
        }) => import("../common").SlotReturnValue>;
    };
    current: {
        type: NumberConstructor;
        default: any;
    };
    modelValue: {
        type: NumberConstructor;
        default: any;
    };
    defaultCurrent: {
        type: NumberConstructor;
    };
    finishButtonProps: {
        type: import("vue").PropType<import("../button").TdButtonProps>;
    };
    hideCounter: BooleanConstructor;
    hideSkip: BooleanConstructor;
    highlightPadding: {
        type: NumberConstructor;
        default: number;
    };
    mode: {
        type: import("vue").PropType<"dialog" | "popover">;
        default: "dialog" | "popover";
        validator(val: "dialog" | "popover"): boolean;
    };
    nextButtonProps: {
        type: import("vue").PropType<import("../button").TdButtonProps>;
    };
    showOverlay: {
        type: BooleanConstructor;
        default: boolean;
    };
    skipButtonProps: {
        type: import("vue").PropType<import("../button").TdButtonProps>;
    };
    steps: {
        type: import("vue").PropType<GuideStep[]>;
    };
    zIndex: {
        type: NumberConstructor;
        default: number;
    };
    onBack: import("vue").PropType<(context: {
        e: MouseEvent;
        current: number;
        total: number;
    }) => void>;
    onChange: import("vue").PropType<(current: number, context?: {
        e: MouseEvent;
        total: number;
    }) => void>;
    onFinish: import("vue").PropType<(context: {
        e: MouseEvent;
        current: number;
        total: number;
    }) => void>;
    onNextStepClick: import("vue").PropType<(context: {
        e: MouseEvent;
        next: number;
        current: number;
        total: number;
    }) => void>;
    onSkip: import("vue").PropType<(context: {
        e: MouseEvent;
        current: number;
        total: number;
    }) => void>;
}, {
    actived: import("vue").Ref<boolean>;
    name: string;
    zIndex: import("vue").Ref<number>;
    stepProps: import("vue").ComputedRef<import("../popup").TdPopupProps | import("../popover").TdPopoverProps>;
    currentCustomHighlightContent: import("vue").ComputedRef<any>;
    showCustomHighlightContent: import("vue").ComputedRef<boolean>;
    highlightClass: import("vue").ComputedRef<string[]>;
    maskClass: import("vue").ComputedRef<string[]>;
    popoverClass: import("vue").ComputedRef<string[]>;
    tooltipClass: import("vue").ComputedRef<string[]>;
    contetnClass: import("vue").ComputedRef<string[]>;
    footerClass: import("vue").ComputedRef<string[]>;
    wrapperClass: import("vue").ComputedRef<(string | {
        [x: string]: boolean;
    })[]>;
    overlayLayerRef: import("vue").Ref<HTMLElement>;
    highlightLayerRef: import("vue").Ref<HTMLElement>;
    referenceLayerRef: import("vue").Ref<HTMLElement>;
    popoverWrapperRef: import("vue").Ref<HTMLElement>;
    dialogTooltipRef: import("vue").Ref<HTMLElement>;
    popoverVisible: import("vue").Ref<boolean>;
    currentStepInfo: import("vue").ComputedRef<GuideStep>;
    isPopover: import("vue").ComputedRef<boolean>;
    stepContainer: import("vue").ComputedRef<import("../shared").WithInstallType<import("vue").DefineComponent<{
        attach: {
            type: import("vue").PropType<import("../common").AttachNode>;
            default: string;
        };
        closeBtn: {
            type: import("vue").PropType<boolean | ((h: typeof h) => import("../common").SlotReturnValue)>;
        };
        closeOnOverlayClick: {
            type: BooleanConstructor;
            default: boolean;
        };
        destroyOnClose: BooleanConstructor;
        overlayProps: {
            type: import("vue").PropType<object>;
            default: () => {};
        };
        placement: {
            type: import("vue").PropType<"" | "left" | "center" | "right" | "top" | "bottom">;
            validator(val: "" | "left" | "center" | "right" | "top" | "bottom"): boolean;
        };
        preventScrollThrough: {
            type: BooleanConstructor;
            default: boolean;
        };
        showOverlay: {
            type: BooleanConstructor;
            default: boolean;
        };
        transitionName: {
            type: StringConstructor;
            default: string;
        };
        visible: {
            type: BooleanConstructor;
            default: any;
        };
        modelValue: {
            type: BooleanConstructor;
            default: any;
        };
        defaultVisible: BooleanConstructor;
        zIndex: {
            type: NumberConstructor;
        };
        onClose: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onClosed: import("vue").PropType<() => void>;
        onOpen: import("vue").PropType<() => void>;
        onOpened: import("vue").PropType<() => void>;
        onVisibleChange: import("vue").PropType<(visible: boolean, trigger: import("../popup").PopupSource) => void>;
    }, {
        name: string;
        to: import("vue").ComputedRef<Element>;
        wrapperVisible: import("vue").Ref<boolean>;
        innerVisible: import("vue").Ref<boolean>;
        currentVisible: import("vue").WritableComputedRef<boolean>;
        rootStyles: import("vue").ComputedRef<{
            constructor: Function;
            toString(): string;
            toLocaleString(): string;
            valueOf(): Object;
            hasOwnProperty(v: PropertyKey): boolean;
            isPrototypeOf(v: Object): boolean;
            propertyIsEnumerable(v: PropertyKey): boolean;
        }>;
        contentClasses: import("vue").ComputedRef<{
            [x: string]: boolean;
        }>;
        contentTransitionName: import("vue").ComputedRef<string>;
        closeBtnNode: import("vue").ComputedRef<any>;
        afterEnter: () => void;
        afterLeave: () => void;
        handleOverlayClick: (args: {
            e: MouseEvent;
        }) => void;
        handleCloseClick: (e: MouseEvent) => void;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("open" | "update:modelValue" | "close" | "opened" | "closed" | "visible-change" | "update:visible")[], "open" | "update:modelValue" | "close" | "closed" | "opened" | "visible-change" | "update:visible", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        attach: {
            type: import("vue").PropType<import("../common").AttachNode>;
            default: string;
        };
        closeBtn: {
            type: import("vue").PropType<boolean | ((h: typeof h) => import("../common").SlotReturnValue)>;
        };
        closeOnOverlayClick: {
            type: BooleanConstructor;
            default: boolean;
        };
        destroyOnClose: BooleanConstructor;
        overlayProps: {
            type: import("vue").PropType<object>;
            default: () => {};
        };
        placement: {
            type: import("vue").PropType<"" | "left" | "center" | "right" | "top" | "bottom">;
            validator(val: "" | "left" | "center" | "right" | "top" | "bottom"): boolean;
        };
        preventScrollThrough: {
            type: BooleanConstructor;
            default: boolean;
        };
        showOverlay: {
            type: BooleanConstructor;
            default: boolean;
        };
        transitionName: {
            type: StringConstructor;
            default: string;
        };
        visible: {
            type: BooleanConstructor;
            default: any;
        };
        modelValue: {
            type: BooleanConstructor;
            default: any;
        };
        defaultVisible: BooleanConstructor;
        zIndex: {
            type: NumberConstructor;
        };
        onClose: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onClosed: import("vue").PropType<() => void>;
        onOpen: import("vue").PropType<() => void>;
        onOpened: import("vue").PropType<() => void>;
        onVisibleChange: import("vue").PropType<(visible: boolean, trigger: import("../popup").PopupSource) => void>;
    }>> & {
        "onUpdate:modelValue"?: (...args: any[]) => any;
        onClose?: (...args: any[]) => any;
        onClosed?: (...args: any[]) => any;
        onOpen?: (...args: any[]) => any;
        onOpened?: (...args: any[]) => any;
        "onVisible-change"?: (...args: any[]) => any;
        "onUpdate:visible"?: (...args: any[]) => any;
    }, {
        visible: boolean;
        modelValue: boolean;
        attach: import("../common").AttachNode;
        overlayProps: object;
        preventScrollThrough: boolean;
        closeOnOverlayClick: boolean;
        destroyOnClose: boolean;
        showOverlay: boolean;
        transitionName: string;
        defaultVisible: boolean;
    }, {}>> | import("../shared").WithInstallType<import("vue").DefineComponent<{
        closeOnClickOutside: {
            type: BooleanConstructor;
            default: boolean;
        };
        content: {
            type: import("vue").PropType<string | ((h: typeof h) => import("../common").SlotReturnValue)>;
        };
        default: {
            type: import("vue").PropType<string | ((h: typeof h) => import("../common").SlotReturnValue)>;
        };
        placement: {
            type: import("vue").PropType<"left" | "right" | "top" | "bottom" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom">;
            default: "left" | "right" | "top" | "bottom" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom";
            validator(val: "left" | "right" | "top" | "bottom" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom"): boolean;
        };
        showArrow: {
            type: BooleanConstructor;
            default: boolean;
        };
        theme: {
            type: import("vue").PropType<"dark" | "light" | "error" | "warning" | "success" | "brand">;
            default: "dark" | "light" | "error" | "warning" | "success" | "brand";
            validator(val: "dark" | "light" | "error" | "warning" | "success" | "brand"): boolean;
        };
        triggerElement: {
            type: import("vue").PropType<string | ((h: typeof h) => import("../common").SlotReturnValue)>;
        };
        visible: {
            type: BooleanConstructor;
            default: any;
        };
        modelValue: {
            type: BooleanConstructor;
            default: any;
        };
        defaultVisible: BooleanConstructor;
        onVisibleChange: import("vue").PropType<(visible: boolean) => void>;
    }, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "visible-change" | "update:visible")[], "update:modelValue" | "visible-change" | "update:visible", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        closeOnClickOutside: {
            type: BooleanConstructor;
            default: boolean;
        };
        content: {
            type: import("vue").PropType<string | ((h: typeof h) => import("../common").SlotReturnValue)>;
        };
        default: {
            type: import("vue").PropType<string | ((h: typeof h) => import("../common").SlotReturnValue)>;
        };
        placement: {
            type: import("vue").PropType<"left" | "right" | "top" | "bottom" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom">;
            default: "left" | "right" | "top" | "bottom" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom";
            validator(val: "left" | "right" | "top" | "bottom" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom"): boolean;
        };
        showArrow: {
            type: BooleanConstructor;
            default: boolean;
        };
        theme: {
            type: import("vue").PropType<"dark" | "light" | "error" | "warning" | "success" | "brand">;
            default: "dark" | "light" | "error" | "warning" | "success" | "brand";
            validator(val: "dark" | "light" | "error" | "warning" | "success" | "brand"): boolean;
        };
        triggerElement: {
            type: import("vue").PropType<string | ((h: typeof h) => import("../common").SlotReturnValue)>;
        };
        visible: {
            type: BooleanConstructor;
            default: any;
        };
        modelValue: {
            type: BooleanConstructor;
            default: any;
        };
        defaultVisible: BooleanConstructor;
        onVisibleChange: import("vue").PropType<(visible: boolean) => void>;
    }>> & {
        "onUpdate:modelValue"?: (...args: any[]) => any;
        "onVisible-change"?: (...args: any[]) => any;
        "onUpdate:visible"?: (...args: any[]) => any;
    }, {
        theme: "dark" | "light" | "error" | "warning" | "success" | "brand";
        visible: boolean;
        modelValue: boolean;
        placement: "left" | "right" | "top" | "bottom" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom";
        defaultVisible: boolean;
        closeOnClickOutside: boolean;
        showArrow: boolean;
    }, {}>>>;
    contentSlot: import("vue").ComputedRef<"content" | "default">;
    contentNode: import("vue").ComputedRef<import("../common").SlotReturnValue>;
    titleNode: import("vue").ComputedRef<any>;
    bodyNode: import("vue").ComputedRef<any>;
    counterNode: import("vue").ComputedRef<any>;
    hideSkip: import("vue").Ref<boolean>;
    hideCounter: import("vue").Ref<boolean>;
    isLast: import("vue").ComputedRef<boolean>;
    isFirst: import("vue").ComputedRef<boolean>;
    finishButtonProps: import("vue").Ref<import("../button").TdButtonProps>;
    buttonSize: import("vue").ComputedRef<SizeEnum>;
    globalConfig: import("vue").ComputedRef<{} & import("../config-provider/type").GuideConfig>;
    getCurrentCrossProps: <Key extends "mode" | "showOverlay" | "backButtonProps" | "nextButtonProps" | "skipButtonProps" | "highlightPadding">(propsName: Key) => GuideStep[Key] | TdGuideProps[Key];
    handleSkip: (e: MouseEvent) => void;
    handleNext: (e: MouseEvent) => void;
    handleFinish: (e: MouseEvent) => void;
    handleBack: (e: MouseEvent) => void;
    renderButtonContent: (buttonProps: ButtonProps, defaultContent: string) => import("../common").SlotReturnValue;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    backButtonProps: {
        type: import("vue").PropType<import("../button").TdButtonProps>;
    };
    counter: {
        type: import("vue").PropType<(h: typeof h, props: {
            current: number;
            total: number;
        }) => import("../common").SlotReturnValue>;
    };
    current: {
        type: NumberConstructor;
        default: any;
    };
    modelValue: {
        type: NumberConstructor;
        default: any;
    };
    defaultCurrent: {
        type: NumberConstructor;
    };
    finishButtonProps: {
        type: import("vue").PropType<import("../button").TdButtonProps>;
    };
    hideCounter: BooleanConstructor;
    hideSkip: BooleanConstructor;
    highlightPadding: {
        type: NumberConstructor;
        default: number;
    };
    mode: {
        type: import("vue").PropType<"dialog" | "popover">;
        default: "dialog" | "popover";
        validator(val: "dialog" | "popover"): boolean;
    };
    nextButtonProps: {
        type: import("vue").PropType<import("../button").TdButtonProps>;
    };
    showOverlay: {
        type: BooleanConstructor;
        default: boolean;
    };
    skipButtonProps: {
        type: import("vue").PropType<import("../button").TdButtonProps>;
    };
    steps: {
        type: import("vue").PropType<GuideStep[]>;
    };
    zIndex: {
        type: NumberConstructor;
        default: number;
    };
    onBack: import("vue").PropType<(context: {
        e: MouseEvent;
        current: number;
        total: number;
    }) => void>;
    onChange: import("vue").PropType<(current: number, context?: {
        e: MouseEvent;
        total: number;
    }) => void>;
    onFinish: import("vue").PropType<(context: {
        e: MouseEvent;
        current: number;
        total: number;
    }) => void>;
    onNextStepClick: import("vue").PropType<(context: {
        e: MouseEvent;
        next: number;
        current: number;
        total: number;
    }) => void>;
    onSkip: import("vue").PropType<(context: {
        e: MouseEvent;
        current: number;
        total: number;
    }) => void>;
}>>, {
    mode: "dialog" | "popover";
    zIndex: number;
    modelValue: number;
    current: number;
    showOverlay: boolean;
    highlightPadding: number;
    hideCounter: boolean;
    hideSkip: boolean;
}, {}>;
export default _default;
