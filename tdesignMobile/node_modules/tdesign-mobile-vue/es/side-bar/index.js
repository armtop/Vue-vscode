/**
 * tdesign v1.2.3
 * (c) 2024 TDesign Group
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import _slicedToArray from '@babel/runtime/helpers/slicedToArray';
import { defineComponent, ref, provide, createVNode, getCurrentInstance, inject, computed, onUnmounted, resolveComponent, mergeProps } from 'vue';
import config from '../config.js';
import props from './props.js';
import '../shared/index.js';
import { useTNodeJSX } from '../hooks/tnode.js';
import { useDefault } from '../shared/useDefault/index.js';
import _Badge from '../badge/index.js';
import SideBarItemProps from './side-bar-item-props.js';
import './style/css.js';
import './type.js';
import { withInstall } from '../shared/component.js';
import '../shared/functions.js';
import '../shared/util.js';
import 'lodash/isNumber';
import '../shared/constants.js';
import '../shared/render.js';
import '@babel/runtime/helpers/typeof';
import 'lodash/camelCase';
import '../shared/render-tnode.js';
import '../shared/useToggle/index.js';
import '../shared/useCountDown/index.js';
import '@babel/runtime/helpers/asyncToGenerator';
import '@babel/runtime/regenerator';
import '@vueuse/core';
import '../shared/useCountDown/utils.js';
import '../shared/useChildSlots/index.js';
import '@babel/runtime/helpers/toConsumableArray';
import '../shared/useVModel/index.js';
import 'lodash/kebabCase';
import '../shared/useTouch/index.js';
import '../shared/useScrollParent/index.js';
import '../shared/useExpose/index.js';
import '../shared/useTest/index.js';
import '../shared/useClickAway/index.js';
import 'lodash/isArray';
import '../shared/useGesture/index.js';
import '@use-gesture/vanilla';
import '../shared/hover.js';
import 'lodash/isFunction';
import '../hooks/render-tnode.js';
import 'lodash/isEmpty';
import 'lodash/isString';
import 'lodash/isObject';
import '../badge/props.js';
import '../hooks/useClass.js';
import '../config-provider/useConfig.js';
import 'lodash/cloneDeep';
import '../config-provider/context.js';
import 'lodash/mergeWith';
import 'lodash/merge';
import '../_common/js/global-config/mobile/default-config.js';
import '../_common/js/global-config/mobile/locale/zh_CN.js';
import '../_chunks/dep-4c6045f6.js';
import '../_chunks/dep-1d280204.js';
import 'dayjs';
import '../_chunks/dep-5101c61a.js';
import '../config-provider/type.js';
import '../badge/type.js';

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var prefix$1 = config.prefix;
var name$1 = "".concat(prefix$1, "-side-bar");
var _SideBar = defineComponent({
  name: name$1,
  props: props,
  emits: ["update:value", "update:modelValue", "change"],
  setup: function setup(props2, context) {
    var renderTNodeJSX = useTNodeJSX();
    var _useDefault = useDefault(props2, context.emit, "value", "change"),
      _useDefault2 = _slicedToArray(_useDefault, 2),
      currentValue = _useDefault2[0],
      setCurrentValue = _useDefault2[1];
    var children = ref([]);
    var relation = function relation(child) {
      child && children.value.push(child);
    };
    var removeRelation = function removeRelation(child) {
      children.value = children.value.filter(function (item) {
        return item !== child;
      });
    };
    var onClickItem = function onClickItem(cur, label) {
      var _props2$onClick;
      setCurrentValue(cur);
      (_props2$onClick = props2.onClick) === null || _props2$onClick === void 0 || _props2$onClick.call(props2, cur, label);
    };
    provide("sideBarProvide", _objectSpread(_objectSpread({}, props2), {}, {
      children: children,
      currentValue: currentValue,
      relation: relation,
      removeRelation: removeRelation,
      onClickItem: onClickItem
    }));
    return function () {
      return createVNode("div", {
        "class": "".concat(name$1)
      }, [renderTNodeJSX("default"), createVNode("div", {
        "class": "".concat(name$1, "__padding")
      }, null)]);
    };
  }
});

var prefix = config.prefix;
var name = "".concat(prefix, "-side-bar-item");
var _SideBarItem = defineComponent({
  name: name,
  components: {
    TBadge: _Badge
  },
  props: SideBarItemProps,
  setup: function setup(props) {
    var renderTNodeJSX = useTNodeJSX();
    var internalInstance = getCurrentInstance();
    var proxy = internalInstance.proxy;
    var sideBarProvide = inject("sideBarProvide", void 0);
    sideBarProvide.relation(proxy);
    var isActive = computed(function () {
      return proxy.value === sideBarProvide.currentValue.value;
    });
    var rootClassName = computed(function () {
      return [name, _defineProperty({}, "".concat(name, "--active"), isActive.value), _defineProperty({}, "".concat(name, "--disabled"), props.disabled)];
    });
    var onClick = function onClick(e) {
      sideBarProvide.onClickItem(proxy.value, props.label);
    };
    onUnmounted(function () {
      sideBarProvide.removeRelation(proxy);
    });
    return function () {
      var badgeProps = props.badgeProps,
        label = props.label;
      var renderIconNode = function renderIconNode() {
        var iconNode = renderTNodeJSX("icon");
        if (!iconNode) {
          return null;
        }
        return createVNode("div", {
          "class": "".concat(name, "__icon")
        }, [iconNode]);
      };
      return createVNode("div", {
        "class": rootClassName.value,
        "onClick": onClick
      }, [isActive.value && createVNode("div", null, [createVNode("div", {
        "class": "".concat(name, "__line")
      }, null), createVNode("div", {
        "class": "".concat(name, "__prefix")
      }, null), createVNode("div", {
        "class": "".concat(name, "__suffix")
      }, null)]), renderIconNode(), badgeProps ? createVNode(resolveComponent("t-badge"), mergeProps(badgeProps, {
        "content": label
      }), null) : createVNode("div", null, [label])]);
    };
  }
});

var SideBar = withInstall(_SideBar);
var SideBarItem = withInstall(_SideBarItem);

export { SideBar, SideBarItem };
//# sourceMappingURL=index.js.map
