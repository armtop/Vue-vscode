{"version":3,"file":"index.js","sources":["../../src/tab-bar/tab-bar.tsx","../../src/tab-bar/tab-bar-item.tsx","../../src/tab-bar/index.ts"],"sourcesContent":["import { defineComponent, ref, provide, Ref, computed, toRefs, onMounted } from 'vue';\nimport TabBarProps from './props';\nimport config from '../config';\nimport { useDefault, useChildSlots } from '../shared';\nimport { useTNodeJSX } from '../hooks/tnode';\n\nconst { prefix } = config;\nconst name = `${prefix}-tab-bar`;\n\nexport default defineComponent({\n  name,\n  props: TabBarProps,\n  emits: ['update:value', 'update:modelValue', 'change'],\n  setup(props, context) {\n    const renderTNodeJSX = useTNodeJSX();\n    const [activeValue] = useDefault(props, context.emit, 'value', 'change');\n    const defaultIndex: Ref<number> = ref(-1);\n    const itemCount = ref(0);\n\n    onMounted(() => {\n      const nodes = context.slots.default && context.slots.default();\n      if (nodes !== undefined) {\n        const childSlots = useChildSlots(`${prefix}-tab-bar-item`);\n        itemCount.value = childSlots.length;\n      }\n    });\n\n    const updateChild = (currentValue: number | string) => {\n      activeValue.value = currentValue;\n    };\n\n    const tabBarClass = computed(() => [\n      `${name}`,\n      {\n        [`${name}--bordered`]: props.bordered,\n        [`${name}--fixed`]: props.fixed,\n        [`${name}--safe`]: props.safeAreaInsetBottom,\n      },\n      `${name}--${props.shape}`,\n    ]);\n\n    provide('tab-bar', {\n      ...toRefs(props),\n      defaultIndex,\n      activeValue,\n      itemCount,\n      updateChild,\n    });\n\n    return () => (\n      <div class={tabBarClass.value} role=\"tablist\">\n        {renderTNodeJSX('default')}\n      </div>\n    );\n  },\n});\n","import { defineComponent, inject, computed, ref, watch, ComponentInternalInstance } from 'vue';\nimport { ViewListIcon as TViewListIcon } from 'tdesign-icons-vue-next';\nimport TBadge from '../badge';\nimport { TdBadgeProps } from '../badge/type';\nimport config from '../config';\nimport { initName } from './useTabBar';\nimport TabBarItemProps from './tab-bar-item-props';\nimport { useConfig } from '../config-provider/useConfig';\nimport { useTNodeJSX, useContent } from '../hooks/tnode';\n\nconst { prefix } = config;\nconst name = `${prefix}-tab-bar-item`;\n\nexport default defineComponent({\n  name,\n  components: { TBadge, TViewListIcon },\n  props: TabBarItemProps,\n  setup(props, context) {\n    const renderTNodeJSX = useTNodeJSX();\n    const renderContent = useContent();\n\n    const { t, globalConfig } = useConfig('tabBar');\n    const { split, shape, theme, defaultIndex, activeValue, itemCount, updateChild } = inject<any>('tab-bar');\n    const currentName = initName(defaultIndex);\n\n    const textNode = ref<HTMLElement>();\n\n    const badgeProps = computed((): TdBadgeProps => props.badgeProps);\n\n    const getBadgeAriaLabel = () => {\n      const options = badgeProps.value;\n      if (options?.dot || options?.count) {\n        const maxCount = options.maxCount || 99;\n        if (options.dot) {\n          return globalConfig.value.newsAriaLabel;\n        }\n        if (options.count === '...') {\n          return globalConfig.value.moreNewsAriaLabel;\n        }\n        const count = Number(options.count);\n        if (isNaN(count)) {\n          return `${options.count}`;\n        }\n        const str1 = t(globalConfig.value.haveMoreNewsAriaLabel, { value: maxCount });\n        const str2 = t(globalConfig.value.haveNewsAriaLabel, { value: options.count });\n        return `${Number(options.count) > maxCount ? str1 : str2}`;\n      }\n      return 'TabBar';\n    };\n    const ariaLabel = ref(getBadgeAriaLabel());\n\n    const iconOnly = ref(false);\n    watch(textNode, () => {\n      const height = textNode.value?.clientHeight;\n      iconOnly.value = Number(height) === 0;\n    });\n\n    const hasSubTabBar = computed(() => {\n      return Array.isArray(props.subTabBar) && props.subTabBar.length > 0;\n    });\n\n    const isChecked = computed(() => {\n      if (hasSubTabBar.value && Array.isArray(activeValue.value)) {\n        return activeValue.value.includes(currentName);\n      }\n      return currentName === activeValue.value;\n    });\n\n    const isSpread = ref(false);\n    watch(isChecked, (newValue) => {\n      if (!newValue) {\n        isSpread.value = false;\n      }\n    });\n\n    const crowded = ref(false);\n    watch(itemCount, () => {\n      if (isChecked.value) {\n        crowded.value = itemCount.value > 3;\n        isSpread.value = true;\n      }\n    });\n\n    const isToggleCurrent = computed(() => Array.isArray(activeValue.value) && activeValue.value[0] === currentName);\n\n    const toggle = () => {\n      if (hasSubTabBar.value) {\n        isSpread.value = !isSpread.value;\n        if (!isToggleCurrent.value) {\n          updateChild([currentName]);\n          return;\n        }\n      }\n      updateChild(currentName);\n    };\n\n    const hasChildren = computed(() => {\n      return Number(props.subTabBar?.length) > 0;\n    });\n\n    const selectChild = (childName: number | string) => {\n      if (!(Array.isArray(activeValue.value) && activeValue.value[1] === childName)) {\n        updateChild([currentName, childName]);\n      }\n      isSpread.value = false;\n    };\n    return () => {\n      const iconContent = () => {\n        const iconSlot = renderTNodeJSX('icon');\n        if (!iconSlot) {\n          return null;\n        }\n        iconSlot?.forEach((item: ComponentInternalInstance) => {\n          if (item.type?.name === 'Icon') {\n            item.props.size = iconOnly.value ? '24px' : '20px';\n          }\n        });\n        return iconSlot;\n      };\n      const badge = () => {\n        return (\n          iconContent() && (\n            <div class={`${name}__icon`} style={{ height: `${iconOnly.value ? 24 : 20}px` }}>\n              {badgeProps.value?.dot || badgeProps.value?.count ? (\n                <t-badge\n                  count={badgeProps.value?.count || 0}\n                  max-count={badgeProps.value?.maxCount || 99}\n                  dot={badgeProps.value?.dot || false}\n                  content={badgeProps.value?.content || ''}\n                  size={badgeProps.value?.size || 'medium'}\n                  offset={badgeProps.value?.offset || [0, 0]}\n                >\n                  {iconContent()}\n                </t-badge>\n              ) : (\n                iconContent()\n              )}\n            </div>\n          )\n        );\n      };\n      const textNodeContent = () => {\n        return (\n          <div\n            ref={textNode}\n            class={{\n              [`${name}__text`]: true,\n              [`${name}__text--small`]: !!iconContent(),\n            }}\n          >\n            {hasChildren.value && <t-view-list-icon size=\"16\" class={`${name}__icon-menu`} />}\n            {renderContent('default', 'content')}\n          </div>\n        );\n      };\n\n      const menu = () => {\n        if (hasChildren.value && isSpread.value) {\n          return (\n            <div role=\"menu\" class={`${name}__spread`}>\n              {props.subTabBar.map((child, index) => (\n                <div\n                  key={index}\n                  role=\"tab\"\n                  class={`${name}__spread-item`}\n                  onClick={() => selectChild(child.value || index)}\n                >\n                  {index !== 0 && <div class={`${name}__spread-item-split`} />}\n                  <div class={`${name}__spread-item-text`}>{child.label}</div>\n                </div>\n              ))}\n            </div>\n          );\n        }\n      };\n      return (\n        <div\n          class={{\n            [`${name}`]: true,\n            [`${name}--split`]: split.value,\n            [`${name}--text-only`]: !iconContent(),\n            [`${name}--crowded`]: crowded.value,\n            [`${name}--${shape.value}`]: true,\n            [`${context.attrs.class || ''}`]: true,\n          }}\n        >\n          <div\n            class={{\n              [`${name}__content`]: true,\n              [`${name}__content--checked`]: isChecked.value,\n              [`${name}__content--${theme.value}`]: true,\n            }}\n            aria-selected={(!hasChildren.value || !isSpread.value) && isChecked.value}\n            aria-expanded={hasChildren.value && isSpread.value}\n            role={hasChildren.value ? 'button' : 'tab'}\n            onClick={toggle}\n          >\n            {badge()}\n            {textNodeContent()}\n          </div>\n          {menu()}\n        </div>\n      );\n    };\n  },\n});\n","import LocalTabBar from './tab-bar';\nimport LocalTabBarItem from './tab-bar-item';\nimport { withInstall, WithInstallType } from '../shared';\nimport { TdTabBarProps, TdTabBarItemProps } from './type';\n\nimport './style';\n\nexport * from './type';\nexport type TabBarProps = TdTabBarProps;\nexport type TabBarItemProps = TdTabBarItemProps;\n\nexport const TabBar: WithInstallType<typeof LocalTabBar> = withInstall(LocalTabBar);\nexport const TabBarItem: WithInstallType<typeof LocalTabBarItem> = withInstall(LocalTabBarItem);\n"],"names":["prefix","config","name","defineComponent","props","TabBarProps","emits","setup","context","renderTNodeJSX","useTNodeJSX","_useDefault","useDefault","emit","_useDefault2","_slicedToArray","activeValue","defaultIndex","ref","itemCount","onMounted","nodes","slots","default","childSlots","useChildSlots","concat","value","length","updateChild","currentValue","tabBarClass","computed","_defineProperty","bordered","fixed","safeAreaInsetBottom","shape","provide","_objectSpread","toRefs","_createVNode","_isSlot","s","Object","prototype","toString","call","_isVNode","components","TBadge","TViewListIcon","TabBarItemProps","renderContent","useContent","_useConfig","useConfig","t","globalConfig","_inject","inject","split","theme","currentName","initName","textNode","badgeProps","getBadgeAriaLabel","options","dot","count","maxCount","newsAriaLabel","moreNewsAriaLabel","Number","isNaN","str1","haveMoreNewsAriaLabel","str2","haveNewsAriaLabel","ariaLabel","iconOnly","watch","_textNode$value","height","clientHeight","hasSubTabBar","Array","isArray","subTabBar","isChecked","includes","isSpread","newValue","crowded","isToggleCurrent","toggle","hasChildren","_props$subTabBar","selectChild","childName","iconContent","iconSlot","forEach","item","_item$type","type","size","badge","_slot","_badgeProps$value","_badgeProps$value2","_badgeProps$value3","_badgeProps$value4","_badgeProps$value5","_badgeProps$value6","_badgeProps$value7","_badgeProps$value8","_resolveComponent","content","offset","_default","textNodeContent","menu","map","child","index","onClick","label","attrs","class","TabBar","withInstall","LocalTabBar","TabBarItem","LocalTabBarItem"],"mappings":"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"}