/**
 * tdesign v1.2.3
 * (c) 2024 TDesign Group
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { defineComponent, computed, ref, resolveComponent, openBlock, createElementBlock, normalizeClass, createBlock, withCtx, Fragment, renderList, createVNode, withModifiers, createCommentVNode } from 'vue';
import config from '../config.js';
import { Grid, GridItem } from '../grid/index.js';
import { Swiper, SwiperItem } from '../swiper/index.js';
import '../grid/props.js';
import 'lodash/isObject';
import 'lodash/isString';
import 'lodash/isFunction';
import '../grid/grid-item-props.js';
import '../hooks/tnode.js';
import 'lodash/camelCase';
import 'lodash/kebabCase';
import '../hooks/render-tnode.js';
import 'lodash/isEmpty';
import '../image/index.js';
import '../image/image.js';
import '@babel/runtime/helpers/slicedToArray';
import '@vueuse/core';
import 'tdesign-icons-vue-next';
import '../loading/index.js';
import '../_common/js/loading/circle-adapter.js';
import '../_common/js/utils/set-style.js';
import '../_common/js/utils/helper.js';
import '@babel/runtime/helpers/toConsumableArray';
import '@babel/runtime/helpers/objectWithoutProperties';
import 'lodash/isNull';
import 'lodash/isUndefined';
import 'lodash/isNumber';
import 'lodash/isArray';
import '../hooks/useClass.js';
import '../config-provider/useConfig.js';
import 'lodash/cloneDeep';
import '../config-provider/context.js';
import 'lodash/mergeWith';
import 'lodash/merge';
import '../_common/js/global-config/mobile/default-config.js';
import '../_common/js/global-config/mobile/locale/zh_CN.js';
import '../_chunks/dep-4c6045f6.js';
import '@babel/runtime/helpers/typeof';
import '../_chunks/dep-1d280204.js';
import 'dayjs';
import '../_chunks/dep-5101c61a.js';
import '../config-provider/type.js';
import '../loading/props.js';
import '../shared/index.js';
import '../shared/functions.js';
import '../shared/util.js';
import '../shared/component.js';
import '../shared/constants.js';
import '../shared/render.js';
import '../shared/render-tnode.js';
import '../shared/useToggle/index.js';
import '../shared/useCountDown/index.js';
import '@babel/runtime/helpers/asyncToGenerator';
import '@babel/runtime/regenerator';
import '../shared/useCountDown/utils.js';
import '../shared/useDefault/index.js';
import '../shared/useChildSlots/index.js';
import '../shared/useVModel/index.js';
import '../shared/useTouch/index.js';
import '../shared/useScrollParent/index.js';
import '../shared/useExpose/index.js';
import '../shared/useTest/index.js';
import '../shared/useClickAway/index.js';
import '../shared/useGesture/index.js';
import '@use-gesture/vanilla';
import '../shared/hover.js';
import './style/css.js';
import '../loading/type.js';
import '../image/props.js';
import '../image/type.js';
import '../badge/index.js';
import '../badge/props.js';
import '../badge/type.js';
import '../grid/type.js';
import '../swipe-cell/useSwipe.js';
import '../shared/dom.js';
import '../swiper/props.js';
import '../swiper/type.js';

var prefix = config.prefix;
var name = "".concat(prefix, "-action-sheet");
var script = defineComponent({
  components: {
    TGrid: Grid,
    TGridItem: GridItem,
    TSwiper: Swiper,
    TSwiperItem: SwiperItem
  },
  props: {
    items: {
      type: Array,
      required: true
    },
    count: {
      type: Number,
      default: 8
    },
    selected: {
      type: Function,
      default: void 0
    }
  },
  emits: ["selected"],
  setup: function setup(props, context) {
    var gridColumn = computed(function () {
      return Math.ceil(props.count / 2);
    });
    var pageNum = computed(function () {
      return Math.ceil(props.items.length / props.count);
    });
    var actionItems = computed(function () {
      var res = [];
      for (var i = 0; i < pageNum.value; i++) {
        var temp = props.items.slice(i * props.count, (i + 1) * props.count);
        res.push(temp);
      }
      return res;
    });
    var gridClasses = computed(function () {
      return _defineProperty(_defineProperty(_defineProperty({}, "".concat(name, "__grid"), true), "".concat(name, "__grid--swiper"), pageNum.value > 1), "".concat(name, "__dots"), pageNum.value > 1);
    });
    var handleSelected = function handleSelected(i) {
      context.emit("selected", i);
    };
    return {
      name: ref(name),
      pageNum: pageNum,
      gridColumn: gridColumn,
      actionItems: actionItems,
      gridClasses: gridClasses,
      handleSelected: handleSelected
    };
  }
});

function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_t_grid_item = resolveComponent("t-grid-item");
  var _component_t_grid = resolveComponent("t-grid");
  var _component_t_swiper_item = resolveComponent("t-swiper-item");
  var _component_t_swiper = resolveComponent("t-swiper");
  return openBlock(), createElementBlock("div", {
    class: normalizeClass(_ctx.gridClasses)
  }, [_ctx.actionItems.length > 1 ? (openBlock(), createBlock(_component_t_swiper, {
    key: 0,
    autoplay: false,
    "pagination-position": "bottom",
    navigation: {
      type: "dots",
      showControls: false
    },
    loop: false,
    class: normalizeClass("".concat(_ctx.name, "__swiper-wrap")),
    height: 192
  }, {
    default: withCtx(function () {
      return [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.actionItems, function (Items, i) {
        return openBlock(), createBlock(_component_t_swiper_item, {
          key: i
        }, {
          default: withCtx(function () {
            return [createVNode(_component_t_grid, {
              column: _ctx.gridColumn
            }, {
              default: withCtx(function () {
                return [(openBlock(true), createElementBlock(Fragment, null, renderList(Items, function (item, index) {
                  return openBlock(), createBlock(_component_t_grid_item, {
                    key: index,
                    text: item.label,
                    image: item.icon,
                    badge: item.badge,
                    onClick: withModifiers(function ($event) {
                      return _ctx.handleSelected(i * _ctx.count + index);
                    }, ["prevent"])
                  }, null, 8, ["text", "image", "badge", "onClick"]);
                }), 128))];
              }),
              _: 2
            }, 1032, ["column"])];
          }),
          _: 2
        }, 1024);
      }), 128))];
    }),
    _: 1
  }, 8, ["class"])) : createCommentVNode("", true), _ctx.actionItems.length === 1 ? (openBlock(), createBlock(_component_t_grid, {
    key: 1,
    column: _ctx.gridColumn
  }, {
    default: withCtx(function () {
      return [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.actionItems[0], function (item, index) {
        return openBlock(), createBlock(_component_t_grid_item, {
          key: index,
          text: item.label,
          image: item.icon,
          badge: item.badge,
          onClick: function onClick($event) {
            return _ctx.handleSelected(index);
          }
        }, null, 8, ["text", "image", "badge", "onClick"]);
      }), 128))];
    }),
    _: 1
  }, 8, ["column"])) : createCommentVNode("", true)], 2);
}

script.render = render;

export { script as default };
//# sourceMappingURL=action-sheet-grid.js.map
