{"version":3,"file":"action-sheet-grid.js","sources":["../../src/action-sheet/action-sheet-grid.vue","../../src/action-sheet/action-sheet-grid.vue?vue&type=template&id=54f024d2&lang.js"],"sourcesContent":["<template>\n  <div :class=\"gridClasses\">\n    <t-swiper\n      v-if=\"actionItems.length > 1\"\n      :autoplay=\"false\"\n      pagination-position=\"bottom\"\n      :navigation=\"{ type: 'dots', showControls: false }\"\n      :loop=\"false\"\n      :class=\"`${name}__swiper-wrap`\"\n      :height=\"192\"\n    >\n      <t-swiper-item v-for=\"(Items, i) in actionItems\" :key=\"i\">\n        <t-grid :column=\"gridColumn\">\n          <t-grid-item\n            v-for=\"(item, index) in Items\"\n            :key=\"index\"\n            :text=\"item.label\"\n            :image=\"item.icon\"\n            :badge=\"item.badge\"\n            @click.prevent=\"handleSelected(i * count + index)\"\n          />\n        </t-grid>\n      </t-swiper-item>\n    </t-swiper>\n    <t-grid v-if=\"actionItems.length === 1\" :column=\"gridColumn\">\n      <t-grid-item\n        v-for=\"(item, index) in actionItems[0]\"\n        :key=\"index\"\n        :text=\"item.label\"\n        :image=\"item.icon\"\n        :badge=\"item.badge\"\n        @click=\"handleSelected(index)\"\n      />\n    </t-grid>\n  </div>\n</template>\n<script lang=\"ts\">\nimport { ref, defineComponent, computed } from 'vue';\nimport config from '../config';\nimport { Grid as TGrid, GridItem as TGridItem } from '../grid';\nimport { Swiper as TSwiper, SwiperItem as TSwiperItem } from '../swiper';\n\nconst { prefix } = config;\n\nconst name = `${prefix}-action-sheet`;\n\nexport default defineComponent({\n  components: { TGrid, TGridItem, TSwiper, TSwiperItem },\n  props: {\n    items: {\n      type: Array,\n      required: true,\n    },\n    count: {\n      type: Number,\n      default: 8,\n    },\n    selected: {\n      type: Function,\n      default: undefined,\n    },\n  },\n  emits: ['selected'],\n  setup(props, context) {\n    const gridColumn = computed(() => Math.ceil(props.count / 2));\n    const pageNum = computed(() => Math.ceil(props.items.length / props.count));\n    const actionItems = computed(() => {\n      const res: any = [];\n      for (let i = 0; i < pageNum.value; i++) {\n        const temp = props.items.slice(i * props.count, (i + 1) * props.count);\n        res.push(temp);\n      }\n      return res;\n    });\n    const gridClasses = computed(() => ({\n      [`${name}__grid`]: true,\n      [`${name}__grid--swiper`]: pageNum.value > 1,\n      [`${name}__dots`]: pageNum.value > 1,\n    }));\n    const handleSelected = (i: any) => {\n      context.emit('selected', i);\n    };\n\n    return {\n      name: ref(name),\n      pageNum,\n      gridColumn,\n      actionItems,\n      gridClasses,\n      handleSelected,\n    };\n  },\n});\n</script>\n","<template>\n  <div :class=\"gridClasses\">\n    <t-swiper\n      v-if=\"actionItems.length > 1\"\n      :autoplay=\"false\"\n      pagination-position=\"bottom\"\n      :navigation=\"{ type: 'dots', showControls: false }\"\n      :loop=\"false\"\n      :class=\"`${name}__swiper-wrap`\"\n      :height=\"192\"\n    >\n      <t-swiper-item v-for=\"(Items, i) in actionItems\" :key=\"i\">\n        <t-grid :column=\"gridColumn\">\n          <t-grid-item\n            v-for=\"(item, index) in Items\"\n            :key=\"index\"\n            :text=\"item.label\"\n            :image=\"item.icon\"\n            :badge=\"item.badge\"\n            @click.prevent=\"handleSelected(i * count + index)\"\n          />\n        </t-grid>\n      </t-swiper-item>\n    </t-swiper>\n    <t-grid v-if=\"actionItems.length === 1\" :column=\"gridColumn\">\n      <t-grid-item\n        v-for=\"(item, index) in actionItems[0]\"\n        :key=\"index\"\n        :text=\"item.label\"\n        :image=\"item.icon\"\n        :badge=\"item.badge\"\n        @click=\"handleSelected(index)\"\n      />\n    </t-grid>\n  </div>\n</template>\n<script lang=\"ts\">\nimport { ref, defineComponent, computed } from 'vue';\nimport config from '../config';\nimport { Grid as TGrid, GridItem as TGridItem } from '../grid';\nimport { Swiper as TSwiper, SwiperItem as TSwiperItem } from '../swiper';\n\nconst { prefix } = config;\n\nconst name = `${prefix}-action-sheet`;\n\nexport default defineComponent({\n  components: { TGrid, TGridItem, TSwiper, TSwiperItem },\n  props: {\n    items: {\n      type: Array,\n      required: true,\n    },\n    count: {\n      type: Number,\n      default: 8,\n    },\n    selected: {\n      type: Function,\n      default: undefined,\n    },\n  },\n  emits: ['selected'],\n  setup(props, context) {\n    const gridColumn = computed(() => Math.ceil(props.count / 2));\n    const pageNum = computed(() => Math.ceil(props.items.length / props.count));\n    const actionItems = computed(() => {\n      const res: any = [];\n      for (let i = 0; i < pageNum.value; i++) {\n        const temp = props.items.slice(i * props.count, (i + 1) * props.count);\n        res.push(temp);\n      }\n      return res;\n    });\n    const gridClasses = computed(() => ({\n      [`${name}__grid`]: true,\n      [`${name}__grid--swiper`]: pageNum.value > 1,\n      [`${name}__dots`]: pageNum.value > 1,\n    }));\n    const handleSelected = (i: any) => {\n      context.emit('selected', i);\n    };\n\n    return {\n      name: ref(name),\n      pageNum,\n      gridColumn,\n      actionItems,\n      gridClasses,\n      handleSelected,\n    };\n  },\n});\n</script>\n"],"names":["prefix","config","name","defineComponent","components","TGrid","TGridItem","TSwiper","TSwiperItem","props","items","type","Array","required","count","Number","default","selected","Function","emits","setup","context","gridColumn","computed","Math","ceil","pageNum","length","actionItems","res","i","value","temp","slice","push","gridClasses","_defineProperty","concat","handleSelected","emit","ref","_createElementBlock","class","_ctx","_createBlock","_component_t_swiper","autoplay","navigation","showControls","loop","height","_openBlock","_Fragment","_renderList","Items","_component_t_swiper_item","key","_createVNode","_component_t_grid","column","item","index","_component_t_grid_item","text","label","image","icon","badge","onClick","$event"],"mappings":"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"}