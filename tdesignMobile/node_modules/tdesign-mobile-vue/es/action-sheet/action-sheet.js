/**
 * tdesign v1.2.3
 * (c) 2024 TDesign Group
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import _slicedToArray from '@babel/runtime/helpers/slicedToArray';
import { defineComponent, computed, watch, ref, resolveComponent, openBlock, createBlock, normalizeClass, withCtx, createElementVNode, createElementBlock, toDisplayString, createCommentVNode, createVNode, createTextVNode } from 'vue';
import '../shared/index.js';
import script$1 from './action-sheet-list.js';
import script$2 from './action-sheet-grid.js';
import _Popup from '../popup/index.js';
import _Button from '../button/index.js';
import config from '../config.js';
import ActionSheetProps from './props.js';
import { useConfig } from '../config-provider/useConfig.js';
import { useDefault } from '../shared/useDefault/index.js';
import '../shared/functions.js';
import '../shared/util.js';
import 'lodash/isNumber';
import '../shared/component.js';
import '../shared/constants.js';
import '../shared/render.js';
import '@babel/runtime/helpers/typeof';
import 'lodash/camelCase';
import '../shared/render-tnode.js';
import '../shared/useToggle/index.js';
import '../shared/useCountDown/index.js';
import '@babel/runtime/helpers/asyncToGenerator';
import '@babel/runtime/regenerator';
import '@vueuse/core';
import '../shared/useCountDown/utils.js';
import '../shared/useChildSlots/index.js';
import '@babel/runtime/helpers/toConsumableArray';
import '../shared/useVModel/index.js';
import 'lodash/kebabCase';
import '../shared/useTouch/index.js';
import '../shared/useScrollParent/index.js';
import '../shared/useExpose/index.js';
import '../shared/useTest/index.js';
import '../shared/useClickAway/index.js';
import 'lodash/isArray';
import '../shared/useGesture/index.js';
import '@use-gesture/vanilla';
import '../shared/hover.js';
import '../badge/index.js';
import '../badge/props.js';
import '../hooks/useClass.js';
import '../hooks/tnode.js';
import 'lodash/isFunction';
import '../hooks/render-tnode.js';
import 'lodash/isEmpty';
import 'lodash/isString';
import 'lodash/isObject';
import './style/css.js';
import '../badge/type.js';
import 'lodash/cloneDeep';
import '../config-provider/context.js';
import 'lodash/mergeWith';
import 'lodash/merge';
import '../_common/js/global-config/mobile/default-config.js';
import '../_common/js/global-config/mobile/locale/zh_CN.js';
import '../_chunks/dep-4c6045f6.js';
import '../_chunks/dep-1d280204.js';
import 'dayjs';
import '../_chunks/dep-5101c61a.js';
import '../config-provider/type.js';
import '../grid/index.js';
import '../grid/props.js';
import '../grid/grid-item-props.js';
import '../image/index.js';
import '../image/image.js';
import 'tdesign-icons-vue-next';
import '../loading/index.js';
import '../_common/js/loading/circle-adapter.js';
import '../_common/js/utils/set-style.js';
import '../_common/js/utils/helper.js';
import '@babel/runtime/helpers/objectWithoutProperties';
import 'lodash/isNull';
import 'lodash/isUndefined';
import '../loading/props.js';
import '../loading/type.js';
import '../image/props.js';
import '../image/type.js';
import '../grid/type.js';
import '../swiper/index.js';
import '../swipe-cell/useSwipe.js';
import '../shared/dom.js';
import '../swiper/props.js';
import '../swiper/type.js';
import '../popup/popup.js';
import '../popup/props.js';
import '../overlay/index.js';
import '../overlay/props.js';
import '../popup/type.js';
import '../button/props.js';
import '../form/hooks.js';
import '../button/type.js';

var prefix = config.prefix;
var name = "".concat(prefix, "-action-sheet");
var script = defineComponent({
  name: name,
  components: {
    TPopup: _Popup,
    TButton: _Button,
    ActionSheetList: script$1,
    ActionSheetGrid: script$2
  },
  props: ActionSheetProps,
  emits: ["selected", "update:modelValue", "cancel", "close", "update:visible"],
  setup: function setup(props, context) {
    var _useConfig = useConfig("actionSheet"),
      globalConfig = _useConfig.globalConfig;
    var actionItems = computed(function () {
      return props.items.map(function (item) {
        if (typeof item === "string") {
          return {
            label: item
          };
        }
        return item;
      });
    });
    var _useDefault = useDefault(props, context.emit, "visible", "visible-change"),
      _useDefault2 = _slicedToArray(_useDefault, 1),
      currentVisible = _useDefault2[0];
    var rootClasses = computed(function () {
      return _defineProperty({}, "".concat(name, "__content"), true);
    });
    var descriptionClasses = computed(function () {
      return _defineProperty(_defineProperty(_defineProperty({}, "".concat(name, "__description"), true), "".concat(name, "__description--left"), props.align === "left"), "".concat(name, "__description--grid"), props.theme === "grid");
    });
    watch(function () {
      return currentVisible.value;
    }, function (val) {
      currentVisible.value = val;
    }, {
      immediate: true,
      deep: true
    });
    var hide = function hide(trigger) {
      var _props$onClose;
      context.emit("update:modelValue", false);
      (_props$onClose = props.onClose) === null || _props$onClose === void 0 || _props$onClose.call(props, {
        trigger: trigger
      });
    };
    var handleCancel = function handleCancel() {
      var _props$onCancel;
      (_props$onCancel = props.onCancel) === null || _props$onCancel === void 0 || _props$onCancel.call(props);
      context.emit("update:modelValue", false);
    };
    var handleSelected = function handleSelected(index) {
      var _props$onSelected;
      (_props$onSelected = props.onSelected) === null || _props$onSelected === void 0 || _props$onSelected.call(props, props === null || props === void 0 ? void 0 : props.items[index], index);
      hide("selected");
    };
    var handleClose = function handleClose() {
      hide("overlay");
    };
    return {
      prefix: prefix,
      name: ref(name),
      globalConfig: globalConfig,
      rootClasses: rootClasses,
      descriptionClasses: descriptionClasses,
      actionItems: actionItems,
      currentVisible: currentVisible,
      handleCancel: handleCancel,
      handleSelected: handleSelected,
      handleClose: handleClose
    };
  }
});

function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_action_sheet_list = resolveComponent("action-sheet-list");
  var _component_action_sheet_grid = resolveComponent("action-sheet-grid");
  var _component_t_button = resolveComponent("t-button");
  var _component_t_popup = resolveComponent("t-popup");
  return openBlock(), createBlock(_component_t_popup, {
    visible: _ctx.currentVisible,
    placement: "bottom",
    "destroy-on-close": true,
    class: normalizeClass(_ctx.name),
    onClose: _ctx.handleClose
  }, {
    default: withCtx(function () {
      return [createElementVNode("div", {
        class: normalizeClass(_ctx.rootClasses)
      }, [_ctx.description ? (openBlock(), createElementBlock("p", {
        key: 0,
        class: normalizeClass(_ctx.descriptionClasses)
      }, toDisplayString(_ctx.description), 3)) : createCommentVNode("", true), _ctx.theme === "list" ? (openBlock(), createBlock(_component_action_sheet_list, {
        key: 1,
        align: _ctx.align,
        items: _ctx.actionItems,
        onSelected: _ctx.handleSelected
      }, null, 8, ["align", "items", "onSelected"])) : createCommentVNode("", true), _ctx.theme === "grid" ? (openBlock(), createBlock(_component_action_sheet_grid, {
        key: 2,
        items: _ctx.actionItems,
        count: _ctx.count,
        onSelected: _ctx.handleSelected
      }, null, 8, ["items", "count", "onSelected"])) : createCommentVNode("", true), _ctx.showCancel ? (openBlock(), createElementBlock("div", {
        key: 3,
        class: normalizeClass("".concat(_ctx.name, "__footer"))
      }, [createElementVNode("div", {
        class: normalizeClass("".concat(_ctx.name, "__gap-").concat(_ctx.theme))
      }, null, 2), createVNode(_component_t_button, {
        class: normalizeClass("".concat(_ctx.name, "__cancel")),
        variant: "text",
        block: "",
        onClick: _ctx.handleCancel
      }, {
        default: withCtx(function () {
          return [createTextVNode(toDisplayString(_ctx.cancelText || _ctx.globalConfig.cancel), 1)];
        }),
        _: 1
      }, 8, ["class", "onClick"])], 2)) : createCommentVNode("", true)], 2)];
    }),
    _: 1
  }, 8, ["visible", "class", "onClose"]);
}

script.render = render;

export { script as default };
//# sourceMappingURL=action-sheet.js.map
