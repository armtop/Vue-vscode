/**
 * tdesign v1.2.3
 * (c) 2024 TDesign Group
 * @license MIT
 */

import { defineComponent, ref, getCurrentInstance, computed, resolveComponent, openBlock, createElementBlock, normalizeClass, createVNode, renderSlot, createElementVNode, withModifiers, createBlock, createCommentVNode } from 'vue';
import { useWindowSize, useEventListener } from '@vueuse/core';
import _Loading from '../loading/index.js';
import config from '../config.js';
import ListProps from './props.js';
import '../shared/index.js';
import { useConfig } from '../config-provider/useConfig.js';
import TNodeComponent from '../shared/render-tnode.js';
import { useScrollParent } from '../shared/useScrollParent/index.js';
import { renderTNode } from '../shared/render.js';
import '@babel/runtime/helpers/defineProperty';
import '../_common/js/loading/circle-adapter.js';
import '../_common/js/utils/set-style.js';
import '../_common/js/utils/helper.js';
import '@babel/runtime/helpers/toConsumableArray';
import '@babel/runtime/helpers/objectWithoutProperties';
import '@babel/runtime/helpers/slicedToArray';
import 'lodash/isString';
import 'lodash/isNull';
import 'lodash/isUndefined';
import 'lodash/isNumber';
import 'lodash/isArray';
import '../hooks/useClass.js';
import '../loading/props.js';
import '../hooks/tnode.js';
import 'lodash/isFunction';
import 'lodash/camelCase';
import 'lodash/kebabCase';
import '../hooks/render-tnode.js';
import 'lodash/isEmpty';
import 'lodash/isObject';
import './style/css.js';
import '../loading/type.js';
import '../shared/component.js';
import 'lodash/cloneDeep';
import '../config-provider/context.js';
import 'lodash/mergeWith';
import 'lodash/merge';
import '../_common/js/global-config/mobile/default-config.js';
import '../_common/js/global-config/mobile/locale/zh_CN.js';
import '../_chunks/dep-4c6045f6.js';
import '@babel/runtime/helpers/typeof';
import '../_chunks/dep-1d280204.js';
import 'dayjs';
import '../_chunks/dep-5101c61a.js';
import '../config-provider/type.js';
import '../shared/functions.js';
import '../shared/util.js';
import '../shared/constants.js';
import '../shared/useToggle/index.js';
import '../shared/useCountDown/index.js';
import '@babel/runtime/helpers/asyncToGenerator';
import '@babel/runtime/regenerator';
import '../shared/useCountDown/utils.js';
import '../shared/useDefault/index.js';
import '../shared/useChildSlots/index.js';
import '../shared/useVModel/index.js';
import '../shared/useTouch/index.js';
import '../shared/useExpose/index.js';
import '../shared/useTest/index.js';
import '../shared/useClickAway/index.js';
import '../shared/useGesture/index.js';
import '@use-gesture/vanilla';
import '../shared/hover.js';

var prefix = config.prefix;
var name = "".concat(prefix, "-list");
var script = defineComponent({
  name: name,
  components: {
    TLoading: _Loading,
    TNode: TNodeComponent
  },
  props: ListProps,
  emits: ["load-more", "scroll"],
  setup: function setup(props, context) {
    var _useConfig = useConfig("list"),
      globalConfig = _useConfig.globalConfig;
    var LOADING_TEXT_MAP = {
      loading: globalConfig.value.loading,
      "load-more": globalConfig.value.loadingMoreText
    };
    var root = ref();
    var empty = ref();
    var scrollParent = useScrollParent(root);
    var _useWindowSize = useWindowSize(),
      height = _useWindowSize.height;
    var internalInstance = getCurrentInstance();
    var headerContent = computed(function () {
      return renderTNode(internalInstance, "header");
    });
    var footerContent = computed(function () {
      return renderTNode(internalInstance, "footer");
    });
    var onLoadMore = function onLoadMore(e) {
      if (props.asyncLoading === "load-more") {
        var _props$onLoadMore;
        (_props$onLoadMore = props.onLoadMore) === null || _props$onLoadMore === void 0 || _props$onLoadMore.call(props);
      }
    };
    var handleScroll = function handleScroll(e) {
      var _props$onScroll;
      var scrollHeight = e.target.scrollHeight || Math.max(document.documentElement.scrollHeight, document.body.scrollHeight);
      var scrollTop = e.target.scrollTop || document.documentElement.scrollTop || document.body.scrollTop;
      var offsetHeight = e.target.offsetHeight || height.value;
      (_props$onScroll = props.onScroll) === null || _props$onScroll === void 0 || _props$onScroll.call(props, scrollHeight - (scrollTop + offsetHeight), scrollTop);
    };
    useEventListener(scrollParent, "scroll", handleScroll);
    return {
      name: name,
      root: root,
      empty: empty,
      onLoadMore: onLoadMore,
      handleScroll: handleScroll,
      headerContent: headerContent,
      footerContent: footerContent,
      LOADING_TEXT_MAP: LOADING_TEXT_MAP
    };
  }
});

function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_t_node = resolveComponent("t-node");
  var _component_t_loading = resolveComponent("t-loading");
  return openBlock(), createElementBlock("div", {
    ref: "root",
    class: normalizeClass(_ctx.name),
    onScroll: _cache[1] || (_cache[1] = function () {
      return _ctx.handleScroll && _ctx.handleScroll.apply(_ctx, arguments);
    })
  }, [createVNode(_component_t_node, {
    content: _ctx.headerContent
  }, null, 8, ["content"]), renderSlot(_ctx.$slots, "default"), createElementVNode("div", {
    class: normalizeClass("".concat(_ctx.name, "__loading--wrapper")),
    onClick: _cache[0] || (_cache[0] = withModifiers(function () {
      return _ctx.onLoadMore && _ctx.onLoadMore.apply(_ctx, arguments);
    }, ["stop"]))
  }, [typeof _ctx.asyncLoading === "string" && ["loading", "load-more"].includes(_ctx.asyncLoading) ? (openBlock(), createBlock(_component_t_loading, {
    key: 0,
    indicator: _ctx.asyncLoading === "loading",
    text: typeof _ctx.asyncLoading === "string" ? _ctx.LOADING_TEXT_MAP[_ctx.asyncLoading] : "",
    class: normalizeClass("".concat(_ctx.name, "__loading"))
  }, null, 8, ["indicator", "text", "class"])) : createCommentVNode("", true)], 2), createVNode(_component_t_node, {
    content: _ctx.footerContent
  }, null, 8, ["content"])], 34);
}

script.render = render;

export { script as default };
//# sourceMappingURL=list.js.map
