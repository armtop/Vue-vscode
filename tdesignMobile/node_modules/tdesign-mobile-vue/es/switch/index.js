/**
 * tdesign v1.2.3
 * (c) 2024 TDesign Group
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import _slicedToArray from '@babel/runtime/helpers/slicedToArray';
import { defineComponent, computed, createVNode } from 'vue';
import _Loading from '../loading/index.js';
import '../shared/index.js';
import config from '../config.js';
import SwitchProps from './props.js';
import { useFormDisabled } from '../form/hooks.js';
import { usePrefixClass } from '../hooks/useClass.js';
import { useDefault } from '../shared/useDefault/index.js';
import { useToggle } from '../shared/useToggle/index.js';
import './style/css.js';
import './type.js';
import { withInstall } from '../shared/component.js';
import '../_common/js/loading/circle-adapter.js';
import '../_common/js/utils/set-style.js';
import '../_common/js/utils/helper.js';
import '@babel/runtime/helpers/toConsumableArray';
import '@babel/runtime/helpers/objectWithoutProperties';
import 'lodash/isString';
import 'lodash/isNull';
import 'lodash/isUndefined';
import 'lodash/isNumber';
import 'lodash/isArray';
import '../loading/props.js';
import '../hooks/tnode.js';
import 'lodash/isFunction';
import 'lodash/camelCase';
import 'lodash/kebabCase';
import '../hooks/render-tnode.js';
import 'lodash/isEmpty';
import 'lodash/isObject';
import '../loading/type.js';
import '../shared/functions.js';
import '../shared/util.js';
import '../shared/constants.js';
import '../shared/render.js';
import '@babel/runtime/helpers/typeof';
import '../shared/render-tnode.js';
import '../shared/useCountDown/index.js';
import '@babel/runtime/helpers/asyncToGenerator';
import '@babel/runtime/regenerator';
import '@vueuse/core';
import '../shared/useCountDown/utils.js';
import '../shared/useChildSlots/index.js';
import '../shared/useVModel/index.js';
import '../shared/useTouch/index.js';
import '../shared/useScrollParent/index.js';
import '../shared/useExpose/index.js';
import '../shared/useTest/index.js';
import '../shared/useClickAway/index.js';
import '../shared/useGesture/index.js';
import '@use-gesture/vanilla';
import '../shared/hover.js';
import '../config-provider/useConfig.js';
import 'lodash/cloneDeep';
import '../config-provider/context.js';
import 'lodash/mergeWith';
import 'lodash/merge';
import '../_common/js/global-config/mobile/default-config.js';
import '../_common/js/global-config/mobile/locale/zh_CN.js';
import '../_chunks/dep-4c6045f6.js';
import '../_chunks/dep-1d280204.js';
import 'dayjs';
import '../_chunks/dep-5101c61a.js';
import '../config-provider/type.js';

var prefix = config.prefix;
var name = "".concat(prefix, "-switch");
var Switch = defineComponent({
  name: name,
  props: SwitchProps,
  setup: function setup(props, context) {
    var switchClass = usePrefixClass("switch");
    var disabled = useFormDisabled();
    var switchValues = props.customValue || [true, false];
    var _useDefault = useDefault(props, context.emit, "value", "change"),
      _useDefault2 = _slicedToArray(_useDefault, 1),
      innerValue = _useDefault2[0];
    var _useToggle = useToggle(switchValues, innerValue.value),
      state = _useToggle.state,
      toggle = _useToggle.toggle;
    var checked = computed(function () {
      return innerValue.value === switchValues[0];
    });
    var switchClasses = computed(function () {
      return ["".concat(switchClass.value), "".concat(switchClass.value, "--").concat(props.size), _defineProperty(_defineProperty({}, "".concat(switchClass.value, "--checked"), checked.value), "".concat(switchClass.value, "--disabled"), disabled.value || props.loading)];
    });
    var dotClasses = computed(function () {
      var _props$label, _props$icon;
      return ["".concat(switchClass.value, "__dot"), "".concat(switchClass.value, "__dot--").concat(props.size), _defineProperty(_defineProperty({}, "".concat(switchClass.value, "__dot--checked"), checked.value), "".concat(switchClass.value, "__dot--plain"), ((_props$label = props.label) === null || _props$label === void 0 ? void 0 : _props$label.length) !== 2 && ((_props$icon = props.icon) === null || _props$icon === void 0 ? void 0 : _props$icon.length) !== 2 && !props.loading)];
    });
    var labelClasses = computed(function () {
      return ["".concat(switchClass.value, "__label"), "".concat(switchClass.value, "__label--").concat(props.size), _defineProperty({}, "".concat(switchClass.value, "__label--checked"), checked.value)];
    });
    var iconContent = computed(function () {
      return props.icon[checked.value ? 0 : 1];
    });
    function handleToggle(event) {
      event.preventDefault();
      if (disabled.value || props.loading) {
        return;
      }
      if (state.value === innerValue.value) {
        toggle();
      }
      innerValue.value = state.value;
    }
    return function () {
      var readerContent = function readerContent() {
        if (props.loading) {
          return createVNode(_Loading, {
            "inherit-color": true,
            "size": "16.25px"
          }, null);
        }
        if (props.label.length === 2) {
          return checked.value ? props.label[0] : props.label[1];
        }
        return iconContent.value;
      };
      return createVNode("div", {
        "class": switchClasses.value,
        "onClick": handleToggle
      }, [createVNode("div", {
        "class": dotClasses.value
      }, [createVNode("div", {
        "class": labelClasses.value
      }, [readerContent()])])]);
    };
  }
});

var _Switch = withInstall(Switch);

export { _Switch as default };
//# sourceMappingURL=index.js.map
