/**
 * tdesign v1.2.3
 * (c) 2024 TDesign Group
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import _slicedToArray from '@babel/runtime/helpers/slicedToArray';
import { defineComponent, toRefs, inject, computed, createVNode, mergeProps, provide } from 'vue';
import { CheckCircleFilledIcon, CheckIcon } from 'tdesign-icons-vue-next';
import '../shared/index.js';
import config from '../config.js';
import props from './props.js';
import { useFormDisabled } from '../form/hooks.js';
import { usePrefixClass } from '../hooks/useClass.js';
import { useContent, useTNodeJSX } from '../hooks/tnode.js';
import { useVModel } from '../shared/useVModel/index.js';
import { NOOP } from '../shared/functions.js';
import props$1 from './radio-group-props.js';
import { useDefault } from '../shared/useDefault/index.js';
import './style/css.js';
import './type.js';
import { withInstall } from '../shared/component.js';
import '../shared/util.js';
import 'lodash/isNumber';
import '../shared/constants.js';
import '../shared/render.js';
import '@babel/runtime/helpers/typeof';
import 'lodash/camelCase';
import '../shared/render-tnode.js';
import '../shared/useToggle/index.js';
import '../shared/useCountDown/index.js';
import '@babel/runtime/helpers/asyncToGenerator';
import '@babel/runtime/regenerator';
import '@vueuse/core';
import '../shared/useCountDown/utils.js';
import '../shared/useChildSlots/index.js';
import '@babel/runtime/helpers/toConsumableArray';
import '../shared/useTouch/index.js';
import '../shared/useScrollParent/index.js';
import '../shared/useExpose/index.js';
import '../shared/useTest/index.js';
import '../shared/useClickAway/index.js';
import 'lodash/isArray';
import '../shared/useGesture/index.js';
import '@use-gesture/vanilla';
import '../shared/hover.js';
import '../config-provider/useConfig.js';
import 'lodash/isFunction';
import 'lodash/cloneDeep';
import 'lodash/isString';
import '../config-provider/context.js';
import 'lodash/mergeWith';
import 'lodash/merge';
import '../_common/js/global-config/mobile/default-config.js';
import '../_common/js/global-config/mobile/locale/zh_CN.js';
import '../_chunks/dep-4c6045f6.js';
import '../_chunks/dep-1d280204.js';
import 'dayjs';
import '../_chunks/dep-5101c61a.js';
import '../config-provider/type.js';
import 'lodash/kebabCase';
import '../hooks/render-tnode.js';
import 'lodash/isEmpty';
import 'lodash/isObject';

var prefix$1 = config.prefix;
var Radio = defineComponent({
  name: "".concat(prefix$1, "-radio"),
  props: props,
  setup: function setup(props2) {
    var renderTNodeContent = useContent();
    var renderTNodeJSX = useTNodeJSX();
    var radioClass = usePrefixClass("radio");
    var _toRefs = toRefs(props2),
      checked = _toRefs.checked,
      modelValue = _toRefs.modelValue,
      block = _toRefs.block;
    var _useVModel = useVModel(checked, modelValue, props2.defaultChecked, props2.onChange, "checked"),
      _useVModel2 = _slicedToArray(_useVModel, 2),
      innerChecked = _useVModel2[0],
      setInnerChecked = _useVModel2[1];
    var rootGroupProps = inject("rootGroupProps", {});
    var rootGroupValue = inject("rootGroupValue", {});
    var rootGroupChange = inject("rootGroupChange", NOOP);
    var groupDisabled = computed(function () {
      return rootGroupProps === null || rootGroupProps === void 0 ? void 0 : rootGroupProps.disabled;
    });
    var formDisabled = useFormDisabled(groupDisabled);
    var isDisabled = computed(function () {
      if (formDisabled.value == null && "disabled" in rootGroupProps) return rootGroupProps.disabled;
      return formDisabled.value;
    });
    var radioChecked = computed(function () {
      return innerChecked.value || props2.value === (rootGroupValue === null || rootGroupValue === void 0 ? void 0 : rootGroupValue.value);
    });
    var finalBorderless = computed(function () {
      if (props2.borderless == null && "borderless" in rootGroupProps) return rootGroupProps.borderless;
      return props2.borderless;
    });
    var finalPlacement = computed(function () {
      if (props2.placement == null && "placement" in rootGroupProps) return rootGroupProps.placement;
      return props2.placement || "left";
    });
    var finalAllowUncheck = computed(function () {
      if (props2.allowUncheck == null && "allowUncheck" in rootGroupProps) return rootGroupProps.allowUncheck;
      return props2.allowUncheck;
    });
    var inputProps = computed(function () {
      return {
        name: rootGroupProps.name || props2.name,
        checked: radioChecked.value,
        disabled: isDisabled.value,
        value: props2.value
      };
    });
    var iconContent = computed(function () {
      var _props2$icon;
      if (((_props2$icon = props2.icon) === null || _props2$icon === void 0 ? void 0 : _props2$icon.length) === 2) {
        var iconIndex = radioChecked.value ? 0 : 1;
        return props2.icon[iconIndex];
      }
      return null;
    });
    var radioClasses = computed(function () {
      return ["".concat(radioClass.value), "".concat(radioClass.value, "--").concat(finalPlacement.value), _defineProperty({}, "".concat(radioClass.value, "--block"), block.value)];
    });
    var titleClasses = computed(function () {
      return ["".concat(radioClass.value, "__title"), _defineProperty({}, "".concat(radioClass.value, "__title--disabled"), isDisabled.value)];
    });
    var iconClass = computed(function () {
      return ["".concat(radioClass.value, "__icon"), "".concat(radioClass.value, "__icon--").concat(finalPlacement.value), _defineProperty(_defineProperty({}, "".concat(radioClass.value, "__icon--checked"), radioChecked.value), "".concat(radioClass.value, "__icon--disabled"), isDisabled.value)];
    });
    var radioContentChange = function radioContentChange(e) {
      e.stopPropagation();
      if (props2.contentDisabled) {
        return;
      }
      radioOrgChange(e);
    };
    var radioOrgChange = function radioOrgChange(e) {
      if (isDisabled.value) {
        return;
      }
      if (rootGroupChange) {
        rootGroupChange(finalAllowUncheck.value && radioChecked.value ? "" : props2.value, e);
      } else {
        if (!finalAllowUncheck.value && radioChecked.value) return;
        setInnerChecked(!radioChecked.value, {
          e: e
        });
      }
    };
    var readerIcon = function readerIcon() {
      if (radioChecked.value) {
        if (props2.icon === "circle") {
          return createVNode(CheckCircleFilledIcon, {
            "class": "".concat(radioClass.value, "__icon-wrap")
          }, null);
        }
        if (props2.icon === "line") {
          return createVNode(CheckIcon, {
            "class": "".concat(radioClass.value, "__icon-wrap")
          }, null);
        }
        if (props2.icon === "dot") {
          return createVNode("div", {
            "class": ["".concat(radioClass.value, "__icon-").concat(props2.icon), _defineProperty({}, "".concat(radioClass.value, "__icon-").concat(props2.icon, "--disabled"), isDisabled.value)]
          }, null);
        }
      } else {
        if (props2.icon === "circle" || props2.icon === "dot") {
          return createVNode("div", {
            "class": ["".concat(radioClass.value, "__icon-circle"), _defineProperty({}, "".concat(radioClass.value, "__icon-circle--disabled"), isDisabled.value)]
          }, null);
        }
        if (props2.icon === "line") {
          return createVNode("div", {
            "class": "placeholder"
          }, null);
        }
      }
    };
    return function () {
      var label = renderTNodeContent("default", "label");
      var content = renderTNodeJSX("content");
      return createVNode("div", {
        "class": radioClasses.value,
        "onClick": radioOrgChange
      }, [createVNode("input", mergeProps({
        "type": "radio",
        "class": "".concat(radioClass.value, "__original")
      }, inputProps.value), null), createVNode("div", {
        "class": iconClass.value
      }, [readerIcon(), iconContent.value]), createVNode("div", {
        "class": "".concat(radioClass.value, "__content"),
        "onClick": radioContentChange
      }, [label && createVNode("span", {
        "class": titleClasses.value,
        "style": "-webkit-line-clamp: ".concat(props2.maxLabelRow)
      }, [label]), content && createVNode("div", {
        "class": ["".concat(radioClass.value, "__description"), _defineProperty({}, "".concat(radioClass.value, "__description"), isDisabled.value)],
        "style": "-webkit-line-clamp: ".concat(props2.maxContentRow)
      }, [content])]), !finalBorderless.value && createVNode("div", {
        "class": "".concat(radioClass.value, "__border ").concat(radioClass.value, "__border--").concat(finalPlacement.value)
      }, null)]);
    };
  }
});

var prefix = config.prefix;
var _RadioGroup = defineComponent({
  name: "".concat(prefix, "-radio-group"),
  props: props$1,
  setup: function setup(props2, context) {
    var renderTNodeJSX = useTNodeJSX();
    var radioGroupClass = usePrefixClass("radio-group");
    var _useDefault = useDefault(props2, context.emit, "value", "change"),
      _useDefault2 = _slicedToArray(_useDefault, 2),
      groupValue = _useDefault2[0],
      setGroupValue = _useDefault2[1];
    var keys = computed(function () {
      return props2.keys;
    });
    var groupOptions = computed(function () {
      var _props2$options;
      return (_props2$options = props2.options) === null || _props2$options === void 0 ? void 0 : _props2$options.map(function (option) {
        var opt = option;
        if (typeof option === "string" || typeof option === "number") {
          opt = {
            value: option,
            label: option.toString()
          };
        }
        return opt;
      });
    });
    var handleRadioChange = function handleRadioChange(val, e) {
      if (props2.allowUncheck && val === groupValue.value) {
        setGroupValue("", {
          e: e
        });
      } else {
        setGroupValue(val, {
          e: e
        });
      }
    };
    provide("rootGroupProps", props2);
    provide("rootGroupValue", groupValue);
    provide("rootGroupChange", handleRadioChange);
    return function () {
      return createVNode("div", {
        "class": radioGroupClass.value,
        "role": "radiogroup"
      }, [props2.options && groupOptions.value.map(function (opt, index) {
        var _keys$value$value, _keys$value, _opt$disabled, _keys$value$value2, _keys$value2, _keys$value$label, _keys$value3;
        return createVNode(Radio, {
          "name": props2.name,
          "icon": props2.icon,
          "checked": groupValue.value === opt[(_keys$value$value = (_keys$value = keys.value) === null || _keys$value === void 0 ? void 0 : _keys$value.value) !== null && _keys$value$value !== void 0 ? _keys$value$value : "value"],
          "disabled": (_opt$disabled = opt === null || opt === void 0 ? void 0 : opt.disabled) !== null && _opt$disabled !== void 0 ? _opt$disabled : props2.disabled,
          "value": opt[(_keys$value$value2 = (_keys$value2 = keys.value) === null || _keys$value2 === void 0 ? void 0 : _keys$value2.value) !== null && _keys$value$value2 !== void 0 ? _keys$value$value2 : "value"],
          "label": opt[(_keys$value$label = (_keys$value3 = keys.value) === null || _keys$value3 === void 0 ? void 0 : _keys$value3.label) !== null && _keys$value$label !== void 0 ? _keys$value$label : "label"],
          "placement": props2.placement
        }, null);
      }), !props2.options && renderTNodeJSX("default")]);
    };
  }
});

var RadioGroup = withInstall(_RadioGroup);
var _Radio = withInstall(Radio);

export { RadioGroup, _Radio as default };
//# sourceMappingURL=index.js.map
