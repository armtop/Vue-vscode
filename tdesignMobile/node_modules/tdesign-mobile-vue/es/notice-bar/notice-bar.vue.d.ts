import { h } from 'vue';
import { NoticeBarTrigger, DrawMarquee } from './type';
declare const _default: import("vue").DefineComponent<{
    content: {
        type: import("vue").PropType<string | string[] | ((h: typeof h) => import("../common").SlotReturnValue)>;
    };
    direction: {
        type: import("vue").PropType<"vertical" | "horizontal">;
        default: "vertical" | "horizontal";
        validator(val: "vertical" | "horizontal"): boolean;
    };
    marquee: {
        type: import("vue").PropType<boolean | DrawMarquee>;
        default: boolean;
    };
    operation: {
        type: import("vue").PropType<string | ((h: typeof h) => import("../common").SlotReturnValue)>;
    };
    prefixIcon: {
        type: import("vue").PropType<Boolean | ((h: typeof h) => import("../common").SlotReturnValue)>;
        default: boolean;
    };
    suffixIcon: {
        type: import("vue").PropType<(h: typeof h) => import("../common").SlotReturnValue>;
    };
    theme: {
        type: import("vue").PropType<"error" | "warning" | "success" | "info">;
        default: "error" | "warning" | "success" | "info";
        validator(val: "error" | "warning" | "success" | "info"): boolean;
    };
    visible: {
        type: BooleanConstructor;
        default: any;
    };
    modelValue: {
        type: BooleanConstructor;
        default: any;
    };
    defaultVisible: BooleanConstructor;
    onClick: import("vue").PropType<(trigger: NoticeBarTrigger) => void>;
}, {
    rootClasses: import("vue").ComputedRef<string[]>;
    prefixIconContent: import("vue").ComputedRef<any>;
    suffixIconContent: import("vue").ComputedRef<any>;
    operationContent: import("vue").ComputedRef<any>;
    showContent: import("vue").ComputedRef<any>;
    isShow: import("vue").Ref<boolean>;
    handleClick: (trigger: NoticeBarTrigger) => void;
    listDOM: import("vue").Ref<any>;
    itemDOM: import("vue").Ref<any>;
    animateStyle: import("vue").ComputedRef<{
        transform: string;
        transitionDuration: string;
        transitionTimingFunction: string;
    }>;
    handleScrolling: () => void;
    handleTransitionend: () => void;
    duration: import("vue").Ref<number>;
    offset: import("vue").Ref<number>;
    listWidth: import("vue").Ref<number>;
    itemWidth: import("vue").Ref<number>;
    timer: import("vue").Ref<any>;
    nextTimer: import("vue").Ref<any>;
    scroll: import("vue").Ref<{
        marquee: boolean;
        speed: number;
        loop: number;
        delay: number;
    }>;
    direction: import("vue").Ref<"vertical" | "horizontal">;
    theme: import("vue").Ref<"error" | "warning" | "success" | "info">;
    marquee: import("vue").Ref<boolean>;
    defaultVisible: import("vue").Ref<boolean>;
    prefixIcon: import("vue").Ref<Boolean | ((h: typeof h) => import("../common").SlotReturnValue)>;
    content: import("vue").Ref<string | string[] | ((h: typeof h) => import("../common").SlotReturnValue)>;
    onClick: import("vue").Ref<((trigger: NoticeBarTrigger) => void) & ((...args: any[]) => any)>;
    visible: import("vue").Ref<boolean>;
    modelValue: import("vue").Ref<boolean>;
    suffixIcon: import("vue").Ref<(h: typeof h) => import("../common").SlotReturnValue>;
    operation: import("vue").Ref<string | ((h: typeof h) => import("../common").SlotReturnValue)>;
    isArray: {
        (value?: any): value is any[];
        <T>(value?: any): value is any[];
    };
    name: string;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "click"[], "click", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    content: {
        type: import("vue").PropType<string | string[] | ((h: typeof h) => import("../common").SlotReturnValue)>;
    };
    direction: {
        type: import("vue").PropType<"vertical" | "horizontal">;
        default: "vertical" | "horizontal";
        validator(val: "vertical" | "horizontal"): boolean;
    };
    marquee: {
        type: import("vue").PropType<boolean | DrawMarquee>;
        default: boolean;
    };
    operation: {
        type: import("vue").PropType<string | ((h: typeof h) => import("../common").SlotReturnValue)>;
    };
    prefixIcon: {
        type: import("vue").PropType<Boolean | ((h: typeof h) => import("../common").SlotReturnValue)>;
        default: boolean;
    };
    suffixIcon: {
        type: import("vue").PropType<(h: typeof h) => import("../common").SlotReturnValue>;
    };
    theme: {
        type: import("vue").PropType<"error" | "warning" | "success" | "info">;
        default: "error" | "warning" | "success" | "info";
        validator(val: "error" | "warning" | "success" | "info"): boolean;
    };
    visible: {
        type: BooleanConstructor;
        default: any;
    };
    modelValue: {
        type: BooleanConstructor;
        default: any;
    };
    defaultVisible: BooleanConstructor;
    onClick: import("vue").PropType<(trigger: NoticeBarTrigger) => void>;
}>> & {
    onClick?: (...args: any[]) => any;
}, {
    direction: "vertical" | "horizontal";
    theme: "error" | "warning" | "success" | "info";
    visible: boolean;
    modelValue: boolean;
    marquee: boolean;
    defaultVisible: boolean;
    prefixIcon: Boolean | ((h: typeof h) => import("../common").SlotReturnValue);
}, {}>;
export default _default;
