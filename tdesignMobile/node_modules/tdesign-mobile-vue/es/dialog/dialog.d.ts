declare const _default: import("vue").DefineComponent<{
    actions: {
        type: import("vue").PropType<import("../button").TdButtonProps[]>;
    };
    buttonLayout: {
        type: import("vue").PropType<"vertical" | "horizontal">;
        default: "vertical" | "horizontal";
        validator(val: "vertical" | "horizontal"): boolean;
    };
    cancelBtn: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | import("../button").TdButtonProps>;
    };
    closeBtn: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeOnOverlayClick: {
        type: BooleanConstructor;
        default: any;
    };
    confirmBtn: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | import("../button").TdButtonProps>;
    };
    content: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    destroyOnClose: BooleanConstructor;
    overlayProps: {
        type: import("vue").PropType<object>;
        default: () => {};
    };
    preventScrollThrough: {
        type: BooleanConstructor;
        default: boolean;
    };
    showOverlay: {
        type: BooleanConstructor;
        default: boolean;
    };
    title: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    visible: BooleanConstructor;
    width: {
        type: import("vue").PropType<string | number>;
    };
    zIndex: {
        type: NumberConstructor;
    };
    onCancel: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onClose: import("vue").PropType<(context: import("./type").DialogCloseContext) => void>;
    onClosed: import("vue").PropType<() => void>;
    onConfirm: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onOverlayClick: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("close" | "closed" | "update:visible" | "cancel" | "confirm" | "overlay-click")[], "cancel" | "close" | "closed" | "confirm" | "update:visible" | "overlay-click", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    actions: {
        type: import("vue").PropType<import("../button").TdButtonProps[]>;
    };
    buttonLayout: {
        type: import("vue").PropType<"vertical" | "horizontal">;
        default: "vertical" | "horizontal";
        validator(val: "vertical" | "horizontal"): boolean;
    };
    cancelBtn: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | import("../button").TdButtonProps>;
    };
    closeBtn: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeOnOverlayClick: {
        type: BooleanConstructor;
        default: any;
    };
    confirmBtn: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | import("../button").TdButtonProps>;
    };
    content: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    destroyOnClose: BooleanConstructor;
    overlayProps: {
        type: import("vue").PropType<object>;
        default: () => {};
    };
    preventScrollThrough: {
        type: BooleanConstructor;
        default: boolean;
    };
    showOverlay: {
        type: BooleanConstructor;
        default: boolean;
    };
    title: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    visible: BooleanConstructor;
    width: {
        type: import("vue").PropType<string | number>;
    };
    zIndex: {
        type: NumberConstructor;
    };
    onCancel: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onClose: import("vue").PropType<(context: import("./type").DialogCloseContext) => void>;
    onClosed: import("vue").PropType<() => void>;
    onConfirm: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onOverlayClick: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
}>> & {
    onClose?: (...args: any[]) => any;
    onClosed?: (...args: any[]) => any;
    "onUpdate:visible"?: (...args: any[]) => any;
    onCancel?: (...args: any[]) => any;
    onConfirm?: (...args: any[]) => any;
    "onOverlay-click"?: (...args: any[]) => any;
}, {
    visible: boolean;
    closeBtn: boolean;
    overlayProps: object;
    preventScrollThrough: boolean;
    closeOnOverlayClick: boolean;
    destroyOnClose: boolean;
    showOverlay: boolean;
    buttonLayout: "vertical" | "horizontal";
}, {}>;
export default _default;
