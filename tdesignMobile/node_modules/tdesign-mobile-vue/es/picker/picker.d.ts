import { PickerValue, PickerColumn, PickerColumnItem } from './type';
declare const _default: import("vue").DefineComponent<{
    cancelBtn: {
        type: import("vue").PropType<string | boolean>;
        default: boolean;
    };
    columns: {
        type: import("vue").PropType<PickerColumn[] | ((item: PickerValue[]) => PickerColumn[])>;
        default: () => PickerColumn[] | ((item: PickerValue[]) => PickerColumn[]);
        required: boolean;
    };
    confirmBtn: {
        type: import("vue").PropType<string | boolean>;
        default: boolean;
    };
    header: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
    };
    renderLabel: {
        type: import("vue").PropType<(item: PickerColumnItem) => string>;
    };
    title: {
        type: StringConstructor;
        default: string;
    };
    value: {
        type: import("vue").PropType<PickerValue[]>;
        default: any;
    };
    modelValue: {
        type: import("vue").PropType<PickerValue[]>;
        default: any;
    };
    defaultValue: {
        type: import("vue").PropType<PickerValue[]>;
    };
    visible: BooleanConstructor;
    onCancel: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onChange: import("vue").PropType<(value: PickerValue[], context: {
        columns: import("./type").PickerContext[];
        e: MouseEvent;
    }) => void>;
    onConfirm: import("vue").PropType<(value: PickerValue[], context: {
        index: number[];
        e: MouseEvent;
        label: string[];
    }) => void>;
    onPick: import("vue").PropType<(value: PickerValue[], context: import("./type").PickerContext) => void>;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "update:value" | "change" | "cancel" | "pick")[], "cancel" | "update:modelValue" | "update:value" | "change" | "pick", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    cancelBtn: {
        type: import("vue").PropType<string | boolean>;
        default: boolean;
    };
    columns: {
        type: import("vue").PropType<PickerColumn[] | ((item: PickerValue[]) => PickerColumn[])>;
        default: () => PickerColumn[] | ((item: PickerValue[]) => PickerColumn[]);
        required: boolean;
    };
    confirmBtn: {
        type: import("vue").PropType<string | boolean>;
        default: boolean;
    };
    header: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
    };
    renderLabel: {
        type: import("vue").PropType<(item: PickerColumnItem) => string>;
    };
    title: {
        type: StringConstructor;
        default: string;
    };
    value: {
        type: import("vue").PropType<PickerValue[]>;
        default: any;
    };
    modelValue: {
        type: import("vue").PropType<PickerValue[]>;
        default: any;
    };
    defaultValue: {
        type: import("vue").PropType<PickerValue[]>;
    };
    visible: BooleanConstructor;
    onCancel: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onChange: import("vue").PropType<(value: PickerValue[], context: {
        columns: import("./type").PickerContext[];
        e: MouseEvent;
    }) => void>;
    onConfirm: import("vue").PropType<(value: PickerValue[], context: {
        index: number[];
        e: MouseEvent;
        label: string[];
    }) => void>;
    onPick: import("vue").PropType<(value: PickerValue[], context: import("./type").PickerContext) => void>;
}>> & {
    onChange?: (...args: any[]) => any;
    "onUpdate:modelValue"?: (...args: any[]) => any;
    onCancel?: (...args: any[]) => any;
    onPick?: (...args: any[]) => any;
    "onUpdate:value"?: (...args: any[]) => any;
}, {
    title: string;
    visible: boolean;
    columns: PickerColumn[] | ((item: PickerValue[]) => PickerColumn[]);
    value: PickerValue[];
    modelValue: PickerValue[];
    cancelBtn: string | boolean;
    confirmBtn: string | boolean;
}, {}>;
export default _default;
