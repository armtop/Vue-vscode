{"version":3,"file":"index.js","sources":["../../src/avatar/avatar.tsx","../../src/avatar/avatar-group.tsx","../../src/avatar/index.ts"],"sourcesContent":["import { computed, defineComponent, getCurrentInstance, inject, ref } from 'vue';\nimport TBadge from '../badge';\nimport TImage from '../image';\nimport config from '../config';\nimport AvatarProps from './props';\nimport { TdAvatarGroupProps, TdAvatarProps } from './type';\nimport CLASSNAMES from '../shared/constants';\nimport { useContent, useTNodeJSX } from '../hooks/tnode';\nimport { usePrefixClass } from '../hooks/useClass';\n\nconst { prefix } = config;\nconst name = `${prefix}-avatar`;\n\nexport default defineComponent({\n  name,\n  props: AvatarProps,\n  setup(props) {\n    const renderTNodeJSX = useTNodeJSX();\n    const renderTNodeContent = useContent();\n    const avatarClass = usePrefixClass('avatar');\n\n    const avatarGroupProps = inject<TdAvatarGroupProps>('avatarGroup', {});\n    const hasAvatarGroupProps = Object.keys(avatarGroupProps).length > 0;\n\n    const sizeValue = ref(props.size || (avatarGroupProps && avatarGroupProps.size));\n    const sizeReValue = ref((avatarGroupProps && avatarGroupProps.size) || props.size);\n    const sizeClass = `${sizeReValue.value.indexOf('px') > -1 ? 'medium' : sizeReValue.value}`;\n    const avatarClasses = computed(() => [\n      `${avatarClass.value}`,\n      `${avatarClass.value}--${sizeClass}`,\n      {\n        [`${avatarClass.value}--${props.shape}`]: props.shape,\n      },\n      hasAvatarGroupProps ? `${avatarClass.value}--border ${avatarClass.value}--border-${sizeClass}` : '',\n    ]);\n\n    const isCustomSize = computed(() => sizeValue.value && !CLASSNAMES.SIZE[sizeValue.value]);\n    const customSize = computed(() => {\n      return isCustomSize.value\n        ? {\n            height: sizeValue.value,\n            width: sizeValue.value,\n          }\n        : {};\n    });\n\n    const handleImgLoadError = (e: any) => {\n      props.onError?.(e);\n    };\n    return () => {\n      const icon = renderTNodeJSX('icon');\n      const TNodeContent = renderTNodeContent('default', 'content');\n\n      const readerAvatar = () => {\n        if (props.image && !props.hideOnLoadFailed) {\n          return (\n            <TImage\n              style={customSize.value}\n              src={props.image}\n              alt={props.alt}\n              {...(props.imageProps as TdAvatarProps['imageProps'])}\n              onError={handleImgLoadError}\n            />\n          );\n        }\n        if (icon) {\n          return <div class={`${avatarClass.value}__icon`}>{icon}</div>;\n        }\n        return <span>{TNodeContent}</span>;\n      };\n      return (\n        <div class={`${avatarClass.value}__wrapper`} style={customSize.value}>\n          <div class={`${avatarClass.value}__badge`}>\n            <TBadge {...(props.badgeProps as TdAvatarProps['badgeProps'])}>\n              <div class={avatarClasses.value}>{readerAvatar()}</div>\n            </TBadge>\n          </div>\n        </div>\n      );\n    };\n  },\n});\n","import { computed, defineComponent, Fragment, provide, RendererNode } from 'vue';\n\nimport AvatarGroupProps from './avatar-group-props';\nimport config from '../config';\nimport TAvatar from './avatar';\n\nimport { useTNodeJSX } from '../hooks/tnode';\nimport { usePrefixClass } from '../hooks/useClass';\n\nconst { prefix } = config;\nconst name = `${prefix}-avatar-group`;\n\nexport default defineComponent({\n  name,\n  props: AvatarGroupProps,\n  setup(props) {\n    const renderTNodeJSX = useTNodeJSX();\n    const avatarGroupClass = usePrefixClass('avatar-group');\n\n    provide('avatarGroup', { ...props });\n\n    const direction = props.cascading ? props.cascading.split('-')[0] : 'right';\n\n    const avatarGroupClasses = computed(() => [\n      `${avatarGroupClass.value}`,\n      `${avatarGroupClass.value}-offset-${direction}-${props.size.indexOf('px') > -1 ? 'medium' : props.size}`,\n    ]);\n\n    const readerAvatar = () => {\n      const children: Array<RendererNode> = renderTNodeJSX('default');\n      const allChildren: Array<RendererNode> = [];\n\n      children.forEach((child) => {\n        if (child.type === Fragment) {\n          allChildren.push(...child.children);\n        } else {\n          allChildren.push(child);\n        }\n      });\n\n      let isShowCollapse = false;\n      let avatarList: Array<RendererNode> = [];\n      if (allChildren.length > props.max) {\n        avatarList = allChildren.slice(0, props.max);\n        isShowCollapse = true;\n      } else {\n        avatarList = allChildren;\n      }\n\n      if (props.cascading === 'left-up') {\n        const defaultZIndex = 100;\n        for (let index = 0; index < avatarList.length; index++) {\n          avatarList[index].props.style = `z-index: ${defaultZIndex - index * 10}`;\n        }\n      }\n\n      if (isShowCollapse) {\n        const collapseAvatar = renderTNodeJSX('collapseAvatar');\n        avatarList.push(\n          <TAvatar size={avatarList[0].size || props.size}>\n            {collapseAvatar || `+${allChildren.length - props.max}`}\n          </TAvatar>,\n        );\n      }\n\n      return avatarList;\n    };\n\n    return () => {\n      return <div class={avatarGroupClasses.value}>{readerAvatar()}</div>;\n    };\n  },\n});\n","import _Avatar from './avatar';\nimport _AvatarGroup from './avatar-group';\nimport { withInstall, WithInstallType } from '../shared';\n\nimport './style';\nimport { TdAvatarProps, TdAvatarGroupProps } from './type';\n\nexport * from './type';\nexport type AvatarProps = TdAvatarProps;\nexport type AvatarGroupProps = TdAvatarGroupProps;\n\nconst Avatar: WithInstallType<typeof _Avatar> = withInstall(_Avatar);\nexport const AvatarGroup: WithInstallType<typeof _AvatarGroup> = withInstall(_AvatarGroup);\nexport default Avatar;\n"],"names":["prefix","config","name","defineComponent","props","AvatarProps","setup","renderTNodeJSX","useTNodeJSX","renderTNodeContent","useContent","avatarClass","usePrefixClass","avatarGroupProps","inject","hasAvatarGroupProps","Object","keys","length","sizeValue","ref","size","sizeReValue","sizeClass","concat","value","indexOf","avatarClasses","computed","_defineProperty","shape","isCustomSize","CLASSNAMES","SIZE","customSize","height","width","handleImgLoadError","e","_props$onError","onError","call","icon","TNodeContent","readerAvatar","image","hideOnLoadFailed","_createVNode","TImage","_mergeProps","alt","imageProps","TBadge","badgeProps","default","_default","AvatarGroupProps","avatarGroupClass","provide","_objectSpread","direction","cascading","split","avatarGroupClasses","children","allChildren","forEach","child","type","Fragment","push","apply","_toConsumableArray","isShowCollapse","avatarList","max","slice","defaultZIndex","index","style","collapseAvatar","TAvatar","Avatar","withInstall","_Avatar","AvatarGroup","_AvatarGroup"],"mappings":"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"}