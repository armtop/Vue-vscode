import { Data } from './type';
export declare const requestSubmit: (target: HTMLFormElement) => void;
declare const _default: import("vue").DefineComponent<{
    colon: BooleanConstructor;
    data: {
        type: import("vue").PropType<Data>;
        default: () => {};
    };
    disabled: {
        type: BooleanConstructor;
        default: any;
    };
    errorMessage: {
        type: import("vue").PropType<import("./type").FormErrorMessage>;
    };
    formControlledComponents: {
        type: import("vue").PropType<string[]>;
    };
    labelAlign: {
        type: import("vue").PropType<"left" | "right" | "top">;
        default: "left" | "right" | "top";
        validator(val: "left" | "right" | "top"): boolean;
    };
    labelWidth: {
        type: import("vue").PropType<string | number>;
        default: string;
    };
    contentAlign: {
        type: import("vue").PropType<"left" | "right">;
        default: "left" | "right";
        validator(val: "left" | "right"): boolean;
    };
    layout: {
        type: import("vue").PropType<"vertical" | "inline">;
        default: "vertical" | "inline";
        validator(val: "vertical" | "inline"): boolean;
    };
    preventSubmitDefault: {
        type: BooleanConstructor;
        default: boolean;
    };
    requiredMark: {
        type: BooleanConstructor;
        default: any;
    };
    resetType: {
        type: import("vue").PropType<"initial" | "empty">;
        default: "initial" | "empty";
        validator(val: "initial" | "empty"): boolean;
    };
    rules: {
        type: import("vue").PropType<import("./type").FormRules<Data>>;
    };
    scrollToFirstError: {
        type: import("vue").PropType<"" | "auto" | "smooth">;
        validator(val: "" | "auto" | "smooth"): boolean;
    };
    showErrorMessage: {
        type: BooleanConstructor;
        default: boolean;
    };
    statusIcon: {
        type: import("vue").PropType<boolean | ((h: typeof import("vue").h, props: import("./type").TdFormItemProps) => import("../common").SlotReturnValue)>;
        default: any;
    };
    submitWithWarningMessage: BooleanConstructor;
    onReset: import("vue").PropType<(context: {
        e?: Event;
    }) => void>;
    onSubmit: import("vue").PropType<(context: import("./type").SubmitContext<Data>) => void>;
    onValidate: import("vue").PropType<(result: import("./type").ValidateResultContext<Data>) => void>;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    colon: BooleanConstructor;
    data: {
        type: import("vue").PropType<Data>;
        default: () => {};
    };
    disabled: {
        type: BooleanConstructor;
        default: any;
    };
    errorMessage: {
        type: import("vue").PropType<import("./type").FormErrorMessage>;
    };
    formControlledComponents: {
        type: import("vue").PropType<string[]>;
    };
    labelAlign: {
        type: import("vue").PropType<"left" | "right" | "top">;
        default: "left" | "right" | "top";
        validator(val: "left" | "right" | "top"): boolean;
    };
    labelWidth: {
        type: import("vue").PropType<string | number>;
        default: string;
    };
    contentAlign: {
        type: import("vue").PropType<"left" | "right">;
        default: "left" | "right";
        validator(val: "left" | "right"): boolean;
    };
    layout: {
        type: import("vue").PropType<"vertical" | "inline">;
        default: "vertical" | "inline";
        validator(val: "vertical" | "inline"): boolean;
    };
    preventSubmitDefault: {
        type: BooleanConstructor;
        default: boolean;
    };
    requiredMark: {
        type: BooleanConstructor;
        default: any;
    };
    resetType: {
        type: import("vue").PropType<"initial" | "empty">;
        default: "initial" | "empty";
        validator(val: "initial" | "empty"): boolean;
    };
    rules: {
        type: import("vue").PropType<import("./type").FormRules<Data>>;
    };
    scrollToFirstError: {
        type: import("vue").PropType<"" | "auto" | "smooth">;
        validator(val: "" | "auto" | "smooth"): boolean;
    };
    showErrorMessage: {
        type: BooleanConstructor;
        default: boolean;
    };
    statusIcon: {
        type: import("vue").PropType<boolean | ((h: typeof import("vue").h, props: import("./type").TdFormItemProps) => import("../common").SlotReturnValue)>;
        default: any;
    };
    submitWithWarningMessage: BooleanConstructor;
    onReset: import("vue").PropType<(context: {
        e?: Event;
    }) => void>;
    onSubmit: import("vue").PropType<(context: import("./type").SubmitContext<Data>) => void>;
    onValidate: import("vue").PropType<(result: import("./type").ValidateResultContext<Data>) => void>;
}>>, {
    data: {};
    layout: "vertical" | "inline";
    disabled: boolean;
    showErrorMessage: boolean;
    labelAlign: "left" | "right" | "top";
    labelWidth: string | number;
    contentAlign: "left" | "right";
    resetType: "initial" | "empty";
    statusIcon: boolean | ((h: typeof import("vue").h, props: import("./type").TdFormItemProps) => import("../common").SlotReturnValue);
    requiredMark: boolean;
    colon: boolean;
    preventSubmitDefault: boolean;
    submitWithWarningMessage: boolean;
}, {}>;
export default _default;
