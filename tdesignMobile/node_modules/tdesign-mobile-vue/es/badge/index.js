/**
 * tdesign v1.2.3
 * (c) 2024 TDesign Group
 * @license MIT
 */

import _typeof from '@babel/runtime/helpers/typeof';
import _slicedToArray from '@babel/runtime/helpers/slicedToArray';
import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { defineComponent, computed, createVNode } from 'vue';
import config from '../config.js';
import BadgeProps from './props.js';
import { usePrefixClass } from '../hooks/useClass.js';
import { useTNodeJSX, useContent } from '../hooks/tnode.js';
import '../shared/index.js';
import './style/css.js';
import './type.js';
import { withInstall } from '../shared/component.js';
import '../config-provider/useConfig.js';
import 'lodash/isFunction';
import 'lodash/cloneDeep';
import 'lodash/isString';
import '../config-provider/context.js';
import 'lodash/mergeWith';
import 'lodash/merge';
import 'lodash/isArray';
import '../_common/js/global-config/mobile/default-config.js';
import '../_common/js/global-config/mobile/locale/zh_CN.js';
import '../_chunks/dep-4c6045f6.js';
import '../_chunks/dep-1d280204.js';
import 'dayjs';
import '../_chunks/dep-5101c61a.js';
import '../config-provider/type.js';
import 'lodash/camelCase';
import 'lodash/kebabCase';
import '../hooks/render-tnode.js';
import 'lodash/isEmpty';
import 'lodash/isObject';
import '../shared/functions.js';
import '../shared/util.js';
import 'lodash/isNumber';
import '../shared/constants.js';
import '../shared/render.js';
import '../shared/render-tnode.js';
import '../shared/useToggle/index.js';
import '../shared/useCountDown/index.js';
import '@babel/runtime/helpers/asyncToGenerator';
import '@babel/runtime/regenerator';
import '@vueuse/core';
import '../shared/useCountDown/utils.js';
import '../shared/useDefault/index.js';
import '../shared/useChildSlots/index.js';
import '@babel/runtime/helpers/toConsumableArray';
import '../shared/useVModel/index.js';
import '../shared/useTouch/index.js';
import '../shared/useScrollParent/index.js';
import '../shared/useExpose/index.js';
import '../shared/useTest/index.js';
import '../shared/useClickAway/index.js';
import '../shared/useGesture/index.js';
import '@use-gesture/vanilla';
import '../shared/hover.js';

var prefix = config.prefix;
var name = "".concat(prefix, "-badge");
var Badge = defineComponent({
  name: name,
  props: BadgeProps,
  setup: function setup(props) {
    var renderTNodeJSX = useTNodeJSX();
    var renderTNodeContent = useContent();
    var badgeClass = usePrefixClass("badge");
    var badgeClasses = computed(function () {
      return _defineProperty(_defineProperty({}, "".concat(badgeClass.value), true), "".concat(badgeClass.value, "__ribbon-outer"), props.shape === "ribbon");
    });
    var badgeInnerClasses = computed(function () {
      return _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty({}, "".concat(badgeClass.value, "--basic"), true), "".concat(badgeClass.value, "--dot"), props.dot), "".concat(badgeClass.value, "--").concat(props.size), true), "".concat(badgeClass.value, "--").concat(props.shape), true), "".concat(badgeClass.value, "--count"), !props.dot && props.count), "".concat(prefix, "-has-count"), true);
    });
    var isShowBadge = computed(function () {
      if (props.dot) {
        return true;
      }
      var count = Number(props.count);
      if (!props.showZero && count === 0) {
        return false;
      }
      if (props.count == null) return false;
      return true;
    });
    var hasUnit = function hasUnit(unit) {
      return unit.indexOf("px") > 0 || unit.indexOf("rpx") > 0 || unit.indexOf("em") > 0 || unit.indexOf("rem") > 0 || unit.indexOf("%") > 0 || unit.indexOf("vh") > 0 || unit.indexOf("vm") > 0;
    };
    var badgeStyles = computed(function () {
      if (!props.offset) {
        return {
          background: props.color
        };
      }
      var _props$offset = _slicedToArray(props.offset, 2),
        _props$offset$ = _props$offset[0],
        xOffset = _props$offset$ === void 0 ? 0 : _props$offset$,
        _props$offset$2 = _props$offset[1],
        yOffset = _props$offset$2 === void 0 ? 0 : _props$offset$2;
      xOffset = hasUnit(xOffset.toString()) ? xOffset : "".concat(xOffset, "px");
      yOffset = hasUnit(yOffset.toString()) ? yOffset : "".concat(yOffset, "px");
      return {
        background: props.color,
        right: xOffset,
        top: yOffset
      };
    });
    var badgeValue = computed(function () {
      if (props.dot) {
        return "";
      }
      var count = Number(props.count);
      if (isNaN(count) || isNaN(props.maxCount)) {
        return props.count;
      }
      return count > props.maxCount ? "".concat(props.maxCount, "+") : count;
    });
    return function () {
      var readerCount = function readerCount() {
        var countType = _typeof(props.count);
        if (countType === "string" || countType === "number") {
          return null;
        }
        return renderTNodeJSX("count");
      };
      var readerContent = function readerContent() {
        var content = renderTNodeContent("default", "content");
        if (typeof content === "string") {
          return createVNode("span", {
            "class": "".concat(badgeClass.value, "__content-text")
          }, [content]);
        }
        return content;
      };
      var readerRibbonBefore = function readerRibbonBefore() {
        if (props.shape !== "ribbon") {
          return null;
        }
        return createVNode("div", {
          "class": "".concat(badgeClass.value, "__ribbon--before"),
          "style": props.color ? "border-color: ".concat(props.color) : ""
        }, null);
      };
      var readerRibbonAfter = function readerRibbonAfter() {
        if (props.shape !== "ribbon") {
          return null;
        }
        return createVNode("div", {
          "class": "".concat(badgeClass.value, "__ribbon--after"),
          "style": props.color ? "border-color: ".concat(props.color) : ""
        }, null);
      };
      var readerBadge = function readerBadge() {
        if (!isShowBadge.value) {
          return null;
        }
        return createVNode("div", {
          "class": badgeInnerClasses.value,
          "style": badgeStyles.value
        }, [readerRibbonBefore(), badgeValue.value, readerRibbonAfter()]);
      };
      return createVNode("div", {
        "class": badgeClasses.value
      }, [createVNode("div", {
        "class": "".concat(badgeClass.value, "__content")
      }, [readerContent()]), readerBadge(), readerCount()]);
    };
  }
});

var _Badge = withInstall(Badge);

export { _Badge as default };
//# sourceMappingURL=index.js.map
