{"version":3,"file":"image-viewer.js","sources":["../../src/image-viewer/image-viewer.vue","../../src/image-viewer/image-viewer.vue?vue&type=template&id=20e9edf8&lang.js"],"sourcesContent":["<template>\n  <transition name=\"fade\">\n    <div v-if=\"visible\" :ref=\"(el) => (rootRef = el)\" :class=\"`${prefix}-image-viewer`\">\n      <div :class=\"`${name}__mask`\" @click=\"handleClose($event, 'overlay')\" />\n      <t-swiper\n        ref=\"swiperRootRef\"\n        :autoplay=\"false\"\n        :class=\"`${name}__content`\"\n        height=\"100vh\"\n        :default-current=\"currentIndex\"\n        :disabled=\"disabled\"\n        @change=\"onSwiperChange\"\n      >\n        <t-swiper-item\n          v-for=\"(image, index) in images\"\n          ref=\"swiperItemRefs\"\n          :key=\"index\"\n          :class=\"`${name}__swiper-item`\"\n          style=\"touch-action: none\"\n        >\n          <t-image\n            :src=\"image\"\n            :style=\"`${imageTransitionDuration}; ${\n              index === touchIndex ? `transform: ${imageTransform}` : 'transform: matrix(1, 0, 0, 1, 0, 0)'\n            }`\"\n            :on-load=\"({ e }) => onImgLoad(e, index)\"\n            @transitionend.self=\"onTransitionEnd(index)\"\n            @transitionstart.self=\"onTransitionStart(index)\"\n          />\n        </t-swiper-item>\n      </t-swiper>\n      <div :class=\"`${name}__nav`\">\n        <div v-if=\"closeNode\" :class=\"`${name}__nav-close`\" @click=\"handleClose($event, 'close-btn')\">\n          <t-node :content=\"closeNode\" />\n        </div>\n\n        <div v-if=\"showIndex\" :class=\"`${name}__nav-index`\">\n          {{ Math.min((currentIndex ?? 0) + 1, images?.length) }}/{{ images?.length }}\n        </div>\n\n        <div v-if=\"deleteNode\" :class=\"`${name}__nav-delete`\" @click=\"handleDelete\">\n          <t-node :content=\"deleteNode\" />\n        </div>\n      </div>\n    </div>\n  </transition>\n</template>\n\n<script lang=\"ts\">\nimport {\n  computed,\n  defineComponent,\n  reactive,\n  getCurrentInstance,\n  h,\n  Transition,\n  toRefs,\n  ref,\n  watch,\n  nextTick,\n  onUnmounted,\n} from 'vue';\nimport { CloseIcon, DeleteIcon } from 'tdesign-icons-vue-next';\n\nimport config from '../config';\nimport ImagediverProps from './props';\nimport { renderTNode, TNode, useDefault, isBrowser, useGesture, DragState, PinchState } from '../shared';\n\n// inner components\nimport { Swiper as TSwiper, SwiperItem as TSwiperItem } from '../swiper';\nimport TImage from '../image';\nimport { TdImageViewerProps } from './type';\n\nconst { prefix } = config;\nconst name = `${prefix}-image-viewer`;\n\nconst TAP_TIME = 300;\n\nexport default defineComponent({\n  name,\n  components: {\n    Transition,\n    TSwiper,\n    TSwiperItem,\n    TNode,\n    TImage,\n  },\n  props: ImagediverProps,\n  emits: ['close', 'index-change', 'update:visible', 'update:modelValue', 'update:index', 'delete'],\n  setup(props, { emit }) {\n    const internalInstance = getCurrentInstance();\n    const state = reactive({\n      dblTapZooming: false, // double tap zooming\n      zooming: false, // pinch zooming\n      scale: 1,\n      touchIndex: 0,\n      dragging: false,\n      draggedX: 0,\n      draggedY: 0,\n      extraDraggedX: 0,\n    });\n    const [visible, setVisible] = useDefault(props, emit, 'visible', 'change');\n    const [currentIndex, setIndex] = useDefault<TdImageViewerProps['index'], TdImageViewerProps>(\n      props,\n      emit,\n      'index',\n      'index-change',\n    );\n\n    const disabled = ref(false);\n    const rootRef = ref();\n    const imagesSize = reactive({});\n    const swiperRootRef = ref();\n    const swiperItemRefs = ref();\n    const gestureRef = ref();\n\n    const closeNode = computed(() =>\n      renderTNode(internalInstance, 'close-btn', {\n        defaultNode: h(CloseIcon),\n      }),\n    );\n    const deleteNode = computed(() =>\n      renderTNode(internalInstance, 'delete-btn', {\n        defaultNode: h(DeleteIcon),\n      }),\n    );\n\n    const imageTransform = computed(() => {\n      const { scale, draggedX, draggedY } = state;\n      return `matrix(${scale}, 0, 0, ${scale}, ${draggedX}, ${draggedY})`;\n    });\n\n    const imageTransitionDuration = computed(() => {\n      const { zooming, dragging } = state;\n      return zooming || dragging ? 'transition-duration: 0s' : 'transition-duration: 0.3s';\n    });\n\n    const beforeClose = () => {\n      state.dblTapZooming = false;\n      state.zooming = false;\n      state.scale = 1;\n      state.dragging = false;\n      state.draggedX = 0;\n      state.draggedY = 0;\n      state.extraDraggedX = 0;\n    };\n\n    const handleClose = (e: Event, trigger: string) => {\n      beforeClose();\n      setVisible(false);\n      emit('close', { trigger, e });\n    };\n\n    const handleDelete = () => {\n      emit('delete', currentIndex.value ?? 0);\n    };\n\n    const onSwiperChange = (index: number, context: any) => {\n      if (currentIndex.value !== index) {\n        setIndex(index, { context });\n        setScale(1);\n      }\n    };\n\n    const onImgLoad = (e: Event, index: number) => {\n      const { height } = e.target as HTMLImageElement;\n      imagesSize[index] = { height };\n    };\n\n    const getMaxDraggedX = () => {\n      const rootOffsetWidth = rootRef.value?.offsetWidth || 0;\n      const scaledWidth = state.scale * rootOffsetWidth;\n      return Math.max(0, (scaledWidth - rootOffsetWidth) / 2);\n    };\n\n    const getMaxDraggedY = (index: number) => {\n      const rootOffsetHeight = rootRef.value?.offsetHeight || 0;\n      const currentImageScaledHeight = state.scale * (imagesSize?.[index]?.height || 0);\n      if (currentImageScaledHeight <= rootOffsetHeight) return 0;\n      return Math.max(0, (currentImageScaledHeight - rootOffsetHeight) / 2);\n    };\n\n    const setScale = (scale: number) => {\n      scale = Math.min(scale, +props.maxZoom + 1);\n      if (scale !== state.scale) {\n        state.scale = scale;\n\n        if (scale === 1) {\n          state.draggedX = 0;\n          state.draggedY = 0;\n        }\n      }\n    };\n\n    let dragStartTime: number;\n    let dblTapTimer: number | null;\n\n    const toggleScale = () => {\n      const scale = state.scale > 1 ? 1 : 2;\n      setScale(scale);\n    };\n\n    const onTransitionEnd = (index: number) => {\n      if (index === state.touchIndex) {\n        state.dblTapZooming = false;\n        clearTimeout(dblTapTimer);\n        dblTapTimer = null;\n      }\n    };\n\n    const onTransitionStart = (index: number) => {\n      if (index === state.touchIndex) {\n        state.dblTapZooming = true;\n        clearTimeout(dblTapTimer);\n      }\n    };\n\n    const checkTap = (e: DragState) => {\n      const { event } = e;\n      const deltaTime = Date.now() - dragStartTime;\n      if (deltaTime < TAP_TIME && isBrowser) {\n        if (dblTapTimer) {\n          clearTimeout(dblTapTimer);\n          dblTapTimer = window.setTimeout(() => {\n            clearTimeout(dblTapTimer);\n            state.dragging = false;\n            toggleScale();\n          }, TAP_TIME);\n        } else {\n          dblTapTimer = window.setTimeout(() => {\n            handleClose(event, 'overlay');\n            dblTapTimer = null;\n          }, TAP_TIME);\n        }\n      }\n    };\n\n    const onPinchChange = (scale: number, index: number) => {\n      state.zooming = true;\n      state.touchIndex = index;\n      setScale(scale);\n    };\n\n    const onPinchEnd = () => {\n      state.zooming = false;\n      if (state.scale < 1) {\n        setScale(1);\n      }\n      if (state.scale > props.maxZoom) {\n        state.scale = +props.maxZoom;\n      }\n    };\n\n    const handlePinch = (pinState: PinchState, index: number) => {\n      const {\n        last,\n        offset: [d],\n      } = pinState;\n      // 图片未加载完毕，禁止拖拽\n      if (!imagesSize?.[index]) return;\n      if (state.dblTapZooming) return;\n      if (!last) {\n        onPinchChange(d, index);\n      } else {\n        onPinchEnd();\n      }\n    };\n\n    const handleDrag = (dragState: DragState, index: number) => {\n      state.touchIndex = index;\n      const { setOffset } = swiperRootRef.value || {};\n\n      // 图片未加载完毕，禁止拖拽\n      if (!imagesSize?.[index]) return;\n      const { first, movement, _movement, elapsedTime, tap, offset, overflow, _delta } = dragState;\n      if (first) {\n        dragStartTime = Date.now();\n      }\n\n      if (tap && elapsedTime > 0 && elapsedTime < 300) {\n        checkTap(dragState);\n        return;\n      }\n\n      // 双击缩放时取消拖拽事件\n      if (state.dblTapZooming) {\n        dragState?.cancel();\n        return;\n      }\n\n      state.dragging = true;\n\n      // 过高图片允许上下滑动\n      state.draggedY = offset?.[1] || 0;\n\n      if (state.scale === 1) return;\n\n      state.draggedX = offset?.[0] || 0;\n\n      if (movement[0] !== _movement[0] && overflow[0] !== 0) {\n        state.extraDraggedX += _delta[0] / 5;\n        setOffset?.(state.extraDraggedX, 'X');\n      } else if (state.extraDraggedX !== 0) {\n        state.extraDraggedX = 0;\n        setOffset?.(state.extraDraggedX, 'X');\n      }\n    };\n\n    const handleDragEnd = (dragState: DragState) => {\n      const { overflow, last } = dragState;\n      const { goPrev, goNext, swiperContainer } = swiperRootRef.value || {};\n\n      state.dragging = false;\n\n      if (state.extraDraggedX !== 0 && last) {\n        if (Math.abs(state.extraDraggedX) > 50) {\n          state.extraDraggedX = 0;\n          overflow[0] < 0 ? goNext?.('touch') : goPrev?.('touch');\n          return;\n        }\n        state.extraDraggedX = 0;\n        nextTick(() => {\n          swiperContainer?.style?.setProperty?.('transform', 'translateX(0)');\n          swiperContainer?.style?.setProperty?.('transition', 'transform 0.3s');\n        });\n      }\n    };\n\n    const gestureOptions = reactive({\n      destroyInvisible: true,\n      visible: !!visible.value,\n    });\n\n    gestureRef.value = useGesture(gestureOptions);\n\n    watch(\n      () => visible.value,\n      (newVal) => (gestureOptions.visible = !!newVal),\n    );\n\n    watch(\n      () => [visible.value, swiperItemRefs.value],\n      ([newVisible, newRefs]) => {\n        if (!newVisible) return;\n        nextTick(() => {\n          newRefs?.forEach?.((item: any, index: number) => {\n            const { $el } = item;\n            gestureRef.value?.create(\n              $el as Element,\n              {\n                onDrag: (dragState: DragState) => handleDrag(dragState, index),\n                onDragEnd: (dragState: DragState) => handleDragEnd(dragState),\n                onPinch: (pinchState: PinchState) => handlePinch(pinchState, index),\n              },\n              {\n                drag: {\n                  from: () => [state.draggedX, state.draggedY],\n                  pointer: { touch: true },\n                  bounds: () => ({\n                    top: -getMaxDraggedY(index),\n                    right: getMaxDraggedX(),\n                    bottom: getMaxDraggedY(index),\n                    left: -getMaxDraggedX(),\n                  }),\n                },\n                pinch: {\n                  from: () => [state.scale, 0],\n                  pointer: { touch: true },\n                },\n              },\n            );\n          });\n        });\n      },\n    );\n\n    watch(\n      () => state.scale,\n      (newVal) => (disabled.value = newVal !== 1),\n    );\n\n    onUnmounted(() => {\n      clearTimeout(dblTapTimer);\n    });\n\n    return {\n      swiperRootRef,\n      swiperItemRefs,\n      rootRef,\n      disabled,\n      name,\n      ...toRefs(state),\n      prefix,\n      closeNode,\n      deleteNode,\n      currentIndex,\n      imageTransform,\n      imageTransitionDuration,\n      visible,\n      handleClose,\n      handleDelete,\n      onSwiperChange,\n      onImgLoad,\n      onTransitionEnd,\n      onTransitionStart,\n    };\n  },\n});\n</script>\n","<template>\n  <transition name=\"fade\">\n    <div v-if=\"visible\" :ref=\"(el) => (rootRef = el)\" :class=\"`${prefix}-image-viewer`\">\n      <div :class=\"`${name}__mask`\" @click=\"handleClose($event, 'overlay')\" />\n      <t-swiper\n        ref=\"swiperRootRef\"\n        :autoplay=\"false\"\n        :class=\"`${name}__content`\"\n        height=\"100vh\"\n        :default-current=\"currentIndex\"\n        :disabled=\"disabled\"\n        @change=\"onSwiperChange\"\n      >\n        <t-swiper-item\n          v-for=\"(image, index) in images\"\n          ref=\"swiperItemRefs\"\n          :key=\"index\"\n          :class=\"`${name}__swiper-item`\"\n          style=\"touch-action: none\"\n        >\n          <t-image\n            :src=\"image\"\n            :style=\"`${imageTransitionDuration}; ${\n              index === touchIndex ? `transform: ${imageTransform}` : 'transform: matrix(1, 0, 0, 1, 0, 0)'\n            }`\"\n            :on-load=\"({ e }) => onImgLoad(e, index)\"\n            @transitionend.self=\"onTransitionEnd(index)\"\n            @transitionstart.self=\"onTransitionStart(index)\"\n          />\n        </t-swiper-item>\n      </t-swiper>\n      <div :class=\"`${name}__nav`\">\n        <div v-if=\"closeNode\" :class=\"`${name}__nav-close`\" @click=\"handleClose($event, 'close-btn')\">\n          <t-node :content=\"closeNode\" />\n        </div>\n\n        <div v-if=\"showIndex\" :class=\"`${name}__nav-index`\">\n          {{ Math.min((currentIndex ?? 0) + 1, images?.length) }}/{{ images?.length }}\n        </div>\n\n        <div v-if=\"deleteNode\" :class=\"`${name}__nav-delete`\" @click=\"handleDelete\">\n          <t-node :content=\"deleteNode\" />\n        </div>\n      </div>\n    </div>\n  </transition>\n</template>\n\n<script lang=\"ts\">\nimport {\n  computed,\n  defineComponent,\n  reactive,\n  getCurrentInstance,\n  h,\n  Transition,\n  toRefs,\n  ref,\n  watch,\n  nextTick,\n  onUnmounted,\n} from 'vue';\nimport { CloseIcon, DeleteIcon } from 'tdesign-icons-vue-next';\n\nimport config from '../config';\nimport ImagediverProps from './props';\nimport { renderTNode, TNode, useDefault, isBrowser, useGesture, DragState, PinchState } from '../shared';\n\n// inner components\nimport { Swiper as TSwiper, SwiperItem as TSwiperItem } from '../swiper';\nimport TImage from '../image';\nimport { TdImageViewerProps } from './type';\n\nconst { prefix } = config;\nconst name = `${prefix}-image-viewer`;\n\nconst TAP_TIME = 300;\n\nexport default defineComponent({\n  name,\n  components: {\n    Transition,\n    TSwiper,\n    TSwiperItem,\n    TNode,\n    TImage,\n  },\n  props: ImagediverProps,\n  emits: ['close', 'index-change', 'update:visible', 'update:modelValue', 'update:index', 'delete'],\n  setup(props, { emit }) {\n    const internalInstance = getCurrentInstance();\n    const state = reactive({\n      dblTapZooming: false, // double tap zooming\n      zooming: false, // pinch zooming\n      scale: 1,\n      touchIndex: 0,\n      dragging: false,\n      draggedX: 0,\n      draggedY: 0,\n      extraDraggedX: 0,\n    });\n    const [visible, setVisible] = useDefault(props, emit, 'visible', 'change');\n    const [currentIndex, setIndex] = useDefault<TdImageViewerProps['index'], TdImageViewerProps>(\n      props,\n      emit,\n      'index',\n      'index-change',\n    );\n\n    const disabled = ref(false);\n    const rootRef = ref();\n    const imagesSize = reactive({});\n    const swiperRootRef = ref();\n    const swiperItemRefs = ref();\n    const gestureRef = ref();\n\n    const closeNode = computed(() =>\n      renderTNode(internalInstance, 'close-btn', {\n        defaultNode: h(CloseIcon),\n      }),\n    );\n    const deleteNode = computed(() =>\n      renderTNode(internalInstance, 'delete-btn', {\n        defaultNode: h(DeleteIcon),\n      }),\n    );\n\n    const imageTransform = computed(() => {\n      const { scale, draggedX, draggedY } = state;\n      return `matrix(${scale}, 0, 0, ${scale}, ${draggedX}, ${draggedY})`;\n    });\n\n    const imageTransitionDuration = computed(() => {\n      const { zooming, dragging } = state;\n      return zooming || dragging ? 'transition-duration: 0s' : 'transition-duration: 0.3s';\n    });\n\n    const beforeClose = () => {\n      state.dblTapZooming = false;\n      state.zooming = false;\n      state.scale = 1;\n      state.dragging = false;\n      state.draggedX = 0;\n      state.draggedY = 0;\n      state.extraDraggedX = 0;\n    };\n\n    const handleClose = (e: Event, trigger: string) => {\n      beforeClose();\n      setVisible(false);\n      emit('close', { trigger, e });\n    };\n\n    const handleDelete = () => {\n      emit('delete', currentIndex.value ?? 0);\n    };\n\n    const onSwiperChange = (index: number, context: any) => {\n      if (currentIndex.value !== index) {\n        setIndex(index, { context });\n        setScale(1);\n      }\n    };\n\n    const onImgLoad = (e: Event, index: number) => {\n      const { height } = e.target as HTMLImageElement;\n      imagesSize[index] = { height };\n    };\n\n    const getMaxDraggedX = () => {\n      const rootOffsetWidth = rootRef.value?.offsetWidth || 0;\n      const scaledWidth = state.scale * rootOffsetWidth;\n      return Math.max(0, (scaledWidth - rootOffsetWidth) / 2);\n    };\n\n    const getMaxDraggedY = (index: number) => {\n      const rootOffsetHeight = rootRef.value?.offsetHeight || 0;\n      const currentImageScaledHeight = state.scale * (imagesSize?.[index]?.height || 0);\n      if (currentImageScaledHeight <= rootOffsetHeight) return 0;\n      return Math.max(0, (currentImageScaledHeight - rootOffsetHeight) / 2);\n    };\n\n    const setScale = (scale: number) => {\n      scale = Math.min(scale, +props.maxZoom + 1);\n      if (scale !== state.scale) {\n        state.scale = scale;\n\n        if (scale === 1) {\n          state.draggedX = 0;\n          state.draggedY = 0;\n        }\n      }\n    };\n\n    let dragStartTime: number;\n    let dblTapTimer: number | null;\n\n    const toggleScale = () => {\n      const scale = state.scale > 1 ? 1 : 2;\n      setScale(scale);\n    };\n\n    const onTransitionEnd = (index: number) => {\n      if (index === state.touchIndex) {\n        state.dblTapZooming = false;\n        clearTimeout(dblTapTimer);\n        dblTapTimer = null;\n      }\n    };\n\n    const onTransitionStart = (index: number) => {\n      if (index === state.touchIndex) {\n        state.dblTapZooming = true;\n        clearTimeout(dblTapTimer);\n      }\n    };\n\n    const checkTap = (e: DragState) => {\n      const { event } = e;\n      const deltaTime = Date.now() - dragStartTime;\n      if (deltaTime < TAP_TIME && isBrowser) {\n        if (dblTapTimer) {\n          clearTimeout(dblTapTimer);\n          dblTapTimer = window.setTimeout(() => {\n            clearTimeout(dblTapTimer);\n            state.dragging = false;\n            toggleScale();\n          }, TAP_TIME);\n        } else {\n          dblTapTimer = window.setTimeout(() => {\n            handleClose(event, 'overlay');\n            dblTapTimer = null;\n          }, TAP_TIME);\n        }\n      }\n    };\n\n    const onPinchChange = (scale: number, index: number) => {\n      state.zooming = true;\n      state.touchIndex = index;\n      setScale(scale);\n    };\n\n    const onPinchEnd = () => {\n      state.zooming = false;\n      if (state.scale < 1) {\n        setScale(1);\n      }\n      if (state.scale > props.maxZoom) {\n        state.scale = +props.maxZoom;\n      }\n    };\n\n    const handlePinch = (pinState: PinchState, index: number) => {\n      const {\n        last,\n        offset: [d],\n      } = pinState;\n      // 图片未加载完毕，禁止拖拽\n      if (!imagesSize?.[index]) return;\n      if (state.dblTapZooming) return;\n      if (!last) {\n        onPinchChange(d, index);\n      } else {\n        onPinchEnd();\n      }\n    };\n\n    const handleDrag = (dragState: DragState, index: number) => {\n      state.touchIndex = index;\n      const { setOffset } = swiperRootRef.value || {};\n\n      // 图片未加载完毕，禁止拖拽\n      if (!imagesSize?.[index]) return;\n      const { first, movement, _movement, elapsedTime, tap, offset, overflow, _delta } = dragState;\n      if (first) {\n        dragStartTime = Date.now();\n      }\n\n      if (tap && elapsedTime > 0 && elapsedTime < 300) {\n        checkTap(dragState);\n        return;\n      }\n\n      // 双击缩放时取消拖拽事件\n      if (state.dblTapZooming) {\n        dragState?.cancel();\n        return;\n      }\n\n      state.dragging = true;\n\n      // 过高图片允许上下滑动\n      state.draggedY = offset?.[1] || 0;\n\n      if (state.scale === 1) return;\n\n      state.draggedX = offset?.[0] || 0;\n\n      if (movement[0] !== _movement[0] && overflow[0] !== 0) {\n        state.extraDraggedX += _delta[0] / 5;\n        setOffset?.(state.extraDraggedX, 'X');\n      } else if (state.extraDraggedX !== 0) {\n        state.extraDraggedX = 0;\n        setOffset?.(state.extraDraggedX, 'X');\n      }\n    };\n\n    const handleDragEnd = (dragState: DragState) => {\n      const { overflow, last } = dragState;\n      const { goPrev, goNext, swiperContainer } = swiperRootRef.value || {};\n\n      state.dragging = false;\n\n      if (state.extraDraggedX !== 0 && last) {\n        if (Math.abs(state.extraDraggedX) > 50) {\n          state.extraDraggedX = 0;\n          overflow[0] < 0 ? goNext?.('touch') : goPrev?.('touch');\n          return;\n        }\n        state.extraDraggedX = 0;\n        nextTick(() => {\n          swiperContainer?.style?.setProperty?.('transform', 'translateX(0)');\n          swiperContainer?.style?.setProperty?.('transition', 'transform 0.3s');\n        });\n      }\n    };\n\n    const gestureOptions = reactive({\n      destroyInvisible: true,\n      visible: !!visible.value,\n    });\n\n    gestureRef.value = useGesture(gestureOptions);\n\n    watch(\n      () => visible.value,\n      (newVal) => (gestureOptions.visible = !!newVal),\n    );\n\n    watch(\n      () => [visible.value, swiperItemRefs.value],\n      ([newVisible, newRefs]) => {\n        if (!newVisible) return;\n        nextTick(() => {\n          newRefs?.forEach?.((item: any, index: number) => {\n            const { $el } = item;\n            gestureRef.value?.create(\n              $el as Element,\n              {\n                onDrag: (dragState: DragState) => handleDrag(dragState, index),\n                onDragEnd: (dragState: DragState) => handleDragEnd(dragState),\n                onPinch: (pinchState: PinchState) => handlePinch(pinchState, index),\n              },\n              {\n                drag: {\n                  from: () => [state.draggedX, state.draggedY],\n                  pointer: { touch: true },\n                  bounds: () => ({\n                    top: -getMaxDraggedY(index),\n                    right: getMaxDraggedX(),\n                    bottom: getMaxDraggedY(index),\n                    left: -getMaxDraggedX(),\n                  }),\n                },\n                pinch: {\n                  from: () => [state.scale, 0],\n                  pointer: { touch: true },\n                },\n              },\n            );\n          });\n        });\n      },\n    );\n\n    watch(\n      () => state.scale,\n      (newVal) => (disabled.value = newVal !== 1),\n    );\n\n    onUnmounted(() => {\n      clearTimeout(dblTapTimer);\n    });\n\n    return {\n      swiperRootRef,\n      swiperItemRefs,\n      rootRef,\n      disabled,\n      name,\n      ...toRefs(state),\n      prefix,\n      closeNode,\n      deleteNode,\n      currentIndex,\n      imageTransform,\n      imageTransitionDuration,\n      visible,\n      handleClose,\n      handleDelete,\n      onSwiperChange,\n      onImgLoad,\n      onTransitionEnd,\n      onTransitionStart,\n    };\n  },\n});\n</script>\n"],"names":["prefix","config","name","TAP_TIME","defineComponent","components","Transition","TSwiper","TSwiperItem","TNode","TImage","props","ImagediverProps","emits","setup","_ref","emit","internalInstance","getCurrentInstance","state","reactive","dblTapZooming","zooming","scale","touchIndex","dragging","draggedX","draggedY","extraDraggedX","_useDefault","useDefault","_useDefault2","_slicedToArray","visible","setVisible","_useDefault3","_useDefault4","currentIndex","setIndex","disabled","ref","rootRef","imagesSize","swiperRootRef","swiperItemRefs","gestureRef","closeNode","computed","renderTNode","defaultNode","h","CloseIcon","deleteNode","DeleteIcon","imageTransform","concat","imageTransitionDuration","beforeClose","handleClose","e","trigger","handleDelete","_currentIndex$value","value","onSwiperChange","index","context","setScale","onImgLoad","height","target","getMaxDraggedX","_rootRef$value","rootOffsetWidth","offsetWidth","scaledWidth","Math","max","getMaxDraggedY","_rootRef$value2","_imagesSize$index","rootOffsetHeight","offsetHeight","currentImageScaledHeight","min","maxZoom","dragStartTime","dblTapTimer","toggleScale","onTransitionEnd","clearTimeout","onTransitionStart","checkTap","event","deltaTime","Date","now","isBrowser","window","setTimeout","onPinchChange","onPinchEnd","handlePinch","pinState","last","_pinState$offset","offset","d","handleDrag","dragState","_ref2","setOffset","first","movement","_movement","elapsedTime","tap","overflow","_delta","cancel","handleDragEnd","_ref3","goPrev","goNext","swiperContainer","abs","nextTick","_swiperContainer$styl","_swiperContainer$styl2","_swiperContainer$styl3","_swiperContainer$styl4","style","setProperty","call","gestureOptions","destroyInvisible","useGesture","watch","newVal","_ref4","_ref5","newVisible","newRefs","_newRefs$forEach","forEach","item","_gestureRef$value","$el","create","onDrag","onDragEnd","onPinch","pinchState","drag","from","pointer","touch","bounds","top","right","bottom","left","pinch","onUnmounted","_objectSpread","toRefs","_createBlock","_Transition","_ctx$currentIndex","_ctx$images","_ctx$images2","_ctx","_createElementBlock","el","class","_createElementVNode","onClick","_cache","$event","_createVNode","_component_t_swiper","autoplay","onChange","_openBlock","_Fragment","_renderList","images","image","_component_t_swiper_item","key","_component_t_image","src","onTransitionend","_withModifiers","onTransitionstart","_component_t_node","content","showIndex","_toDisplayString","length","apply","arguments"],"mappings":"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"}