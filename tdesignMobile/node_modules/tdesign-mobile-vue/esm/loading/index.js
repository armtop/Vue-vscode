/**
 * tdesign v1.2.3
 * (c) 2024 TDesign Group
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { defineComponent, ref, onMounted, nextTick, onUpdated, createVNode, computed, watch, setBlockTracking } from 'vue';
import circleAdapter from '../_common/js/loading/circle-adapter.js';
import config from '../config.js';
import { usePrefixClass } from '../hooks/useClass.js';
import _toConsumableArray from '@babel/runtime/helpers/toConsumableArray';
import props from './props.js';
import { useTNodeJSX, useContent } from '../hooks/tnode.js';
import '../shared/index.js';
import './style';
import './type.js';
import { withInstall } from '../shared/component.js';
import '../_common/js/utils/set-style.js';
import '../_common/js/utils/helper.js';
import '@babel/runtime/helpers/objectWithoutProperties';
import '@babel/runtime/helpers/slicedToArray';
import 'lodash/isString';
import 'lodash/isNull';
import 'lodash/isUndefined';
import 'lodash/isNumber';
import 'lodash/isArray';
import '../config-provider/useConfig.js';
import 'lodash/isFunction';
import 'lodash/cloneDeep';
import '../config-provider/context.js';
import 'lodash/mergeWith';
import 'lodash/merge';
import '../_common/js/global-config/mobile/default-config.js';
import '../_common/js/global-config/mobile/locale/zh_CN.js';
import '../_chunks/dep-4c6045f6.js';
import '@babel/runtime/helpers/typeof';
import '../_chunks/dep-1d280204.js';
import 'dayjs';
import '../_chunks/dep-5101c61a.js';
import '../config-provider/type.js';
import 'lodash/camelCase';
import 'lodash/kebabCase';
import '../hooks/render-tnode.js';
import 'lodash/isEmpty';
import 'lodash/isObject';
import '../shared/functions.js';
import '../shared/util.js';
import '../shared/constants.js';
import '../shared/render.js';
import '../shared/render-tnode.js';
import '../shared/useToggle/index.js';
import '../shared/useCountDown/index.js';
import '@babel/runtime/helpers/asyncToGenerator';
import '@babel/runtime/regenerator';
import '@vueuse/core';
import '../shared/useCountDown/utils.js';
import '../shared/useDefault/index.js';
import '../shared/useChildSlots/index.js';
import '../shared/useVModel/index.js';
import '../shared/useTouch/index.js';
import '../shared/useScrollParent/index.js';
import '../shared/useExpose/index.js';
import '../shared/useTest/index.js';
import '../shared/useClickAway/index.js';
import '../shared/useGesture/index.js';
import '@use-gesture/vanilla';
import '../shared/hover.js';

var prefix$2 = config.prefix;
var TGradientIcon = defineComponent({
  name: "".concat(prefix$2, "-gradient"),
  props: {
    style: Object
  },
  setup: function setup(props) {
    var gradientClass = usePrefixClass("loading__gradient");
    var classes = [gradientClass.value, "".concat(prefix$2, "-icon-loading")];
    var circle = ref();
    var updateColor = function updateColor() {
      var circleElem = circle.value;
      circleAdapter(circleElem);
    };
    onMounted(function () {
      nextTick(function () {
        updateColor();
      });
    });
    onUpdated(function () {
      updateColor();
    });
    return function () {
      return createVNode("svg", {
        "style": props.style,
        "class": classes,
        "viewBox": "0 0 12 12",
        "version": "1.1",
        "width": "1em",
        "height": "1em",
        "xmlns": "http://www.w3.org/2000/svg"
      }, [createVNode("foreignObject", {
        "x": "0",
        "y": "0",
        "width": "12",
        "height": "12"
      }, [createVNode("div", {
        "ref": circle,
        "class": "".concat(gradientClass.value, "-conic")
      }, null)])]);
    };
  }
});

var prefix$1 = config.prefix;
var SpinnerIcon = defineComponent({
  name: "".concat(prefix$1, "-spinner"),
  props: {
    style: Object
  },
  setup: function setup(props) {
    var spinnerClass = usePrefixClass("loading__spinner");
    return function () {
      return createVNode("span", {
        "class": spinnerClass.value,
        "style": props.style
      }, [_toConsumableArray(new Array(12)).map(function (_, index) {
        return createVNode("i", {
          "class": ["".concat(spinnerClass.value, "--line"), "".concat(spinnerClass.value, "--line-").concat(index + 1)]
        }, null);
      })]);
    };
  }
});

var prefix = config.prefix;
var Loading = defineComponent({
  name: "".concat(prefix, "-loading"),
  props: props,
  setup: function setup(props2) {
    var renderTNodeJSX = useTNodeJSX();
    var renderTNodeContent = useContent();
    var loadingClass = usePrefixClass("loading");
    var delayShowLoading = ref(false);
    var countDelay = function countDelay() {
      delayShowLoading.value = false;
      var timer = setTimeout(function () {
        delayShowLoading.value = true;
        clearTimeout(timer);
      }, props2.delay);
    };
    var realLoading = computed(function () {
      return (!props2.delay || delayShowLoading.value) && props2.loading;
    });
    watch(function () {
      return props2.loading;
    }, function (value) {
      if (value) {
        props2.delay && countDelay();
      }
    }, {
      immediate: true
    });
    var rootClass = computed(function () {
      return [loadingClass.value, _defineProperty({}, "".concat(loadingClass.value, "--vertical"), props2.layout === "vertical")];
    });
    var textClass = computed(function () {
      return ["".concat(loadingClass.value, "__text"), _defineProperty({}, "".concat(loadingClass.value, "__text--only"), !props2.indicator)];
    });
    var rootStyle = computed(function () {
      var style = [];
      if (props2.inheritColor) {
        style.push("color: inherit");
      }
      if (props2.size) {
        style.push("font-size: ".concat(props2.size, ";"));
      }
      return style.join(";");
    });
    var defaultIndicator = {
      circular: TGradientIcon,
      spinner: SpinnerIcon
    };
    var dotsLoading = computed(function () {
      setBlockTracking(-1);
      var node = createVNode("div", {
        "class": "".concat(loadingClass.value, "__dots"),
        "style": {
          animationPlayState: props2.pause ? "paused" : "",
          animationDirection: props2.reverse ? "reverse" : "",
          animationDuration: "".concat(props2.duration, "ms"),
          width: props2.size,
          height: props2.size
        }
      }, [Array.from({
        length: 3
      }).map(function (val, i) {
        return createVNode("div", {
          "class": "".concat(loadingClass.value, "__dot"),
          "style": props2.duration ? "animation-duration: ".concat(props2.duration / 1e3, "s; animation-delay: ").concat(props2.duration * i / 3e3, "s") : ""
        }, null);
      })]);
      setBlockTracking(1);
      return node;
    });
    var defaultLoading = computed(function () {
      setBlockTracking(-1);
      var TIndicator = defaultIndicator[props2.theme || "circular"];
      var node = createVNode(TIndicator, {
        "style": {
          animationPlayState: props2.pause ? "paused" : "",
          animationDirection: props2.reverse ? "reverse" : "",
          animationDuration: "".concat(props2.duration, "ms"),
          width: props2.size,
          height: props2.size
        }
      }, null);
      setBlockTracking(1);
      return node;
    });
    return function () {
      var indicator = renderTNodeJSX("indicator", {
        defaultNode: props2.theme === "dots" ? dotsLoading.value : defaultLoading.value
      });
      var text = renderTNodeJSX("text");
      var TNodeContent = renderTNodeContent("default", "content");
      return createVNode("div", {
        "class": rootClass.value,
        "style": rootStyle.value
      }, [realLoading.value && indicator, text && realLoading.value && createVNode("span", {
        "class": textClass.value
      }, [text]), TNodeContent]);
    };
  }
});

var _Loading = withInstall(Loading);

export { _Loading as default };
//# sourceMappingURL=index.js.map
