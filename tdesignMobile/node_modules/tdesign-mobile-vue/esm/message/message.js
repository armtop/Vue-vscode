/**
 * tdesign v1.2.3
 * (c) 2024 TDesign Group
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import _slicedToArray from '@babel/runtime/helpers/slicedToArray';
import { h, defineComponent, getCurrentInstance, reactive, toRefs, computed, ref, onMounted, nextTick, watch, resolveComponent, openBlock, createBlock, Transition, withCtx, createElementBlock, normalizeClass, normalizeStyle, createVNode, createCommentVNode, createElementVNode } from 'vue';
import { InfoCircleFilledIcon, CheckCircleFilledIcon, CloseIcon } from 'tdesign-icons-vue-next';
import isObject from 'lodash/isObject';
import isString from 'lodash/isString';
import _Link from '../link/index.js';
import messageProps from './props.js';
import config from '../config.js';
import '../shared/index.js';
import TNodeComponent from '../shared/render-tnode.js';
import { useVModel } from '../shared/useVModel/index.js';
import { renderTNode, renderContent } from '../shared/render.js';
import '../link/props.js';
import '../hooks/tnode.js';
import 'lodash/isFunction';
import 'lodash/camelCase';
import 'lodash/kebabCase';
import '../hooks/render-tnode.js';
import 'lodash/isEmpty';
import '../hooks/useClass.js';
import '../config-provider/useConfig.js';
import 'lodash/cloneDeep';
import '../config-provider/context.js';
import 'lodash/mergeWith';
import 'lodash/merge';
import 'lodash/isArray';
import '../_common/js/global-config/mobile/default-config.js';
import '../_common/js/global-config/mobile/locale/zh_CN.js';
import '../_chunks/dep-4c6045f6.js';
import '@babel/runtime/helpers/typeof';
import '../_chunks/dep-1d280204.js';
import 'dayjs';
import '../_chunks/dep-5101c61a.js';
import '../config-provider/type.js';
import '../link/style';
import '../link/type.js';
import '../shared/component.js';
import '../shared/functions.js';
import '../shared/util.js';
import 'lodash/isNumber';
import '../shared/constants.js';
import '../shared/useToggle/index.js';
import '../shared/useCountDown/index.js';
import '@babel/runtime/helpers/asyncToGenerator';
import '@babel/runtime/regenerator';
import '@vueuse/core';
import '../shared/useCountDown/utils.js';
import '../shared/useDefault/index.js';
import '../shared/useChildSlots/index.js';
import '@babel/runtime/helpers/toConsumableArray';
import '../shared/useTouch/index.js';
import '../shared/useScrollParent/index.js';
import '../shared/useExpose/index.js';
import '../shared/useTest/index.js';
import '../shared/useClickAway/index.js';
import '../shared/useGesture/index.js';
import '@use-gesture/vanilla';
import '../shared/hover.js';

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var prefix = config.prefix;
var name = "".concat(prefix, "-message");
var iconDefault = {
  info: h(InfoCircleFilledIcon),
  success: h(CheckCircleFilledIcon),
  warning: h(InfoCircleFilledIcon),
  error: h(InfoCircleFilledIcon)
};
var closeBtnDefault = h(CloseIcon);
var script = defineComponent({
  name: name,
  components: {
    TNode: TNodeComponent
  },
  props: messageProps,
  emits: ["durationEnd", "closeBtnClick", "update:value"],
  setup: function setup(props, context) {
    var internalInstance = getCurrentInstance();
    var state = reactive({
      duration: 0,
      offset: 0,
      listWidth: 0,
      itemWidth: 0,
      scroll: {
        marquee: false,
        speed: 50,
        loop: -1,
        delay: 300
      }
    });
    var _toRefs = toRefs(props),
      visible = _toRefs.visible,
      modelValue = _toRefs.modelValue;
    var _useVModel = useVModel(visible, modelValue, props.defaultVisible),
      _useVModel2 = _slicedToArray(_useVModel, 2),
      currentVisible = _useVModel2[0],
      setVisible = _useVModel2[1];
    var rootClasses = computed(function () {
      return _defineProperty(_defineProperty(_defineProperty({}, name, true), "".concat(name, "--").concat(props.theme), true), "".concat(name, "-align--").concat(props.align), !!props.align);
    });
    var textWrapClasses = computed(function () {
      return _defineProperty(_defineProperty({}, "".concat(name, "__text-wrap"), true), "".concat(name, "__text-nowrap"), props.marquee);
    });
    var changeNumToStr = function changeNumToStr() {
      var arr = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      return arr.map(function (item) {
        return typeof item === "number" ? "".concat(item, "px") : item;
      });
    };
    var getMessageStylesOffset = function getMessageStylesOffset(offset) {
      var arr = changeNumToStr(offset);
      return {
        top: arr[0],
        right: arr[1],
        left: arr[1]
      };
    };
    var rootStyles = computed(function () {
      var offset = props.offset;
      var offsetStyle = offset ? getMessageStylesOffset(offset) : [];
      return _objectSpread({
        zIndex: props.zIndex
      }, offsetStyle);
    });
    var prefixIconContent = computed(function () {
      return renderTNode(internalInstance, "icon", {
        defaultNode: iconDefault === null || iconDefault === void 0 ? void 0 : iconDefault[props.theme || "info"]
      });
    });
    var computedContent = computed(function () {
      return renderContent(internalInstance, "default", "content");
    });
    var closeBtnContent = computed(function () {
      return renderTNode(internalInstance, "closeBtn", {
        defaultNode: closeBtnDefault
      });
    });
    var linkContent = computed(function () {
      var _context$slots;
      if (typeof props.link === "function" || (_context$slots = context.slots) !== null && _context$slots !== void 0 && _context$slots.link) {
        return renderTNode(internalInstance, "link");
      }
      if (isObject(props.link) || isString(props.link)) {
        var _link = isObject(props.link) ? _objectSpread({}, props.link) : {
          content: props.link
        };
        return h(_Link, _objectSpread({
          theme: "primary"
        }, _link));
      }
      return null;
    });
    var animateStyle = computed(function () {
      return {
        transform: state.offset ? "translateX(".concat(state.offset, "px)") : "",
        transitionDuration: "".concat(state.duration, "s"),
        transitionTimingFunction: "linear"
      };
    });
    var textWrapDOM = ref();
    var textDOM = ref();
    var handleScrolling = function handleScrolling() {
      var _ref3, _props$marquee, _props$marquee2, _props$marquee3, _props$marquee4, _props$marquee5, _props$marquee6;
      if (!(props !== null && props !== void 0 && props.marquee) || ((_ref3 = isObject(props === null || props === void 0 ? void 0 : props.marquee) && (props === null || props === void 0 ? void 0 : props.marquee)) === null || _ref3 === void 0 ? void 0 : _ref3.loop) === 0) {
        return;
      }
      var _state$scroll = state.scroll,
        loop = _state$scroll.loop,
        speed = _state$scroll.speed,
        delay = _state$scroll.delay;
      state.scroll = {
        marquee: true,
        loop: Math.max(props.marquee === true || ((_props$marquee = props.marquee) === null || _props$marquee === void 0 ? void 0 : _props$marquee.loop) == null ? loop : (_props$marquee2 = props.marquee) === null || _props$marquee2 === void 0 ? void 0 : _props$marquee2.loop, -1),
        speed: Math.max(props.marquee === true || ((_props$marquee3 = props.marquee) === null || _props$marquee3 === void 0 ? void 0 : _props$marquee3.speed) == null ? speed : (_props$marquee4 = props.marquee) === null || _props$marquee4 === void 0 ? void 0 : _props$marquee4.speed, 1),
        delay: Math.max(props.marquee === true || ((_props$marquee5 = props.marquee) === null || _props$marquee5 === void 0 ? void 0 : _props$marquee5.delay) == null ? delay : (_props$marquee6 = props.marquee) === null || _props$marquee6 === void 0 ? void 0 : _props$marquee6.delay, 0)
      };
      state.offset = 0;
      setTimeout(function () {
        var _textWrapDOM$value, _textDOM$value;
        var textWrapDOMWidth = (_textWrapDOM$value = textWrapDOM.value) === null || _textWrapDOM$value === void 0 ? void 0 : _textWrapDOM$value.getBoundingClientRect().width;
        var textDOMWidth = (_textDOM$value = textDOM.value) === null || _textDOM$value === void 0 ? void 0 : _textDOM$value.getBoundingClientRect().width;
        state.offset = -textDOMWidth;
        state.duration = textDOMWidth / state.scroll.speed;
        state.listWidth = textWrapDOMWidth;
        state.itemWidth = textDOMWidth;
      }, state.scroll.delay);
    };
    var handleTransitionend = function handleTransitionend() {
      resetTransition();
      if (state.scroll.loop === -1) {
        return;
      }
      state.scroll.loop = --state.scroll.loop;
      if (state.scroll.loop === 0) {
        state.scroll.marquee = false;
      }
    };
    var resetTransition = function resetTransition() {
      state.duration = 0;
      state.offset = state.listWidth;
      setTimeout(function () {
        state.offset = -state.itemWidth;
        state.duration = (state.itemWidth + state.listWidth) / state.scroll.speed;
      }, 0);
    };
    var onLinkClick = function onLinkClick(e) {
      var _props$onLinkClick;
      (_props$onLinkClick = props.onLinkClick) === null || _props$onLinkClick === void 0 || _props$onLinkClick.call(props, {
        e: e
      });
    };
    var onCloseBtnClick = function onCloseBtnClick() {
      var _props$onCloseBtnClic;
      (_props$onCloseBtnClic = props.onCloseBtnClick) === null || _props$onCloseBtnClic === void 0 || _props$onCloseBtnClic.call(props);
      setVisible(false);
    };
    var handleDuration = function handleDuration() {
      if (props.duration > 0) {
        setTimeout(function () {
          var _props$onDurationEnd;
          (_props$onDurationEnd = props.onDurationEnd) === null || _props$onDurationEnd === void 0 || _props$onDurationEnd.call(props);
          setVisible(false);
        }, props.duration);
      }
    };
    onMounted(function () {
      nextTick(function () {
        if (currentVisible.value) {
          handleScrolling();
        }
      });
    });
    watch(function () {
      return currentVisible.value;
    }, function (val) {
      if (val === false) return;
      setVisible(true);
      handleDuration();
      nextTick(handleScrolling);
    });
    return _objectSpread(_objectSpread({
      name: ref(name)
    }, toRefs(state)), {}, {
      currentVisible: currentVisible,
      rootClasses: rootClasses,
      textWrapClasses: textWrapClasses,
      rootStyles: rootStyles,
      prefixIconContent: prefixIconContent,
      computedContent: computedContent,
      closeBtnContent: closeBtnContent,
      linkContent: linkContent,
      textWrapDOM: textWrapDOM,
      textDOM: textDOM,
      animateStyle: animateStyle,
      onCloseBtnClick: onCloseBtnClick,
      onLinkClick: onLinkClick,
      handleTransitionend: handleTransitionend
    });
  }
});

function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_t_node = resolveComponent("t-node");
  return openBlock(), createBlock(Transition, {
    name: "message"
  }, {
    default: withCtx(function () {
      return [_ctx.currentVisible ? (openBlock(), createElementBlock("div", {
        key: 0,
        ref: "root",
        class: normalizeClass(_ctx.rootClasses),
        style: normalizeStyle(_ctx.rootStyles)
      }, [_ctx.prefixIconContent ? (openBlock(), createElementBlock("div", {
        key: 0,
        class: normalizeClass("".concat(_ctx.name, "__icon--left"))
      }, [createVNode(_component_t_node, {
        content: _ctx.prefixIconContent
      }, null, 8, ["content"])], 2)) : createCommentVNode("", true), createElementVNode("div", {
        ref: "textWrapDOM",
        class: normalizeClass(_ctx.textWrapClasses)
      }, [createElementVNode("div", {
        ref: "textDOM",
        class: normalizeClass("".concat(_ctx.name, "__text")),
        style: normalizeStyle(_ctx.scroll.marquee ? _ctx.animateStyle : ""),
        onTransitionend: _cache[0] || (_cache[0] = function () {
          return _ctx.handleTransitionend && _ctx.handleTransitionend.apply(_ctx, arguments);
        })
      }, [_ctx.computedContent ? (openBlock(), createBlock(_component_t_node, {
        key: 0,
        content: _ctx.computedContent
      }, null, 8, ["content"])) : createCommentVNode("", true)], 38)], 2), _ctx.linkContent ? (openBlock(), createElementBlock("div", {
        key: 1,
        class: normalizeClass("".concat(_ctx.name, "__link")),
        onClick: _cache[1] || (_cache[1] = function () {
          return _ctx.onLinkClick && _ctx.onLinkClick.apply(_ctx, arguments);
        })
      }, [createVNode(_component_t_node, {
        content: _ctx.linkContent
      }, null, 8, ["content"])], 2)) : createCommentVNode("", true), _ctx.closeBtnContent ? (openBlock(), createElementBlock("div", {
        key: 2,
        class: normalizeClass(["".concat(_ctx.name, "__close-wrap"), "".concat(_ctx.name, "__icon--right")]),
        onClick: _cache[2] || (_cache[2] = function () {
          return _ctx.onCloseBtnClick && _ctx.onCloseBtnClick.apply(_ctx, arguments);
        })
      }, [createVNode(_component_t_node, {
        content: _ctx.closeBtnContent
      }, null, 8, ["content"])], 2)) : createCommentVNode("", true)], 6)) : createCommentVNode("", true)];
    }),
    _: 1
  });
}

script.render = render;

export { script as default };
//# sourceMappingURL=message.js.map
