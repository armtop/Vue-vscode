/**
 * tdesign v1.2.3
 * (c) 2024 TDesign Group
 * @license MIT
 */

import _slicedToArray from '@babel/runtime/helpers/slicedToArray';
import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { defineComponent, getCurrentInstance, h, computed, ref, watchEffect, resolveComponent, openBlock, createElementBlock, normalizeClass, createVNode, createCommentVNode, createElementVNode, Fragment, renderList, normalizeStyle } from 'vue';
import { useIntersectionObserver } from '@vueuse/core';
import { CloseIcon } from 'tdesign-icons-vue-next';
import _Loading from '../loading/index.js';
import '../shared/index.js';
import ImageProps from './props.js';
import config from '../config.js';
import TNodeComponent from '../shared/render-tnode.js';
import { renderTNode } from '../shared/render.js';
import '../_common/js/loading/circle-adapter.js';
import '../_common/js/utils/set-style.js';
import '../_common/js/utils/helper.js';
import '@babel/runtime/helpers/toConsumableArray';
import '@babel/runtime/helpers/objectWithoutProperties';
import 'lodash/isString';
import 'lodash/isNull';
import 'lodash/isUndefined';
import 'lodash/isNumber';
import 'lodash/isArray';
import '../hooks/useClass.js';
import '../config-provider/useConfig.js';
import 'lodash/isFunction';
import 'lodash/cloneDeep';
import '../config-provider/context.js';
import 'lodash/mergeWith';
import 'lodash/merge';
import '../_common/js/global-config/mobile/default-config.js';
import '../_common/js/global-config/mobile/locale/zh_CN.js';
import '../_chunks/dep-4c6045f6.js';
import '@babel/runtime/helpers/typeof';
import '../_chunks/dep-1d280204.js';
import 'dayjs';
import '../_chunks/dep-5101c61a.js';
import '../config-provider/type.js';
import '../loading/props.js';
import '../hooks/tnode.js';
import 'lodash/camelCase';
import 'lodash/kebabCase';
import '../hooks/render-tnode.js';
import 'lodash/isEmpty';
import 'lodash/isObject';
import '../loading/style';
import '../loading/type.js';
import '../shared/component.js';
import '../shared/functions.js';
import '../shared/util.js';
import '../shared/constants.js';
import '../shared/useToggle/index.js';
import '../shared/useCountDown/index.js';
import '@babel/runtime/helpers/asyncToGenerator';
import '@babel/runtime/regenerator';
import '../shared/useCountDown/utils.js';
import '../shared/useDefault/index.js';
import '../shared/useChildSlots/index.js';
import '../shared/useVModel/index.js';
import '../shared/useTouch/index.js';
import '../shared/useScrollParent/index.js';
import '../shared/useExpose/index.js';
import '../shared/useTest/index.js';
import '../shared/useClickAway/index.js';
import '../shared/useGesture/index.js';
import '@use-gesture/vanilla';
import '../shared/hover.js';

var prefix = config.prefix;
var name = "".concat(prefix, "-image");
var script = defineComponent({
  name: name,
  components: {
    TNode: TNodeComponent
  },
  props: ImageProps,
  setup: function setup(props, context) {
    var internalInstance = getCurrentInstance();
    var closeIcon = h(CloseIcon, {
      size: "22px"
    });
    var LoadingIcon = h(_Loading, {
      theme: "dots",
      inheritColor: true
    });
    var statusContent = computed(function () {
      var _context$slots, _context$slots2, _context$slots3, _context$slots4;
      if ((_context$slots = context.slots) !== null && _context$slots !== void 0 && _context$slots.loading && isLoading.value) {
        return renderTNode(internalInstance, "loading");
      }
      if (!((_context$slots2 = context.slots) !== null && _context$slots2 !== void 0 && _context$slots2.loading) && isLoading.value) {
        return LoadingIcon;
      }
      if ((_context$slots3 = context.slots) !== null && _context$slots3 !== void 0 && _context$slots3.error && isError.value) {
        return renderTNode(internalInstance, "error");
      }
      if (!((_context$slots4 = context.slots) !== null && _context$slots4 !== void 0 && _context$slots4.error) && isError.value) {
        return closeIcon;
      }
      return "";
    });
    var isLoading = ref(true);
    var isError = ref(false);
    var imageStyles = computed(function () {
      return {
        objectFit: props.fit,
        objectPosition: props.position
      };
    });
    var classes = computed(function () {
      return _defineProperty(_defineProperty({}, "".concat(name), true), "".concat(name, "--").concat(props.shape), true);
    });
    var imageDOM = ref();
    var realSrc = ref("");
    watchEffect(function () {
      realSrc.value = props.lazy ? "" : props.src;
    });
    var _useIntersectionObser = useIntersectionObserver(imageDOM, function (_ref2, observerElement) {
        var _ref3 = _slicedToArray(_ref2, 1),
          isIntersecting = _ref3[0].isIntersecting;
        if (isIntersecting && props.lazy) {
          stop();
          realSrc.value = props.src;
        }
      }),
      stop = _useIntersectionObser.stop;
    var handleImgLoadCompleted = function handleImgLoadCompleted(e) {
      var _props$onLoad;
      (_props$onLoad = props.onLoad) === null || _props$onLoad === void 0 || _props$onLoad.call(props, {
        e: e
      });
      isLoading.value = false;
    };
    var handleImgLoadError = function handleImgLoadError(e) {
      var _props$onError;
      if (realSrc.value === "") {
        return;
      }
      (_props$onError = props.onError) === null || _props$onError === void 0 || _props$onError.call(props, {
        e: e
      });
      isLoading.value = false;
      isError.value = true;
    };
    return {
      imageDOM: imageDOM,
      statusContent: statusContent,
      name: name,
      classes: classes,
      imageStyles: imageStyles,
      isLoading: isLoading,
      realSrc: realSrc,
      isError: isError,
      handleImgLoadCompleted: handleImgLoadCompleted,
      handleImgLoadError: handleImgLoadError
    };
  }
});

var _hoisted_1 = ["type", "srcset"];
var _hoisted_2 = ["src", "alt"];
function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_t_node = resolveComponent("t-node");
  return openBlock(), createElementBlock("div", {
    class: normalizeClass(_ctx.classes)
  }, [_ctx.isLoading || _ctx.isError ? (openBlock(), createElementBlock("div", {
    key: 0,
    class: normalizeClass("".concat(_ctx.name, "__mask"))
  }, [createVNode(_component_t_node, {
    content: _ctx.statusContent
  }, null, 8, ["content"])], 2)) : createCommentVNode("", true), createElementVNode("picture", null, [_ctx.srcset ? (openBlock(true), createElementBlock(Fragment, {
    key: 0
  }, renderList(Object.entries(_ctx.srcset), function (item, index) {
    return openBlock(), createElementBlock("source", {
      key: index,
      type: item[0],
      srcset: item[1]
    }, null, 8, _hoisted_1);
  }), 128)) : createCommentVNode("", true), createElementVNode("img", {
    ref: "imageDOM",
    class: normalizeClass("".concat(_ctx.name, "__img")),
    style: normalizeStyle(_ctx.imageStyles),
    src: _ctx.realSrc,
    alt: _ctx.alt,
    onLoad: _cache[0] || (_cache[0] = function () {
      return _ctx.handleImgLoadCompleted && _ctx.handleImgLoadCompleted.apply(_ctx, arguments);
    }),
    onError: _cache[1] || (_cache[1] = function () {
      return _ctx.handleImgLoadError && _ctx.handleImgLoadError.apply(_ctx, arguments);
    })
  }, null, 46, _hoisted_2)])], 2);
}

script.render = render;

export { script as default };
//# sourceMappingURL=image.js.map
