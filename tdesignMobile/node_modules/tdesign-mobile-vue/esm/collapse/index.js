/**
 * tdesign v1.2.3
 * (c) 2024 TDesign Group
 * @license MIT
 */

import _slicedToArray from '@babel/runtime/helpers/slicedToArray';
import { defineComponent, toRefs, computed, provide, createVNode, inject, ref, nextTick, watch, onMounted } from 'vue';
import props from './props.js';
import config from '../config.js';
import { useTNodeJSX, useContent } from '../hooks/tnode.js';
import { usePrefixClass } from '../hooks/useClass.js';
import '../shared/index.js';
import { useVModel } from '../shared/useVModel/index.js';
import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { ChevronUpIcon, ChevronDownIcon } from 'tdesign-icons-vue-next';
import _Cell from '../cell/index.js';
import props$1 from './collapse-panel-props.js';
import { findIndex } from './util.js';
import './style';
import { withInstall } from '../shared/component.js';
import 'lodash/isFunction';
import 'lodash/camelCase';
import 'lodash/kebabCase';
import '../hooks/render-tnode.js';
import 'lodash/isEmpty';
import 'lodash/isString';
import 'lodash/isObject';
import '../config-provider/useConfig.js';
import 'lodash/cloneDeep';
import '../config-provider/context.js';
import 'lodash/mergeWith';
import 'lodash/merge';
import 'lodash/isArray';
import '../_common/js/global-config/mobile/default-config.js';
import '../_common/js/global-config/mobile/locale/zh_CN.js';
import '../_chunks/dep-4c6045f6.js';
import '@babel/runtime/helpers/typeof';
import '../_chunks/dep-1d280204.js';
import 'dayjs';
import '../_chunks/dep-5101c61a.js';
import '../config-provider/type.js';
import '../shared/functions.js';
import '../shared/util.js';
import 'lodash/isNumber';
import '../shared/constants.js';
import '../shared/render.js';
import '../shared/render-tnode.js';
import '../shared/useToggle/index.js';
import '../shared/useCountDown/index.js';
import '@babel/runtime/helpers/asyncToGenerator';
import '@babel/runtime/regenerator';
import '@vueuse/core';
import '../shared/useCountDown/utils.js';
import '../shared/useDefault/index.js';
import '../shared/useChildSlots/index.js';
import '@babel/runtime/helpers/toConsumableArray';
import '../shared/useTouch/index.js';
import '../shared/useScrollParent/index.js';
import '../shared/useExpose/index.js';
import '../shared/useTest/index.js';
import '../shared/useClickAway/index.js';
import '../shared/useGesture/index.js';
import '@use-gesture/vanilla';
import '../shared/hover.js';
import '../cell/props.js';
import '../form/hooks.js';
import '../cell/cell-group-props.js';
import '../cell/style';
import '../cell/type.js';

var prefix$1 = config.prefix;
var name$1 = "".concat(prefix$1, "-collapse");
var LocalCollapse = defineComponent({
  name: name$1,
  props: props,
  setup: function setup(props2, _ref) {
    var slots = _ref.slots;
    var renderTNodeJSX = useTNodeJSX();
    var componentName = usePrefixClass("collapse");
    var _toRefs = toRefs(props2),
      value = _toRefs.value,
      modelValue = _toRefs.modelValue;
    var _useVModel = useVModel(value, modelValue, props2.defaultValue, props2.onChange),
      _useVModel2 = _slicedToArray(_useVModel, 2),
      activeValue = _useVModel2[0],
      setActiveValue = _useVModel2[1];
    var calcActiveValues = function calcActiveValues(activeValues, panelValue, expandMutex) {
      var hit = activeValues.indexOf(panelValue);
      if (hit > -1) {
        return activeValues.filter(function (item) {
          return item !== panelValue;
        });
      }
      return expandMutex ? [panelValue] : activeValues.concat(panelValue);
    };
    var onPanelChange = function onPanelChange(value2, args) {
      if (Array.isArray(activeValue.value)) {
        var val = calcActiveValues(activeValue.value, value2, props2.expandMutex);
        setActiveValue(val, args);
      }
    };
    var disabled = computed(function () {
      return props2.disabled;
    });
    var expandIcon = computed(function () {
      return props2.expandIcon;
    });
    var rootClass = computed(function () {
      return [componentName.value, "".concat(componentName.value, "--").concat(props2.theme)];
    });
    provide("collapse", {
      activeValue: activeValue,
      disabled: disabled,
      expandIcon: expandIcon,
      onPanelChange: onPanelChange,
      defaultExpandAll: props2.defaultExpandAll
    });
    provide("renderParentTNode", renderTNodeJSX);
    return function () {
      var _slots$default;
      return createVNode("div", {
        "class": rootClass.value
      }, [(_slots$default = slots.default) === null || _slots$default === void 0 ? void 0 : _slots$default.call(slots)]);
    };
  }
});

var prefix = config.prefix;
var name = "".concat(prefix, "-collapse-panel");
var LocalCollapsePanel = defineComponent({
  name: name,
  components: {
    TCell: _Cell
  },
  props: props$1,
  setup: function setup(props2, _ref) {
    var slots = _ref.slots;
    var renderTNodeJSX = useTNodeJSX();
    var renderContent = useContent();
    var componentName = usePrefixClass("collapse-panel");
    var parent = inject("collapse");
    var renderParentTNode = inject("renderParentTNode");
    var disabled = computed(function () {
      return (parent === null || parent === void 0 ? void 0 : parent.disabled.value) || props2.disabled;
    });
    var rootClass = computed(function () {
      return _defineProperty(_defineProperty(_defineProperty(_defineProperty({}, "".concat(componentName.value), true), "".concat(componentName.value, "--").concat(props2.placement), true), "".concat(componentName.value, "--active"), isActive.value), "".concat(componentName.value, "--disabled"), disabled.value);
    });
    var isActive = computed(function () {
      return findIndex(props2.value, parent === null || parent === void 0 ? void 0 : parent.activeValue.value) > -1;
    });
    var updatePanelValue = function updatePanelValue(args) {
      if (props2.value != null) {
        parent === null || parent === void 0 || parent.onPanelChange(props2.value, args);
      }
    };
    var handleClick = function handleClick(e) {
      e === null || e === void 0 || e.stopPropagation();
      if (disabled.value) {
        return;
      }
      updatePanelValue({
        e: e
      });
    };
    var bodyRef = ref();
    var wrapRef = ref();
    var headRef = ref();
    var wrapperHeight = ref("");
    var updatePanelState = function updatePanelState() {
      nextTick(function () {
        if (!wrapRef.value) {
          return;
        }
        var _headRef$value$getBou = headRef.value.getBoundingClientRect(),
          headHeight = _headRef$value$getBou.height;
        if (!isActive.value) {
          wrapperHeight.value = "".concat(headHeight, "px");
          return;
        }
        var _bodyRef$value$getBou = bodyRef.value.getBoundingClientRect(),
          bodyHeight = _bodyRef$value$getBou.height;
        var height = headHeight + bodyHeight;
        wrapperHeight.value = "".concat(height, "px");
      });
    };
    watch(isActive, function () {
      nextTick(function () {
        return updatePanelState();
      });
    }, {
      immediate: true
    });
    onMounted(function () {
      if (parent !== null && parent !== void 0 && parent.defaultExpandAll) {
        updatePanelValue();
      }
    });
    var renderDefaultIcon = function renderDefaultIcon() {
      if (props2.placement === "bottom") {
        return isActive.value ? createVNode(ChevronUpIcon, null, null) : createVNode(ChevronDownIcon, null, null);
      }
      return isActive.value ? createVNode(ChevronDownIcon, null, null) : createVNode(ChevronUpIcon, null, null);
    };
    var panelExpandIcon = computed(function () {
      return slots.expandIcon || props2.expandIcon;
    });
    var renderRightIcon = function renderRightIcon() {
      var tNodeRender = panelExpandIcon.value === void 0 ? renderParentTNode : renderTNodeJSX;
      return createVNode("div", {
        "class": "".concat(componentName.value, "__header-icon")
      }, [tNodeRender("expandIcon", renderDefaultIcon())]);
    };
    return function () {
      var panelContent = renderContent("default", "content");
      var headerContent = renderTNodeJSX("header");
      var noteContent = renderTNodeJSX("headerRightContent");
      var _leftIcon = renderTNodeJSX("headerLeftIcon");
      return createVNode("div", {
        "ref": wrapRef,
        "class": rootClass.value,
        "style": {
          height: wrapperHeight.value
        }
      }, [createVNode("div", {
        "ref": headRef,
        "class": "".concat(componentName.value, "__title"),
        "onClick": handleClick
      }, [createVNode(_Cell, {
        "class": ["".concat(componentName.value, "__header"), "".concat(componentName.value, "__header--").concat(props2.placement), _defineProperty({}, "".concat(componentName.value, "__header--expanded"), isActive.value)]
      }, {
        leftIcon: function leftIcon() {
          return _leftIcon;
        },
        title: function title() {
          return headerContent;
        },
        note: function note() {
          return noteContent;
        },
        rightIcon: function rightIcon() {
          return renderRightIcon();
        }
      })]), createVNode("div", {
        "ref": bodyRef,
        "class": "".concat(componentName.value, "__content")
      }, [panelContent])]);
    };
  }
});

var Collapse = withInstall(LocalCollapse);
var CollapsePanel = withInstall(LocalCollapsePanel);

export { Collapse, CollapsePanel };
//# sourceMappingURL=index.js.map
