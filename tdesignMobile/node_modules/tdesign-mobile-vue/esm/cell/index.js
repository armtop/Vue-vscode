/**
 * tdesign v1.2.3
 * (c) 2024 TDesign Group
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { defineComponent, computed, createVNode, withDirectives, resolveDirective } from 'vue';
import { ChevronRightIcon } from 'tdesign-icons-vue-next';
import '../shared/index.js';
import config from '../config.js';
import CellProps from './props.js';
import { useFormDisabled } from '../form/hooks.js';
import { usePrefixClass } from '../hooks/useClass.js';
import { useTNodeJSX, useContent } from '../hooks/tnode.js';
import Hover from '../shared/hover.js';
import CellGroupProps from './cell-group-props.js';
import './style';
import './type.js';
import { withInstall } from '../shared/component.js';
import '../shared/functions.js';
import '../shared/util.js';
import '@babel/runtime/helpers/slicedToArray';
import 'lodash/isNumber';
import '../shared/constants.js';
import '../shared/render.js';
import '@babel/runtime/helpers/typeof';
import 'lodash/camelCase';
import '../shared/render-tnode.js';
import '../shared/useToggle/index.js';
import '../shared/useCountDown/index.js';
import '@babel/runtime/helpers/asyncToGenerator';
import '@babel/runtime/regenerator';
import '@vueuse/core';
import '../shared/useCountDown/utils.js';
import '../shared/useDefault/index.js';
import '../shared/useChildSlots/index.js';
import '@babel/runtime/helpers/toConsumableArray';
import '../shared/useVModel/index.js';
import 'lodash/kebabCase';
import '../shared/useTouch/index.js';
import '../shared/useScrollParent/index.js';
import '../shared/useExpose/index.js';
import '../shared/useTest/index.js';
import '../shared/useClickAway/index.js';
import 'lodash/isArray';
import '../shared/useGesture/index.js';
import '@use-gesture/vanilla';
import '../config-provider/useConfig.js';
import 'lodash/isFunction';
import 'lodash/cloneDeep';
import 'lodash/isString';
import '../config-provider/context.js';
import 'lodash/mergeWith';
import 'lodash/merge';
import '../_common/js/global-config/mobile/default-config.js';
import '../_common/js/global-config/mobile/locale/zh_CN.js';
import '../_chunks/dep-4c6045f6.js';
import '../_chunks/dep-1d280204.js';
import 'dayjs';
import '../_chunks/dep-5101c61a.js';
import '../config-provider/type.js';
import '../hooks/render-tnode.js';
import 'lodash/isEmpty';
import 'lodash/isObject';

var prefix$1 = config.prefix;
var name$1 = "".concat(prefix$1, "-cell");
var Cell = defineComponent({
  name: name$1,
  directives: {
    Hover: Hover
  },
  props: CellProps,
  emits: ["click"],
  setup: function setup(props) {
    var readerTNodeJSX = useTNodeJSX();
    var readerTNodeContent = useContent();
    var disabled = useFormDisabled();
    var cellClass = usePrefixClass("cell");
    var cellClasses = computed(function () {
      return ["".concat(cellClass.value), "".concat(cellClass.value, "--").concat(props.align), _defineProperty({}, "".concat(cellClass.value, "--borderless"), !props.bordered)];
    });
    var hoverDisabled = computed(function () {
      return !props.hover || disabled.value;
    });
    var handleClick = function handleClick(e) {
      if (!disabled.value) {
        var _props$onClick;
        (_props$onClick = props.onClick) === null || _props$onClick === void 0 || _props$onClick.call(props, e);
      }
    };
    var readerImage = function readerImage() {
      if (typeof props.image === "string") {
        return createVNode("img", {
          "src": props.image,
          "class": "".concat(cellClass.value, "__left-image")
        }, null);
      }
      var image = readerTNodeJSX("image");
      return image;
    };
    var readerLeft = function readerLeft() {
      var leftIcon = readerTNodeJSX("leftIcon");
      return createVNode("div", {
        "class": "".concat(cellClass.value, "__left")
      }, [leftIcon && createVNode("div", {
        "class": "".concat(cellClass.value, "__left-icon")
      }, [leftIcon]), readerImage()]);
    };
    var readerTitle = function readerTitle() {
      var title = readerTNodeJSX("title");
      if (!title) {
        return null;
      }
      var description = readerTNodeJSX("description");
      return createVNode("div", {
        "class": "".concat(cellClass.value, "__title")
      }, [title, props.required && createVNode("span", {
        "class": "".concat(cellClass.value, "--required")
      }, ["\xA0*"]), description && createVNode("div", {
        "class": "".concat(cellClass.value, "__description")
      }, [description])]);
    };
    var readerRight = function readerRight() {
      var rightIcon = props.arrow ? createVNode(ChevronRightIcon, null, null) : readerTNodeJSX("rightIcon");
      if (!rightIcon) {
        return null;
      }
      return createVNode("div", {
        "class": "".concat(cellClass.value, "__right")
      }, [createVNode("div", {
        "class": "".concat(cellClass.value, "__right-icon")
      }, [rightIcon])]);
    };
    return function () {
      var note = readerTNodeContent("default", "note");
      return withDirectives(createVNode("div", {
        "class": cellClasses.value,
        "onClick": handleClick
      }, [readerLeft(), readerTitle(), note && createVNode("div", {
        "class": "".concat(cellClass.value, "__note")
      }, [note]), readerRight()]), [[resolveDirective("hover"), {
        className: "".concat(cellClass.value, "--hover"),
        disabledName: hoverDisabled.value
      }]]);
    };
  }
});

var prefix = config.prefix;
var name = "".concat(prefix, "-cell-group");
var _CellGroup = defineComponent({
  name: name,
  props: CellGroupProps,
  emits: ["click"],
  setup: function setup(props) {
    var renderTNodeJSX = useTNodeJSX();
    var cellGroupClass = usePrefixClass("cell-group");
    var contentClasses = computed(function () {
      return [cellGroupClass.value, "".concat(cellGroupClass.value, "--").concat(props.theme), _defineProperty({}, "".concat(cellGroupClass.value, "--bordered"), props.bordered)];
    });
    return function () {
      var title = renderTNodeJSX("title");
      return createVNode("div", null, [title ? createVNode("div", {
        "class": "".concat(cellGroupClass.value, "__title")
      }, [title]) : null, createVNode("div", {
        "class": contentClasses.value
      }, [renderTNodeJSX("default")])]);
    };
  }
});

var _Cell = withInstall(Cell);
var CellGroup = withInstall(_CellGroup);

export { CellGroup, _Cell as default };
//# sourceMappingURL=index.js.map
