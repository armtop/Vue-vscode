declare const _default: import("vue").DefineComponent<{
    disableInput: BooleanConstructor;
    disabled: BooleanConstructor;
    inputWidth: {
        type: NumberConstructor;
    };
    integer: {
        type: BooleanConstructor;
        default: boolean;
    };
    max: {
        type: NumberConstructor;
        default: number;
    };
    min: {
        type: NumberConstructor;
        default: number;
    };
    size: {
        type: import("vue").PropType<import("../common").SizeEnum>;
        default: import("../common").SizeEnum;
        validator(val: import("../common").SizeEnum): boolean;
    };
    step: {
        type: NumberConstructor;
        default: number;
    };
    theme: {
        type: import("vue").PropType<"normal" | "filled" | "outline">;
        default: "normal" | "filled" | "outline";
        validator(val: "normal" | "filled" | "outline"): boolean;
    };
    value: {
        type: import("vue").PropType<string | number>;
        default: any;
    };
    modelValue: {
        type: import("vue").PropType<string | number>;
        default: any;
    };
    defaultValue: {
        type: import("vue").PropType<string | number>;
        default: number;
    };
    onBlur: import("vue").PropType<(value: string | number) => void>;
    onChange: import("vue").PropType<(value: string | number) => void>;
    onFocus: import("vue").PropType<(value: string | number) => void>;
    onOverlimit: import("vue").PropType<(type: "minus" | "plus") => void>;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    disableInput: BooleanConstructor;
    disabled: BooleanConstructor;
    inputWidth: {
        type: NumberConstructor;
    };
    integer: {
        type: BooleanConstructor;
        default: boolean;
    };
    max: {
        type: NumberConstructor;
        default: number;
    };
    min: {
        type: NumberConstructor;
        default: number;
    };
    size: {
        type: import("vue").PropType<import("../common").SizeEnum>;
        default: import("../common").SizeEnum;
        validator(val: import("../common").SizeEnum): boolean;
    };
    step: {
        type: NumberConstructor;
        default: number;
    };
    theme: {
        type: import("vue").PropType<"normal" | "filled" | "outline">;
        default: "normal" | "filled" | "outline";
        validator(val: "normal" | "filled" | "outline"): boolean;
    };
    value: {
        type: import("vue").PropType<string | number>;
        default: any;
    };
    modelValue: {
        type: import("vue").PropType<string | number>;
        default: any;
    };
    defaultValue: {
        type: import("vue").PropType<string | number>;
        default: number;
    };
    onBlur: import("vue").PropType<(value: string | number) => void>;
    onChange: import("vue").PropType<(value: string | number) => void>;
    onFocus: import("vue").PropType<(value: string | number) => void>;
    onOverlimit: import("vue").PropType<(type: "minus" | "plus") => void>;
}>>, {
    size: import("../common").SizeEnum;
    theme: "normal" | "filled" | "outline";
    disabled: boolean;
    value: string | number;
    modelValue: string | number;
    max: number;
    defaultValue: string | number;
    step: number;
    disableInput: boolean;
    integer: boolean;
    min: number;
}, {}>;
export default _default;
