/**
 * tdesign v1.2.3
 * (c) 2024 TDesign Group
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { LoadingIcon, CheckCircleIcon, CloseCircleIcon } from 'tdesign-icons-vue-next';
import { defineComponent, getCurrentInstance, computed, h, onUnmounted, ref, toRefs, resolveComponent, openBlock, createElementBlock, createVNode, normalizeProps, guardReactiveProps, createElementVNode, normalizeClass, normalizeStyle, createCommentVNode } from 'vue';
import '../shared/index.js';
import Overlay from '../overlay/index.js';
import ToastProps from './props.js';
import config from '../config.js';
import TNodeComponent from '../shared/render-tnode.js';
import { renderTNode } from '../shared/render.js';
import '../shared/functions.js';
import '../shared/util.js';
import '@babel/runtime/helpers/slicedToArray';
import 'lodash/isNumber';
import '../shared/component.js';
import '../shared/constants.js';
import '../shared/useToggle/index.js';
import '../shared/useCountDown/index.js';
import '@babel/runtime/helpers/asyncToGenerator';
import '@babel/runtime/regenerator';
import '@vueuse/core';
import '../shared/useCountDown/utils.js';
import '../shared/useDefault/index.js';
import 'lodash/camelCase';
import '../shared/useChildSlots/index.js';
import '@babel/runtime/helpers/toConsumableArray';
import '../shared/useVModel/index.js';
import 'lodash/kebabCase';
import '../shared/useTouch/index.js';
import '../shared/useScrollParent/index.js';
import '../shared/useExpose/index.js';
import '../shared/useTest/index.js';
import '../shared/useClickAway/index.js';
import 'lodash/isArray';
import '../shared/useGesture/index.js';
import '@use-gesture/vanilla';
import '../shared/hover.js';
import '@babel/runtime/helpers/typeof';
import '../shared/dom.js';
import 'lodash/isFunction';
import 'lodash/isString';
import '../overlay/props.js';
import '../hooks/useClass.js';
import '../config-provider/useConfig.js';
import 'lodash/cloneDeep';
import '../config-provider/context.js';
import 'lodash/mergeWith';
import 'lodash/merge';
import '../_common/js/global-config/mobile/default-config.js';
import '../_common/js/global-config/mobile/locale/zh_CN.js';
import '../_chunks/dep-4c6045f6.js';
import '../_chunks/dep-1d280204.js';
import 'dayjs';
import '../_chunks/dep-5101c61a.js';
import '../config-provider/type.js';
import '../hooks/tnode.js';
import '../hooks/render-tnode.js';
import 'lodash/isEmpty';
import 'lodash/isObject';
import '../overlay/style';

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var prefix = config.prefix;
var name = "".concat(prefix, "-toast");
var bodyLockClass = "".concat(name, "-overflow-hidden");
var script = defineComponent({
  name: name,
  components: {
    TOverlay: Overlay,
    TNode: TNodeComponent
  },
  props: ToastProps,
  setup: function setup(props) {
    var toastTypeIcon = {
      loading: LoadingIcon,
      success: CheckCircleIcon,
      error: CloseCircleIcon
    };
    var internalInstance = getCurrentInstance();
    var messageContent = computed(function () {
      return renderTNode(internalInstance, "message");
    });
    var iconContent = computed(function () {
      var iconNode = renderTNode(internalInstance, "icon");
      if (iconNode === void 0 && props.theme) {
        iconNode = h(toastTypeIcon[props.theme]);
      }
      return iconNode;
    });
    var classes = computed(function () {
      return ["".concat(name), "".concat(name, "__content"), "".concat(name, "__icon"), _defineProperty(_defineProperty(_defineProperty({}, "".concat(name, "--").concat(props.direction), props.direction), "".concat(name, "__content--").concat(props.direction), props.direction), "".concat(name, "--loading"), props.theme === "loading")];
    });
    var textClasses = computed(function () {
      return [_defineProperty(_defineProperty({}, "".concat(name, "__text"), !iconContent.value), "".concat(name, "__text--").concat(props.direction), props.direction)];
    });
    var iconClasses = computed(function () {
      return [_defineProperty({}, "".concat(name, "__icon--").concat(props.direction), props.direction)];
    });
    var lock = function lock() {
      document.body.classList.add(bodyLockClass);
    };
    var unlock = function unlock() {
      document.body.classList.remove(bodyLockClass);
    };
    var customOverlayProps = computed(function () {
      var toastOverlayProps = {
        preventScrollThrough: props.preventScrollThrough,
        visible: props.showOverlay
      };
      props.preventScrollThrough ? lock() : unlock();
      return _objectSpread(_objectSpread({}, props.overlayProps), toastOverlayProps);
    });
    onUnmounted(function () {
      unlock();
    });
    return _objectSpread({
      name: ref(name),
      classes: classes,
      textClasses: textClasses,
      iconClasses: iconClasses,
      iconContent: iconContent,
      messageContent: messageContent,
      customOverlayProps: customOverlayProps
    }, toRefs(props));
  }
});

function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_t_overlay = resolveComponent("t-overlay");
  var _component_t_node = resolveComponent("t-node");
  return openBlock(), createElementBlock("div", null, [createVNode(_component_t_overlay, normalizeProps(guardReactiveProps(_ctx.customOverlayProps)), null, 16), createElementVNode("div", {
    class: normalizeClass(_ctx.classes),
    style: normalizeStyle({
      top: _ctx.placement === "top" ? "25%" : _ctx.placement === "bottom" ? "75%" : "45%"
    })
  }, [_ctx.iconContent ? (openBlock(), createElementBlock("div", {
    key: 0,
    class: normalizeClass(_ctx.iconClasses)
  }, [createVNode(_component_t_node, {
    content: _ctx.iconContent
  }, null, 8, ["content"])], 2)) : createCommentVNode("", true), _ctx.messageContent ? (openBlock(), createElementBlock("div", {
    key: 1,
    class: normalizeClass(_ctx.textClasses)
  }, [createVNode(_component_t_node, {
    content: _ctx.messageContent
  }, null, 8, ["content"])], 2)) : createCommentVNode("", true)], 6)]);
}

script.render = render;

export { script as default };
//# sourceMappingURL=toast.js.map
