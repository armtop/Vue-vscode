{"version":3,"file":"index.js","sources":["../../src/checkbox/assets/minus-line-filled-icon.svg","../../src/checkbox/assets/check-line-filled-icon.svg","../../src/checkbox/checkbox.tsx","../../src/checkbox/checkbox-group.tsx","../../src/checkbox/index.ts"],"sourcesContent":["export default \"data:image/svg+xml,%3Csvg%20width%3D%2224%22%20height%3D%2225%22%20viewBox%3D%220%200%2024%2025%22%20fill%3D%22none%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%20%20%20%20%3Cpath%20d%3D%22M5%2012.5C5%2011.6716%205.69645%2011%206.55556%2011H17.4444C18.3036%2011%2019%2011.6716%2019%2012.5C19%2013.3284%2018.3036%2014%2017.4444%2014H6.55556C5.69645%2014%205%2013.3284%205%2012.5Z%22%20fill%3D%22%230052D9%22%2F%3E%3C%2Fsvg%3E\"","export default \"data:image/svg+xml,%3Csvg%20width%3D%2224%22%20height%3D%2224%22%20viewBox%3D%220%200%2024%2024%22%20fill%3D%22none%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%20%20%20%20%3Cpath%20fill-rule%3D%22evenodd%22%20clip-rule%3D%22evenodd%22%20d%3D%22M20.0606%206.93921C20.6463%207.525%2020.6464%208.47475%2020.0606%209.06053L11.7677%2017.3535C10.7914%2018.3296%209.20843%2018.3297%208.23212%2017.3534L3.93923%2013.0606C3.35344%2012.4748%203.35343%2011.525%203.93921%2010.9392C4.52499%2010.3534%205.47474%2010.3534%206.06053%2010.9392L9.99995%2014.8786L17.9392%206.93922C18.525%206.35343%2019.4748%206.35343%2020.0606%206.93921Z%22%20fill%3D%22%230052D9%22%2F%3E%3C%2Fsvg%3E\"","import { defineComponent, h, toRefs, computed, inject, getCurrentInstance } from 'vue';\nimport {\n  CheckCircleFilledIcon,\n  CircleIcon,\n  MinusCircleFilledIcon,\n  MinusRectangleFilledIcon,\n  CheckRectangleFilledIcon,\n} from 'tdesign-icons-vue-next';\nimport config from '../config';\nimport CheckboxProps from './props';\nimport { TNode, useDefault } from '../shared';\nimport { TdCheckboxProps } from '../checkbox/type';\nimport MinusLineFilledIcon from './assets/minus-line-filled-icon.svg';\nimport CheckLineFilledIcon from './assets/check-line-filled-icon.svg';\nimport { useTNodeJSX, useContent } from '../hooks/tnode';\n\nconst { prefix } = config;\nconst name = `${prefix}-checkbox`;\n\nexport default defineComponent({\n  name,\n  components: { TNode },\n  props: {\n    ...CheckboxProps,\n    borderless: {\n      type: Boolean,\n      value: false,\n    },\n  },\n  emits: ['update:checked', 'update:modelValue', 'change'],\n  setup(props, context) {\n    const renderTNodeJSX = useTNodeJSX();\n    const renderContent = useContent();\n    const [innerChecked, setInnerChecked] = useDefault<boolean, TdCheckboxProps>(\n      props,\n      context.emit,\n      'checked',\n      'change',\n    );\n    const checkboxGroup: any = inject('checkboxGroup', undefined);\n    const indeterminate = computed<boolean>(() => {\n      if (props.checkAll && checkboxGroup != null) return checkboxGroup.checkAllStatus.value === 'indeterminate';\n      return props.indeterminate;\n    });\n\n    const isIconArray = Array.isArray(props.icon);\n    const defaultCheckIcons = [h(CheckCircleFilledIcon), h(CircleIcon)];\n    const checkIcons = computed(() => {\n      if (isIconArray && props.icon.length > 1) {\n        return props.icon.map((icon) =>\n          typeof icon === 'string' ? h('img', { class: `${name}__icon-image`, src: icon }) : icon,\n        );\n      }\n      return defaultCheckIcons;\n    });\n\n    const checkedIcon = computed(() => {\n      if (props.icon === 'circle' || props.icon === true)\n        return indeterminate.value ? h(MinusCircleFilledIcon) : h(CheckCircleFilledIcon);\n      if (props.icon === 'rectangle')\n        return indeterminate.value ? h(MinusRectangleFilledIcon) : h(CheckRectangleFilledIcon);\n      if (props.icon === 'line')\n        return indeterminate.value ? h('img', { src: MinusLineFilledIcon }) : h('img', { src: CheckLineFilledIcon });\n      return null;\n    });\n\n    const isChecked = computed(() => {\n      if (props.checkAll) {\n        const checkAllStatus = checkboxGroup?.checkAllStatus.value;\n        return checkAllStatus === 'checked' || checkAllStatus === 'indeterminate';\n      }\n      if (checkboxGroup != null && props.value != null) {\n        return !!checkboxGroup.checkedSet.value?.has(props.value);\n      }\n      return innerChecked.value;\n    });\n\n    const isDisabled = computed(() => {\n      if (checkboxGroup?.max.value)\n        return checkboxGroup.max.value <= checkboxGroup.innerValue.value.length && !isChecked.value;\n      if (props.disabled != null) return props.disabled;\n      return !!checkboxGroup?.disabled.value;\n    });\n\n    const handleChange = (e: Event, source?: string) => {\n      if (isDisabled.value) return;\n      if (source === 'text' && props.contentDisabled) return;\n\n      const value = !isChecked.value;\n      setInnerChecked(value, { e });\n      e.stopPropagation();\n      if (checkboxGroup && checkboxGroup?.onCheckedChange) {\n        checkboxGroup.onCheckedChange({ checked: value, checkAll: props.checkAll, e, option: props });\n      }\n    };\n    return () => {\n      const { placement, block, icon, maxLabelRow, maxContentRow, borderless } = props;\n      const renderIconArray = () => {\n        if (isIconArray) {\n          return <t-node content={checkIcons.value[isChecked.value ? 0 : 1]} class={`${name}__icon-wrapper`} />;\n        }\n        if (isChecked.value) {\n          return <t-node content={checkedIcon.value} class={`${name}__icon-wrapper`} />;\n        }\n        return (\n          <>\n            {(icon === 'circle' || icon === true || icon === 'rectangle') && (\n              <div\n                class={{\n                  [`${name}__icon-circle`]: icon === true,\n                  [`${name}__icon-${icon}`]: typeof icon === 'string',\n                  [`${name}__icon-${icon}--disabled`]: isDisabled.value,\n                }}\n              ></div>\n            )}\n            {icon === 'line' && <div class=\"placeholder\"></div>}\n          </>\n        );\n      };\n\n      const renderIconNode = () => {\n        if (!icon) {\n          return null;\n        }\n        return (\n          <div\n            class={{\n              [`${name}__icon`]: true,\n              [`${name}__icon--${placement}`]: true,\n              [`${name}__icon--checked`]: isChecked.value,\n              [`${name}__icon--disabled`]: isDisabled.value,\n            }}\n          >\n            {renderIconArray()}\n          </div>\n        );\n      };\n\n      const renderCheckBoxContent = () => {\n        const labelContent = renderContent('default', 'label');\n        const checkboxContent = renderTNodeJSX('content');\n        return (\n          <div\n            class={`${name}__content`}\n            onClick={(event) => {\n              event.stopPropagation();\n              handleChange(event, 'text');\n            }}\n          >\n            <div\n              class={{\n                [`${name}__title`]: true,\n                [`${name}__title--checked`]: isChecked.value,\n                [`${name}__title--disabled`]: isDisabled.value,\n              }}\n              style={{ '-webkit-line-clamp': maxLabelRow }}\n            >\n              {labelContent}\n            </div>\n            <div\n              class={{\n                [`${name}__description`]: true,\n                [`${name}__description--disabled`]: isDisabled.value,\n              }}\n              style={{ '-webkit-line-clamp': maxContentRow }}\n            >\n              {checkboxContent}\n            </div>\n          </div>\n        );\n      };\n      return (\n        <div\n          class={{\n            [`${name}`]: true,\n            [`${name}--${placement}`]: true,\n            [`${name}--checked`]: isChecked.value,\n            [`${name}--block`]: block,\n          }}\n          onClick={handleChange}\n        >\n          {renderIconNode()}\n          {renderCheckBoxContent()}\n          {!borderless && <div class={`${name}__border ${name}__border--${placement}`} />}\n        </div>\n      );\n    };\n  },\n});\n","import { provide, ref, computed, defineComponent, watch, toRefs, VNode, reactive, onMounted } from 'vue';\nimport config from '../config';\nimport props from './checkbox-group-props';\nimport Checkbox from './checkbox';\nimport { CheckboxGroupValue, TdCheckboxGroupProps, TdCheckboxProps } from './type';\nimport { useDefault } from '../shared';\nimport { getOptions, setCheckAllStatus } from './hooks';\nimport { useTNodeJSX } from '../hooks/tnode';\n\nconst { prefix } = config;\nconst name = `${prefix}-checkbox-group`;\n\nexport interface Child {\n  value: string | number;\n}\n\nexport default defineComponent({\n  name,\n  components: {\n    Checkbox,\n  },\n  props,\n  emits: ['update:value', 'update:modelValue', 'change'],\n  setup(props: any, context) {\n    const renderTNodeJSX = useTNodeJSX();\n    const { isArray } = Array;\n    const [innerValue, setInnerValue] = useDefault<CheckboxGroupValue, TdCheckboxGroupProps>(\n      props,\n      context.emit,\n      'value',\n      'change',\n    );\n    const optionList = getOptions(props, context.slots);\n    const checkedSet = computed(() => {\n      if (isArray(innerValue.value)) {\n        return new Set(innerValue.value);\n      }\n      return new Set();\n    });\n    const checkAllStatus = setCheckAllStatus(optionList, innerValue, checkedSet);\n    const maxExceeded = computed(() => {\n      return props.max !== undefined && innerValue.value.length === props.max;\n    });\n\n    const onCheckedChange = (p: { checked: boolean; checkAll: boolean; e: Event; option: TdCheckboxProps }) => {\n      const { checked, checkAll, e } = p;\n      if (checkAll) {\n        onCheckAllChange(checked, { e });\n      } else {\n        handleCheckboxChange(p);\n      }\n    };\n\n    const handleCheckboxChange = (data: { checked: boolean; e: Event; option: TdCheckboxProps }) => {\n      const currentValue = data.option.value;\n      if (isArray(innerValue.value)) {\n        if (currentValue === undefined) {\n          return;\n        }\n        const val = [...innerValue.value];\n        if (data.checked) {\n          val.push(currentValue);\n        } else {\n          const i = val.indexOf(currentValue);\n          val.splice(i, 1);\n        }\n        setInnerValue(val, {\n          e: data.e,\n          current: data.option.value,\n          type: data.checked ? 'check' : 'uncheck',\n        });\n      } else {\n        console.warn(`TDesign CheckboxGroup Warn: \\`value\\` must be an array, instead of ${typeof innerValue.value}`);\n      }\n    };\n    const getAllCheckboxValue = (): CheckboxGroupValue => {\n      const val = new Set<NonNullable<TdCheckboxProps['value']>>();\n      for (let i = 0, len = optionList.value.length; i < len; i++) {\n        const item = optionList.value[i];\n        if (item.checkAll) continue;\n        if (item.value === undefined) continue;\n        val.add(item.value);\n        if (maxExceeded.value) break;\n      }\n      return [...val];\n    };\n    const onCheckAllChange = (checked: boolean, context: { e: Event; source?: 't-checkbox' }) => {\n      const value = checked ? getAllCheckboxValue() : [];\n      setInnerValue(value, {\n        e: context.e,\n        type: checked ? 'check' : 'uncheck',\n        current: undefined,\n      });\n    };\n\n    provide('checkboxGroup', {\n      ...toRefs(props),\n      innerValue,\n      checkAllStatus,\n      checkedSet,\n      onCheckedChange,\n    });\n    return () => {\n      const checkboxNode = () => {\n        return (\n          <span>\n            {optionList.value.map((item, idx) => (\n              <checkbox\n                key={idx}\n                name={item.name || ''}\n                label={item.label || item.text || ''}\n                value={item.value}\n                check-all={item.checkAll}\n                block={item.block || true}\n                checked={item.checked || false}\n                content={item.content || ''}\n                content-disabled={item.contentDisabled || false}\n                icon={item.icon || 'circle'}\n                indeterminate={item.indeterminate || false}\n                disabled={item.disabled}\n                max-content-row={item.maxContentRow || 5}\n                max-label-row={item.maxLabelRow || 3}\n                readonly={item.readonly || false}\n                placement={item.placement || 'left'}\n              />\n            ))}\n          </span>\n        );\n      };\n      return (\n        <div class={`${prefix}-checkbox-group`}>\n          {!(props.options && props.options.length) ? renderTNodeJSX('default') : checkboxNode()}\n        </div>\n      );\n    };\n  },\n});\n","import _CheckBox from './checkbox';\nimport _CheckBoxGroup from './checkbox-group';\nimport { withInstall, WithInstallType } from '../shared';\n\nimport './style';\n\nimport { TdCheckboxProps, TdCheckboxGroupProps } from './type';\n\nexport * from './type';\nexport type CheckboxProps = TdCheckboxProps;\nexport type CheckboxGroupProps = TdCheckboxGroupProps;\n\nconst CheckBox: WithInstallType<typeof _CheckBox> = withInstall(_CheckBox);\nexport const CheckboxGroup: WithInstallType<typeof _CheckBoxGroup> = withInstall(_CheckBoxGroup);\nexport default CheckBox;\n"],"names":["prefix","config","name","defineComponent","components","TNode","props","_objectSpread","CheckboxProps","borderless","type","Boolean","value","emits","setup","context","renderTNodeJSX","useTNodeJSX","renderContent","useContent","_useDefault","useDefault","emit","_useDefault2","_slicedToArray","innerChecked","setInnerChecked","checkboxGroup","inject","indeterminate","computed","checkAll","checkAllStatus","isIconArray","Array","isArray","icon","defaultCheckIcons","h","CheckCircleFilledIcon","CircleIcon","checkIcons","length","map","class","concat","src","checkedIcon","MinusCircleFilledIcon","MinusRectangleFilledIcon","CheckRectangleFilledIcon","MinusLineFilledIcon","CheckLineFilledIcon","isChecked","_checkboxGroup$checke","checkedSet","has","isDisabled","max","innerValue","disabled","handleChange","e","source","contentDisabled","stopPropagation","onCheckedChange","checked","option","placement","block","maxLabelRow","maxContentRow","renderIconArray","_createVNode","_resolveComponent","_Fragment","_defineProperty","renderIconNode","renderCheckBoxContent","labelContent","checkboxContent","onClick","event","Checkbox","setInnerValue","optionList","getOptions","slots","Set","setCheckAllStatus","maxExceeded","p","onCheckAllChange","handleCheckboxChange","data","currentValue","val","_toConsumableArray","push","i","indexOf","splice","current","console","warn","_typeof","getAllCheckboxValue","len","item","add","provide","toRefs","checkboxNode","idx","label","text","content","readonly","options","CheckBox","withInstall","_CheckBox","CheckboxGroup","_CheckBoxGroup"],"mappings":"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"}