import { TextareaValue } from './type';
declare const _default: import("vue").DefineComponent<{
    allowInputOverMax: BooleanConstructor;
    autofocus: BooleanConstructor;
    autosize: BooleanConstructor;
    bordered: BooleanConstructor;
    disabled: BooleanConstructor;
    indicator: BooleanConstructor;
    label: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    layout: {
        type: import("vue").PropType<"vertical" | "horizontal">;
        default: "vertical" | "horizontal";
        validator(val: "vertical" | "horizontal"): boolean;
    };
    maxcharacter: {
        type: NumberConstructor;
    };
    maxlength: {
        type: NumberConstructor;
    };
    name: {
        type: StringConstructor;
        default: string;
    };
    placeholder: {
        type: StringConstructor;
        default: any;
    };
    readonly: BooleanConstructor;
    value: {
        type: import("vue").PropType<TextareaValue>;
        default: any;
    };
    modelValue: {
        type: import("vue").PropType<TextareaValue>;
        default: any;
    };
    defaultValue: {
        type: import("vue").PropType<TextareaValue>;
    };
    onBlur: import("vue").PropType<(value: TextareaValue, context: {
        e: FocusEvent;
    }) => void>;
    onChange: import("vue").PropType<(value: TextareaValue, context?: {
        e?: InputEvent;
    }) => void>;
    onFocus: import("vue").PropType<(value: TextareaValue, context: {
        e: FocusEvent;
    }) => void>;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    allowInputOverMax: BooleanConstructor;
    autofocus: BooleanConstructor;
    autosize: BooleanConstructor;
    bordered: BooleanConstructor;
    disabled: BooleanConstructor;
    indicator: BooleanConstructor;
    label: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    layout: {
        type: import("vue").PropType<"vertical" | "horizontal">;
        default: "vertical" | "horizontal";
        validator(val: "vertical" | "horizontal"): boolean;
    };
    maxcharacter: {
        type: NumberConstructor;
    };
    maxlength: {
        type: NumberConstructor;
    };
    name: {
        type: StringConstructor;
        default: string;
    };
    placeholder: {
        type: StringConstructor;
        default: any;
    };
    readonly: BooleanConstructor;
    value: {
        type: import("vue").PropType<TextareaValue>;
        default: any;
    };
    modelValue: {
        type: import("vue").PropType<TextareaValue>;
        default: any;
    };
    defaultValue: {
        type: import("vue").PropType<TextareaValue>;
    };
    onBlur: import("vue").PropType<(value: TextareaValue, context: {
        e: FocusEvent;
    }) => void>;
    onChange: import("vue").PropType<(value: TextareaValue, context?: {
        e?: InputEvent;
    }) => void>;
    onFocus: import("vue").PropType<(value: TextareaValue, context: {
        e: FocusEvent;
    }) => void>;
}>>, {
    readonly: boolean;
    name: string;
    indicator: boolean;
    layout: "vertical" | "horizontal";
    disabled: boolean;
    value: TextareaValue;
    modelValue: TextareaValue;
    placeholder: string;
    bordered: boolean;
    allowInputOverMax: boolean;
    autofocus: boolean;
    autosize: boolean;
}, {}>;
export default _default;
