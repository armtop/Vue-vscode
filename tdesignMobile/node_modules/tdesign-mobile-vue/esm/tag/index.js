/**
 * tdesign v1.2.3
 * (c) 2024 TDesign Group
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { defineComponent, computed, createVNode, resolveComponent, toRefs } from 'vue';
import { CloseIcon } from 'tdesign-icons-vue-next';
import { useTNodeJSX, useContent } from '../hooks/tnode.js';
import config from '../config.js';
import TagProps from './props.js';
import { usePrefixClass } from '../hooks/useClass.js';
import _slicedToArray from '@babel/runtime/helpers/slicedToArray';
import CheckTagProps from './check-tag-props.js';
import '../shared/index.js';
import { useVModel } from '../shared/useVModel/index.js';
import './style';
import './type.js';
import { withInstall } from '../shared/component.js';
import 'lodash/isFunction';
import 'lodash/camelCase';
import 'lodash/kebabCase';
import '../hooks/render-tnode.js';
import 'lodash/isEmpty';
import 'lodash/isString';
import 'lodash/isObject';
import '../config-provider/useConfig.js';
import 'lodash/cloneDeep';
import '../config-provider/context.js';
import 'lodash/mergeWith';
import 'lodash/merge';
import 'lodash/isArray';
import '../_common/js/global-config/mobile/default-config.js';
import '../_common/js/global-config/mobile/locale/zh_CN.js';
import '../_chunks/dep-4c6045f6.js';
import '@babel/runtime/helpers/typeof';
import '../_chunks/dep-1d280204.js';
import 'dayjs';
import '../_chunks/dep-5101c61a.js';
import '../config-provider/type.js';
import '../shared/functions.js';
import '../shared/util.js';
import 'lodash/isNumber';
import '../shared/constants.js';
import '../shared/render.js';
import '../shared/render-tnode.js';
import '../shared/useToggle/index.js';
import '../shared/useCountDown/index.js';
import '@babel/runtime/helpers/asyncToGenerator';
import '@babel/runtime/regenerator';
import '@vueuse/core';
import '../shared/useCountDown/utils.js';
import '../shared/useDefault/index.js';
import '../shared/useChildSlots/index.js';
import '@babel/runtime/helpers/toConsumableArray';
import '../shared/useTouch/index.js';
import '../shared/useScrollParent/index.js';
import '../shared/useExpose/index.js';
import '../shared/useTest/index.js';
import '../shared/useClickAway/index.js';
import '../shared/useGesture/index.js';
import '@use-gesture/vanilla';
import '../shared/hover.js';

var prefix$1 = config.prefix;
var name$1 = "".concat(prefix$1, "-tag");
var LocalTag = defineComponent({
  name: name$1,
  components: {
    CloseIcon: CloseIcon
  },
  props: TagProps,
  emits: ["close", "click"],
  setup: function setup(props) {
    var tagClass = usePrefixClass("tag");
    var renderTNodeJSX = useTNodeJSX();
    var renderContent = useContent();
    var tagStyle = computed(function () {
      return props.maxWidth ? {
        maxWidth: typeof props.maxWidth === "number" ? "".concat(props.maxWidth, "px") : props.maxWidth
      } : {};
    });
    var tagClasses = computed(function () {
      return ["".concat(tagClass.value), "".concat(tagClass.value, "--").concat(props.theme), "".concat(tagClass.value, "--").concat(props.shape), "".concat(tagClass.value, "--").concat(props.variant), "".concat(tagClass.value, "--").concat(props.size), _defineProperty(_defineProperty({}, "".concat(tagClass.value, "--closable"), props.closable), "".concat(tagClass.value, "--disabled"), props.disabled)];
    });
    var handleClose = function handleClose(e) {
      e.stopPropagation();
      if (!props.disabled) {
        var _props$onClose;
        (_props$onClose = props.onClose) === null || _props$onClose === void 0 || _props$onClose.call(props, {
          e: e
        });
      }
    };
    var handleClick = function handleClick(e) {
      if (!props.disabled) {
        var _props$onClick;
        (_props$onClick = props.onClick) === null || _props$onClick === void 0 || _props$onClick.call(props, {
          e: e
        });
      }
    };
    return function () {
      var tagContent = renderContent("default", "content");
      var icon = renderTNodeJSX("icon");
      return createVNode("span", {
        "class": tagClasses.value,
        "style": tagStyle.value,
        "aria-disabled": props.disabled,
        "role": "button",
        "onClick": handleClick
      }, [icon && createVNode("span", {
        "class": "".concat(tagClass.value, "__icon")
      }, [icon]), createVNode("span", {
        "class": "".concat(tagClass.value, "__text")
      }, [tagContent]), props.closable && createVNode("span", {
        "class": "".concat(tagClass.value, "__icon-close"),
        "onClick": handleClose
      }, [createVNode(resolveComponent("close-icon"), null, null)])]);
    };
  }
});

var prefix = config.prefix;
var name = "".concat(prefix, "-check-tag");
var LocalCheckTag = defineComponent({
  name: name,
  props: CheckTagProps,
  setup: function setup(props) {
    var tagClass = usePrefixClass("tag");
    var renderTNodeJSX = useTNodeJSX();
    var renderContent = useContent();
    var _toRefs = toRefs(props),
      checked = _toRefs.checked,
      modelValue = _toRefs.modelValue;
    var _useVModel = useVModel(checked, modelValue, props.defaultChecked, props.onChange, "checked"),
      _useVModel2 = _slicedToArray(_useVModel, 2),
      innerChecked = _useVModel2[0],
      setInnerChecked = _useVModel2[1];
    var contentIsArray = computed(function () {
      if (Array.isArray(props.content) && props.content.length === 2) {
        return true;
      }
      return false;
    });
    var tagClasses = computed(function () {
      return ["".concat(tagClass.value), "".concat(tagClass.value, "--checkable"), "".concat(tagClass.value, "--").concat(props.shape), "".concat(tagClass.value, "--").concat(innerChecked.value ? "primary" : "default"), "".concat(tagClass.value, "--").concat(props.size), "".concat(tagClass.value, "--").concat(props.variant), _defineProperty(_defineProperty(_defineProperty({}, "".concat(tagClass.value, "--closable"), props.closable), "".concat(tagClass.value, "--disabled"), props.disabled), "".concat(tagClass.value, "--checked"), !props.disabled && innerChecked.value)];
    });
    var handleClick = function handleClick(e) {
      if (!props.disabled) {
        var _props$onClick;
        (_props$onClick = props.onClick) === null || _props$onClick === void 0 || _props$onClick.call(props, {
          e: e
        });
        setInnerChecked(!innerChecked.value);
      }
    };
    var handleClose = function handleClose(e) {
      e.stopPropagation();
      if (!props.disabled) {
        var _props$onClose;
        (_props$onClose = props.onClose) === null || _props$onClose === void 0 || _props$onClose.call(props, {
          e: e
        });
      }
    };
    return function () {
      var icon = renderTNodeJSX("icon");
      var readerText = function readerText() {
        if (contentIsArray.value) {
          return innerChecked.value ? props.content[0] : props.content[1];
        }
        var content = renderContent("default", "content");
        return content;
      };
      return createVNode("span", {
        "class": tagClasses.value,
        "aria-disabled": props.disabled,
        "role": "button",
        "onClick": handleClick
      }, [icon && createVNode("span", {
        "class": "".concat(tagClass.value, "__icon")
      }, [icon]), createVNode("span", {
        "class": "".concat(tagClass.value, "__text")
      }, [readerText()]), props.closable && createVNode("span", {
        "class": "".concat(tagClass.value, "__icon-close"),
        "onClick": handleClose
      }, [createVNode(CloseIcon, null, null)])]);
    };
  }
});

var Tag = withInstall(LocalTag);
var CheckTag = withInstall(LocalCheckTag);

export { CheckTag, Tag };
//# sourceMappingURL=index.js.map
