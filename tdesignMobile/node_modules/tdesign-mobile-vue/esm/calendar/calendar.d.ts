declare const _default: import("vue").DefineComponent<{
    confirmBtn: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | import("../button").TdButtonProps>;
        default: string;
    };
    firstDayOfWeek: {
        type: NumberConstructor;
        default: number;
    };
    format: {
        type: import("vue").PropType<import("./type").CalendarFormatType>;
    };
    maxDate: {
        type: import("vue").PropType<number | Date>;
    };
    minDate: {
        type: import("vue").PropType<number | Date>;
    };
    title: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    type: {
        type: import("vue").PropType<"range" | "multiple" | "single">;
        default: "range" | "multiple" | "single";
        validator(val: "range" | "multiple" | "single"): boolean;
    };
    usePopup: {
        type: BooleanConstructor;
        default: boolean;
    };
    value: {
        type: import("vue").PropType<number | Date | import("./type").TCalendarValue[]>;
        default: any;
    };
    modelValue: {
        type: import("vue").PropType<number | Date | import("./type").TCalendarValue[]>;
        default: any;
    };
    defaultValue: {
        type: import("vue").PropType<number | Date | import("./type").TCalendarValue[]>;
    };
    visible: BooleanConstructor;
    onChange: import("vue").PropType<(value: Date) => void>;
    onClose: import("vue").PropType<(trigger: import("./type").CalendarTrigger) => void>;
    onConfirm: import("vue").PropType<(value: Date) => void>;
    onSelect: import("vue").PropType<(value: Date) => void>;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "update:visible"[], "update:visible", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    confirmBtn: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | import("../button").TdButtonProps>;
        default: string;
    };
    firstDayOfWeek: {
        type: NumberConstructor;
        default: number;
    };
    format: {
        type: import("vue").PropType<import("./type").CalendarFormatType>;
    };
    maxDate: {
        type: import("vue").PropType<number | Date>;
    };
    minDate: {
        type: import("vue").PropType<number | Date>;
    };
    title: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    type: {
        type: import("vue").PropType<"range" | "multiple" | "single">;
        default: "range" | "multiple" | "single";
        validator(val: "range" | "multiple" | "single"): boolean;
    };
    usePopup: {
        type: BooleanConstructor;
        default: boolean;
    };
    value: {
        type: import("vue").PropType<number | Date | import("./type").TCalendarValue[]>;
        default: any;
    };
    modelValue: {
        type: import("vue").PropType<number | Date | import("./type").TCalendarValue[]>;
        default: any;
    };
    defaultValue: {
        type: import("vue").PropType<number | Date | import("./type").TCalendarValue[]>;
    };
    visible: BooleanConstructor;
    onChange: import("vue").PropType<(value: Date) => void>;
    onClose: import("vue").PropType<(trigger: import("./type").CalendarTrigger) => void>;
    onConfirm: import("vue").PropType<(value: Date) => void>;
    onSelect: import("vue").PropType<(value: Date) => void>;
}>> & {
    "onUpdate:visible"?: (...args: any[]) => any;
}, {
    type: "range" | "multiple" | "single";
    visible: boolean;
    value: number | Date | import("./type").TCalendarValue[];
    modelValue: number | Date | import("./type").TCalendarValue[];
    confirmBtn: string;
    firstDayOfWeek: number;
    usePopup: boolean;
}, {}>;
export default _default;
