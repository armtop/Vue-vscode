/**
 * tdesign v1.2.3
 * (c) 2024 TDesign Group
 * @license MIT
 */

import { defineComponent, ref, computed, watch, createVNode } from 'vue';
import { useElementBounding } from '@vueuse/core';
import StickyProps from './props.js';
import config from '../config.js';
import { usePrefixClass } from '../hooks/useClass.js';
import { useTNodeJSX } from '../hooks/tnode.js';
import '../shared/index.js';
import './style';
import './type.js';
import { withInstall } from '../shared/component.js';
import '../config-provider/useConfig.js';
import 'lodash/isFunction';
import 'lodash/cloneDeep';
import 'lodash/isString';
import '../config-provider/context.js';
import 'lodash/mergeWith';
import 'lodash/merge';
import 'lodash/isArray';
import '../_common/js/global-config/mobile/default-config.js';
import '../_common/js/global-config/mobile/locale/zh_CN.js';
import '../_chunks/dep-4c6045f6.js';
import '@babel/runtime/helpers/typeof';
import '../_chunks/dep-1d280204.js';
import 'dayjs';
import '../_chunks/dep-5101c61a.js';
import '../config-provider/type.js';
import 'lodash/camelCase';
import 'lodash/kebabCase';
import '../hooks/render-tnode.js';
import 'lodash/isEmpty';
import 'lodash/isObject';
import '../shared/functions.js';
import '../shared/util.js';
import '@babel/runtime/helpers/slicedToArray';
import 'lodash/isNumber';
import '../shared/constants.js';
import '../shared/render.js';
import '../shared/render-tnode.js';
import '../shared/useToggle/index.js';
import '../shared/useCountDown/index.js';
import '@babel/runtime/helpers/asyncToGenerator';
import '@babel/runtime/regenerator';
import '../shared/useCountDown/utils.js';
import '../shared/useDefault/index.js';
import '../shared/useChildSlots/index.js';
import '@babel/runtime/helpers/toConsumableArray';
import '../shared/useVModel/index.js';
import '../shared/useTouch/index.js';
import '../shared/useScrollParent/index.js';
import '../shared/useExpose/index.js';
import '../shared/useTest/index.js';
import '@babel/runtime/helpers/defineProperty';
import '../shared/useClickAway/index.js';
import '../shared/useGesture/index.js';
import '@use-gesture/vanilla';
import '../shared/hover.js';

var name = "".concat(config.prefix, "-sticky");
var Sticky = defineComponent({
  name: name,
  props: StickyProps,
  setup: function setup(props) {
    var renderTNodeJSX = useTNodeJSX();
    var stickyBarClass = usePrefixClass("sticky");
    var boxRef = ref();
    var _useElementBounding = useElementBounding(boxRef),
      boxTop = _useElementBounding.top;
    var contentRef = ref();
    var _useElementBounding2 = useElementBounding(contentRef),
      contentTop = _useElementBounding2.top,
      height = _useElementBounding2.height;
    var stickyStyle = computed(function () {
      return "height:".concat(height.value, "px;");
    });
    var container;
    var containerHeight = ref(0);
    var containerTop = ref(0);
    watch(boxTop, function () {
      if (props.container) {
        container = document.querySelector(props.container);
        var _container$getBoundin = container.getBoundingClientRect(),
          top = _container$getBoundin.top,
          height2 = _container$getBoundin.height;
        containerHeight.value = height2;
        containerTop.value = top;
      }
    });
    var contentStyles = computed(function () {
      var _props$onScroll;
      var styleStr = "z-index:".concat(props.zIndex, ";");
      var isFixed = false;
      if (props.disabled) return styleStr;
      var offsetTop = Number(props.offsetTop);
      if (container) {
        if (containerHeight.value + containerTop.value < offsetTop + height.value) {
          styleStr += "transform:translate3d(0, ".concat(containerHeight.value - height.value, "px, 0);");
        } else if (boxTop.value <= offsetTop) {
          styleStr += "position:fixed;top:".concat(offsetTop, "px;");
          isFixed = true;
        }
      } else if (boxTop.value <= offsetTop) {
        styleStr += "position:fixed;top:".concat(offsetTop, "px;");
        isFixed = true;
      }
      (_props$onScroll = props.onScroll) === null || _props$onScroll === void 0 || _props$onScroll.call(props, {
        scrollTop: contentTop.value,
        isFixed: isFixed
      });
      return styleStr;
    });
    return function () {
      return createVNode("div", {
        "ref": boxRef,
        "class": stickyBarClass.value,
        "style": stickyStyle.value
      }, [createVNode("div", {
        "ref": contentRef,
        "class": "".concat(stickyBarClass.value, "__content"),
        "style": contentStyles.value
      }, [renderTNodeJSX("default")])]);
    };
  }
});

var _Sticky = withInstall(Sticky);

export { _Sticky as default };
//# sourceMappingURL=index.js.map
