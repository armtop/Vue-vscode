{"version":3,"file":"index.js","sources":["../../src/form/form.tsx","../../src/form/form-item.tsx","../../src/form/index.ts"],"sourcesContent":["import { computed, defineComponent, provide, reactive, ref, toRefs } from 'vue';\nimport isEmpty from 'lodash/isEmpty';\nimport isArray from 'lodash/isArray';\nimport isBoolean from 'lodash/isBoolean';\nimport isFunction from 'lodash/isFunction';\nimport {\n  Data,\n  FormResetParams,\n  FormValidateMessage,\n  FormValidateParams,\n  FormValidateResult,\n  TdFormProps,\n} from './type';\nimport props from './props';\nimport { FormInjectionKey, FormItemContext } from './const';\nimport { FormDisabledProvider } from './hooks';\nimport config from '../config';\nimport { renderContent } from '../shared';\nimport { preventDefault } from '../shared/dom';\nimport { FormItemValidateResult } from './form-item';\nimport { useTNodeJSX } from '../hooks/tnode';\n\nconst { prefix } = config;\nconst name = `${prefix}-form`;\n\ntype FormResetEvent = Event;\n// export type FormSubmitEvent = SubmitEvent; (for higher typescript version)\ntype FormSubmitEvent = Event;\ntype Result = FormValidateResult<TdFormProps['data']>;\n\nexport const requestSubmit = (target: HTMLFormElement) => {\n  if (!(target instanceof HTMLFormElement)) {\n    throw new Error('target must be HTMLFormElement');\n  }\n  const submitter = document.createElement('input');\n  submitter.type = 'submit';\n  submitter.hidden = true;\n  target.appendChild(submitter);\n  submitter.click();\n  target.removeChild(submitter);\n};\n\nexport default defineComponent({\n  name,\n  props,\n  setup(props, { expose }) {\n    const renderTNodeJSX = useTNodeJSX();\n    const {\n      disabled,\n      showErrorMessage,\n      labelWidth,\n      labelAlign,\n      contentAlign,\n      data,\n      colon,\n      requiredMark,\n      rules,\n      errorMessage,\n      resetType,\n    } = toRefs(props);\n\n    // @ts-ignore\n    const formRef = ref<HTMLFormElement>(null);\n    const children = ref<FormItemContext[]>([]);\n\n    provide<FormDisabledProvider>('formDisabled', {\n      disabled,\n    });\n\n    provide(\n      FormInjectionKey,\n      reactive({\n        showErrorMessage,\n        labelWidth,\n        labelAlign,\n        contentAlign,\n        data,\n        colon,\n        requiredMark,\n        rules,\n        errorMessage,\n        resetType,\n        children,\n        renderContent,\n      }),\n    );\n\n    const formClass = computed(() => [name]);\n\n    const needValidate = (name: string | number, fields: string[] | undefined) => {\n      if (!fields || !isArray(fields)) return true;\n      return fields.indexOf(`${name}`) !== -1;\n    };\n    const formatValidateResult = <T extends Data>(validateResultList: FormItemValidateResult<T>[]) => {\n      const result = validateResultList.reduce((r, err) => Object.assign(r || {}, err), {});\n      Object.keys(result).forEach((key) => {\n        if (result[key] === true) {\n          delete result[key];\n        }\n      });\n      return isEmpty(result) ? true : result;\n    };\n    const validate = async (param?: FormValidateParams): Promise<Result> => {\n      const { fields, trigger = 'all', showErrorMessage } = param || {};\n      const list = children.value\n        .filter((child) => isFunction(child.validate) && needValidate(String(child.name), fields))\n        .map((child) => child.validate(trigger, showErrorMessage));\n      const arr = await Promise.all(list);\n      const result = formatValidateResult(arr);\n      props.onValidate?.({\n        validateResult: result,\n      });\n      return result;\n    };\n\n    const getFirstError = (r: Result) => {\n      if (isBoolean(r)) return '';\n      return r?.[Object.keys(r)?.[0]]?.[0]?.message || '';\n    };\n    const submitParams = ref<Pick<FormValidateParams, 'showErrorMessage'>>();\n    const onSubmit = (e?: FormSubmitEvent) => {\n      if (props.preventSubmitDefault && e) {\n        preventDefault(e, true);\n      }\n      validate(submitParams.value).then((r) => {\n        const firstError = getFirstError(r);\n        // @ts-ignore\n        props.onSubmit?.({\n          validateResult: r,\n          firstError,\n        });\n      });\n      submitParams.value = undefined;\n    };\n\n    const submit = async (params?: Pick<FormValidateParams, 'showErrorMessage'>) => {\n      submitParams.value = params;\n      requestSubmit(formRef.value);\n    };\n\n    const resetParams = ref<FormResetParams<Data>>();\n    const onReset = (e?: FormResetEvent) => {\n      if (props.preventSubmitDefault && e) {\n        preventDefault(e, true);\n      }\n      children.value\n        .filter(\n          (child) =>\n            isFunction(child.resetField) && needValidate(String(child.name), resetParams.value?.fields as string[]),\n        )\n        .forEach((child) => child.resetField(resetParams.value?.type));\n      resetParams.value = undefined;\n      props.onReset?.({ e });\n    };\n\n    const reset = <FormData extends Data>(params?: FormResetParams<FormData>) => {\n      (resetParams.value as any) = params;\n      formRef.value.reset();\n    };\n\n    const clearValidate = (fields?: Array<string>) => {\n      children.value.forEach((child) => {\n        if (isFunction(child.resetHandler) && needValidate(String(child.name), fields)) {\n          child.resetHandler();\n        }\n      });\n    };\n    const setValidateMessage = (validateMessage: FormValidateMessage<FormData>) => {\n      const keys = Object.keys(validateMessage);\n      if (!keys.length) return;\n      const list = children.value\n        .filter((child) => isFunction(child.setValidateMessage) && keys.includes(`${child.name}`))\n        .map((child) => child.setValidateMessage(validateMessage[`${child.name}`]));\n      Promise.all(list);\n    };\n\n    expose({ validate, submit, reset, clearValidate, setValidateMessage });\n\n    return () => {\n      return (\n        <form ref={formRef} class={formClass.value} onSubmit={(e) => onSubmit(e)} onReset={(e) => onReset(e)}>\n          {renderTNodeJSX('default')}\n        </form>\n      );\n    };\n  },\n});\n","import {\n  computed,\n  defineComponent,\n  inject,\n  nextTick,\n  onBeforeUnmount,\n  onMounted,\n  reactive,\n  ref,\n  toRefs,\n  watch,\n  getCurrentInstance,\n  h,\n} from 'vue';\nimport isArray from 'lodash/isArray';\nimport isNumber from 'lodash/isNumber';\nimport isString from 'lodash/isString';\nimport isBoolean from 'lodash/isBoolean';\nimport cloneDeep from 'lodash/cloneDeep';\nimport lodashGet from 'lodash/get';\nimport lodashSet from 'lodash/set';\nimport isNil from 'lodash/isNil';\nimport lodashTemplate from 'lodash/template';\nimport { ChevronRightIcon } from 'tdesign-icons-vue-next';\nimport { renderTNode, TNode } from '../shared';\nimport { validate } from './form-model';\n\nimport {\n  AllValidateResult,\n  Data,\n  FormErrorMessage,\n  FormItemValidateMessage,\n  FormRule,\n  ValidateTriggerType,\n  ValueType,\n} from './type';\nimport props from './form-item-props';\nimport {\n  AnalysisValidateResult,\n  ErrorListType,\n  FormInjectionKey,\n  FormItemContext,\n  FormItemInjectionKey,\n  SuccessListType,\n  ValidateStatus,\n} from './const';\nimport config from '../config';\nimport { useTNodeJSX } from '../hooks/tnode';\n\nconst { prefix } = config;\nconst name = `${prefix}-form-item`;\nconst classPrefix = `${prefix}-form__item`;\n\nexport type FormItemValidateResult<T extends Data = Data> = { [key in keyof T]: boolean | AllValidateResult[] };\n\nexport default defineComponent({\n  name,\n  components: { TNode },\n  props,\n  setup(props, { slots }) {\n    const renderTNodeJSX = useTNodeJSX();\n    const { name } = toRefs(props);\n\n    const form = inject(FormInjectionKey, undefined);\n\n    const extraNode = computed(() => {\n      const list = errorList.value;\n      if (showErrorMessage.value && list[0]?.message) {\n        return list[0]?.message;\n      }\n      if (successList.value.length) {\n        return successList.value[0].message;\n      }\n      return null;\n    });\n\n    const formItemClass = computed(() => [\n      `${prefix}-form__item`,\n      `${prefix}-form__item--bordered`,\n      `${prefix}-form--${labelAlign.value}`,\n      `${prefix}-form-item__${props.name}`,\n    ]);\n\n    const needRequiredMark = computed(() => {\n      const requiredMark = props.requiredMark ?? form?.requiredMark;\n      const isRequired = innerRules.value.filter((rule) => rule.required).length > 0;\n      return requiredMark ?? isRequired;\n    });\n\n    const hasLabel = computed(() => slots.label || props.label);\n    const hasColon = computed(() => !!(form?.colon && hasLabel.value));\n    const FROM_LABEL = `${prefix}-form__label`;\n    const labelAlign = computed(() => (isNil(props.labelAlign) ? form?.labelAlign : props.labelAlign));\n    const labelWidth = computed(() => (isNil(props.labelWidth) ? form?.labelWidth : props.labelWidth));\n    const contentAlign = computed(() => (isNil(props.contentAlign) ? form?.contentAlign : props.contentAlign));\n\n    const labelClasses = computed(() => [\n      `${prefix}-form__label`,\n      {\n        [`${FROM_LABEL}--required`]: needRequiredMark.value,\n        [`${FROM_LABEL}--colon`]: hasColon.value,\n        [`${FROM_LABEL}--top`]: hasLabel.value && (labelAlign.value === 'top' || !labelWidth.value),\n        [`${FROM_LABEL}--left`]: labelAlign.value === 'left' && labelWidth.value,\n        [`${FROM_LABEL}--right`]: labelAlign.value === 'right' && labelWidth.value,\n      },\n    ]);\n\n    const labelStyle = computed(() => {\n      if (labelWidth.value && labelAlign.value !== 'top') {\n        return isNumber(labelWidth.value) ? { width: `${labelWidth.value}px` } : { width: labelWidth.value };\n      }\n      return {};\n    });\n\n    const freeShowErrorMessage = ref<boolean | undefined>(false);\n    const showErrorMessage = computed(() => {\n      if (isBoolean(freeShowErrorMessage.value)) return freeShowErrorMessage.value;\n      if (isBoolean(props.showErrorMessage)) return props.showErrorMessage;\n      return form?.showErrorMessage;\n    });\n\n    const errorClasses = computed(() => {\n      if (!showErrorMessage.value) return '';\n      if (!errorList.value.length) return '';\n      const type = errorList.value[0].type || 'error';\n      return type === 'error' ? `${classPrefix}--error` : `${classPrefix}--warning`;\n    });\n\n    const contentClasses = computed(() => [`${prefix}-form__controls`, errorClasses.value]);\n    const contentSlotClasses = computed(() => [\n      `${prefix}-form__controls-content`,\n      `${prefix}-form__controls--${contentAlign.value}`,\n    ]);\n\n    const contentStyle = computed(() => {\n      let contentStyle = {};\n      if (labelWidth.value && labelAlign.value !== 'top') {\n        if (isNumber(labelWidth.value)) {\n          contentStyle = { marginLeft: `${labelWidth.value}px` };\n        } else {\n          contentStyle = { marginLeft: labelWidth.value };\n        }\n      }\n\n      return contentStyle;\n    });\n\n    const errorList = ref<ErrorListType[]>([]);\n    const successList = ref<SuccessListType[]>([]);\n    const verifyStatus = ref(ValidateStatus.TO_BE_VALIDATED);\n    const resetValidating = ref(false);\n    const needResetField = ref(false);\n\n    const resetHandler = () => {\n      needResetField.value = false;\n      errorList.value = [];\n      successList.value = [];\n      verifyStatus.value = ValidateStatus.TO_BE_VALIDATED;\n    };\n    const getEmptyValue = (): ValueType => {\n      const type = Object.prototype.toString.call(lodashGet(form?.data, `${props.name}`));\n      let emptyValue: ValueType;\n      if (type === '[object String]') {\n        emptyValue = '';\n      }\n      if (type === '[object Array]') {\n        emptyValue = [];\n      }\n      if (type === '[object Object]') {\n        emptyValue = {};\n      }\n      return emptyValue;\n    };\n    const resetField = async (resetType: 'initial' | 'empty' | undefined = form?.resetType): Promise<any> => {\n      if (!props.name) return null;\n\n      if (resetType === 'empty') {\n        // @ts-ignore\n        lodashSet(form?.data, props.name, getEmptyValue());\n      } else if (resetType === 'initial') {\n        // @ts-ignore\n        lodashSet(form?.data, props.name, initialValue.value);\n      }\n\n      await nextTick();\n      if (resetValidating.value) {\n        needResetField.value = true;\n      } else {\n        resetHandler();\n      }\n    };\n\n    const errorMessages = computed<FormErrorMessage>(() => form?.errorMessage || {});\n    const innerRules = computed<FormRule[]>(() => {\n      if (props.rules?.length) return props.rules;\n      if (!props.name) return [];\n      const index = `${props.name}`.lastIndexOf('.') || -1;\n      const pRuleName = `${props.name}`.slice(index + 1);\n      return lodashGet(form?.rules, props.name) || lodashGet(form?.rules, pRuleName) || [];\n    });\n\n    const analysisValidateResult = async (trigger: ValidateTriggerType): Promise<AnalysisValidateResult> => {\n      const result: AnalysisValidateResult = {\n        successList: [],\n        errorList: [],\n        rules: [],\n        resultList: [],\n        allowSetValue: false,\n      };\n      result.rules =\n        trigger === 'all'\n          ? innerRules.value\n          : innerRules.value.filter((item) => (item.trigger || 'change') === trigger);\n      if (innerRules.value.length && !result.rules?.length) {\n        return result;\n      }\n      result.allowSetValue = true;\n      result.resultList = await validate(value.value, result.rules);\n      result.errorList = result.resultList\n        .filter((item) => item.result !== true)\n        .map((item) => {\n          Object.keys(item).forEach((key) => {\n            if (!item.message && errorMessages.value[key]) {\n              const compiled = lodashTemplate(errorMessages.value[key]);\n              const name = isString(props.label) ? props.label : props.name;\n              item.message = compiled({\n                name,\n                validate: item[key],\n              });\n            }\n          });\n          return item as ErrorListType;\n        });\n      // 仅有自定义校验方法才会存在 successList\n      result.successList = result.resultList.filter(\n        (item) => item.result === true && item.message && item.type === 'success',\n      ) as SuccessListType[];\n      return result;\n    };\n    const validateHandler = async <T extends Data = Data>(\n      trigger: ValidateTriggerType,\n      showErrorMessage?: boolean,\n    ): Promise<FormItemValidateResult<T>> => {\n      resetValidating.value = true;\n      // undefined | boolean\n      freeShowErrorMessage.value = showErrorMessage;\n      const {\n        successList: innerSuccessList,\n        errorList: innerErrorList,\n        rules,\n        resultList,\n        allowSetValue,\n      } = await analysisValidateResult(trigger);\n\n      if (allowSetValue) {\n        successList.value = innerSuccessList || [];\n        errorList.value = innerErrorList || [];\n      }\n      // 根据校验结果设置校验状态\n      if (rules.length) {\n        verifyStatus.value = innerErrorList?.length ? ValidateStatus.FAIL : ValidateStatus.SUCCESS;\n      }\n      // 重置处理\n      if (needResetField.value) {\n        resetHandler();\n      }\n      resetValidating.value = false;\n\n      return {\n        [`${name.value}`]: innerErrorList?.length === 0 ? true : resultList,\n      } as FormItemValidateResult<T>;\n    };\n\n    const setValidateMessage = (validateMessage: FormItemValidateMessage[]) => {\n      if (!validateMessage && !isArray(validateMessage)) return;\n      if (validateMessage.length === 0) {\n        errorList.value = [];\n        verifyStatus.value = ValidateStatus.SUCCESS;\n      }\n      errorList.value = validateMessage.map((item) => ({ ...item, result: false }));\n      verifyStatus.value = ValidateStatus.FAIL;\n    };\n\n    const value = computed<ValueType>(() => form?.data && lodashGet(form?.data, `${name.value}`));\n    const initialValue = ref<ValueType>(undefined);\n\n    const context: FormItemContext = reactive({\n      name,\n      resetHandler,\n      resetField,\n      validate: validateHandler,\n      setValidateMessage,\n    });\n\n    onMounted(() => {\n      initialValue.value = cloneDeep(value.value);\n      form?.children.push(context);\n    });\n\n    onBeforeUnmount(() => {\n      if (form) form.children = form?.children.filter((ctx) => ctx !== context);\n    });\n\n    watch(\n      value,\n      async () => {\n        await validateHandler('change');\n      },\n      { deep: true },\n    );\n\n    watch(\n      () => [props.name, JSON.stringify(props.rules)].join(','),\n      () => {\n        validateHandler('change');\n      },\n    );\n\n    return () => {\n      const renderRightIconContent = () => {\n        if (!props.arrow) {\n          return null;\n        }\n        return h(ChevronRightIcon, { size: '24px', color: 'rgba(0, 0, 0, .4)' });\n      };\n      const renderLabelContent = () => {\n        if (Number(labelWidth.value) === 0) {\n          return null;\n        }\n        return renderTNodeJSX('label');\n      };\n      const renderHelpNode = () => {\n        const helpNode = renderTNodeJSX('help');\n        if (!helpNode) {\n          return null;\n        }\n        return <div class={[`${classPrefix}-help`, `${prefix}-form__controls--${contentAlign.value}`]}>{helpNode}</div>;\n      };\n      const renderExtraNode = () => {\n        if (!extraNode.value) {\n          return null;\n        }\n        return (\n          <div class={[`${classPrefix}-extra`, `${prefix}-form__controls--${contentAlign.value}`]}>\n            {extraNode.value}\n          </div>\n        );\n      };\n\n      return (\n        <div class={[...formItemClass.value, renderHelpNode() ? `${prefix}-form__item-with-help` : '']}>\n          <div class={[`${classPrefix}-wrap`, `${classPrefix}--${labelAlign.value}`]}>\n            <div class={labelClasses.value} style={labelStyle.value}>\n              <label for={props.for}>{renderLabelContent()}</label>\n            </div>\n            <div class={contentClasses.value} style={contentStyle.value}>\n              <div class={contentSlotClasses.value}>{renderTNodeJSX('default')}</div>\n              {renderHelpNode()}\n              {renderExtraNode()}\n            </div>\n          </div>\n          {renderRightIconContent()}\n        </div>\n      );\n    };\n  },\n});\n","import _Form from './form';\nimport _FormItem from './form-item';\nimport { withInstall, WithInstallType } from '../shared';\nimport { TdFormProps, TdFormItemProps } from './type';\n\nimport './style';\n\nexport * from './type';\nexport type FormProps = TdFormProps;\nexport type FormItemProps = TdFormItemProps;\n\nexport const Form: WithInstallType<typeof _Form> = withInstall(_Form);\nexport const FormItem: WithInstallType<typeof _FormItem> = withInstall(_FormItem);\n"],"names":["prefix","config","name","requestSubmit","target","HTMLFormElement","Error","submitter","document","createElement","type","hidden","appendChild","click","removeChild","defineComponent","props","setup","expose","_ref","renderTNodeJSX","useTNodeJSX","_toRefs","toRefs","disabled","showErrorMessage","labelWidth","labelAlign","contentAlign","data","colon","requiredMark","rules","errorMessage","resetType","formRef","ref","children","provide","FormInjectionKey","reactive","renderContent","formClass","computed","needValidate","fields","isArray","indexOf","concat","formatValidateResult","validateResultList","result","reduce","r","err","Object","assign","keys","forEach","key","isEmpty","validate","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","param","_props2$onValidate","_ref3","_ref3$trigger","trigger","showErrorMessage2","list","arr","wrap","_callee$","_context","prev","next","value","filter","child","isFunction","String","map","Promise","all","sent","onValidate","validateResult","abrupt","stop","_x","apply","arguments","getFirstError","_r$Object$keys$","_Object$keys","isBoolean","message","submitParams","onSubmit","e","preventSubmitDefault","preventDefault","then","_props2$onSubmit","firstError","submit","_ref4","_callee2","params","_callee2$","_context2","_x2","resetParams","onReset","_props2$onReset","_resetParams$value","resetField","_resetParams$value2","reset","clearValidate","resetHandler","setValidateMessage","validateMessage","length","includes","_createVNode","classPrefix","components","TNode","slots","form","inject","extraNode","_list$","errorList","_list$2","successList","formItemClass","needRequiredMark","_props2$requiredMark","isRequired","innerRules","rule","required","hasLabel","label","hasColon","FROM_LABEL","isNil","labelClasses","_defineProperty","labelStyle","isNumber","width","freeShowErrorMessage","errorClasses","contentClasses","contentSlotClasses","contentStyle","marginLeft","verifyStatus","ValidateStatus","TO_BE_VALIDATED","resetValidating","needResetField","getEmptyValue","prototype","toString","call","lodashGet","emptyValue","_args","undefined","lodashSet","initialValue","nextTick","errorMessages","_props2$rules","index","lastIndexOf","pRuleName","slice","analysisValidateResult","_result$rules","resultList","allowSetValue","item","compiled","lodashTemplate","isString","validateHandler","_ref5","_callee3","_yield$analysisValida","innerSuccessList","innerErrorList","_callee3$","_context3","FAIL","SUCCESS","_x3","_objectSpread","context","onMounted","cloneDeep","push","onBeforeUnmount","ctx","watch","_callee4","_callee4$","_context4","deep","JSON","stringify","join","renderRightIconContent","arrow","h","ChevronRightIcon","size","color","renderLabelContent","Number","renderHelpNode","helpNode","renderExtraNode","_toConsumableArray","for","Form","withInstall","_Form","FormItem","_FormItem"],"mappings":"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"}