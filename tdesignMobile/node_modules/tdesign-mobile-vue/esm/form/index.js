/**
 * tdesign v1.2.3
 * (c) 2024 TDesign Group
 * @license MIT
 */

import _asyncToGenerator from '@babel/runtime/helpers/asyncToGenerator';
import { defineComponent, toRefs, ref, provide, reactive, computed, createVNode, inject, nextTick, onMounted, onBeforeUnmount, watch, h } from 'vue';
import _regeneratorRuntime from '@babel/runtime/regenerator';
import isEmpty from 'lodash/isEmpty';
import isArray from 'lodash/isArray';
import isBoolean from 'lodash/isBoolean';
import isFunction from 'lodash/isFunction';
import props from './props.js';
import { FormInjectionKey, ValidateStatus } from './const.js';
import config from '../config.js';
import '../shared/index.js';
import { preventDefault } from '../shared/dom.js';
import { useTNodeJSX } from '../hooks/tnode.js';
import { renderContent } from '../shared/render.js';
import _toConsumableArray from '@babel/runtime/helpers/toConsumableArray';
import _defineProperty from '@babel/runtime/helpers/defineProperty';
import isNumber from 'lodash/isNumber';
import isString from 'lodash/isString';
import cloneDeep from 'lodash/cloneDeep';
import get from 'lodash/get';
import lodashSet from 'lodash/set';
import isNil from 'lodash/isNil';
import lodashTemplate from 'lodash/template';
import { ChevronRightIcon } from 'tdesign-icons-vue-next';
import { validate } from './form-model.js';
import props$1 from './form-item-props.js';
import TNodeComponent from '../shared/render-tnode.js';
import './style';
import './type.js';
import { withInstall } from '../shared/component.js';
import '../shared/functions.js';
import '../shared/util.js';
import '@babel/runtime/helpers/slicedToArray';
import '../shared/constants.js';
import '../shared/useToggle/index.js';
import '../shared/useCountDown/index.js';
import '@vueuse/core';
import '../shared/useCountDown/utils.js';
import '../shared/useDefault/index.js';
import 'lodash/camelCase';
import '../shared/useChildSlots/index.js';
import '../shared/useVModel/index.js';
import 'lodash/kebabCase';
import '../shared/useTouch/index.js';
import '../shared/useScrollParent/index.js';
import '../shared/useExpose/index.js';
import '../shared/useTest/index.js';
import '../shared/useClickAway/index.js';
import '../shared/useGesture/index.js';
import '@use-gesture/vanilla';
import '../shared/hover.js';
import '../hooks/render-tnode.js';
import 'lodash/isObject';
import '@babel/runtime/helpers/typeof';
import '../_chunks/dep-1d280204.js';

var prefix$1 = config.prefix;
var name$1 = "".concat(prefix$1, "-form");
var requestSubmit = function requestSubmit(target) {
  if (!(target instanceof HTMLFormElement)) {
    throw new Error("target must be HTMLFormElement");
  }
  var submitter = document.createElement("input");
  submitter.type = "submit";
  submitter.hidden = true;
  target.appendChild(submitter);
  submitter.click();
  target.removeChild(submitter);
};
var _Form = defineComponent({
  name: name$1,
  props: props,
  setup: function setup(props2, _ref) {
    var expose = _ref.expose;
    var renderTNodeJSX = useTNodeJSX();
    var _toRefs = toRefs(props2),
      disabled = _toRefs.disabled,
      showErrorMessage = _toRefs.showErrorMessage,
      labelWidth = _toRefs.labelWidth,
      labelAlign = _toRefs.labelAlign,
      contentAlign = _toRefs.contentAlign,
      data = _toRefs.data,
      colon = _toRefs.colon,
      requiredMark = _toRefs.requiredMark,
      rules = _toRefs.rules,
      errorMessage = _toRefs.errorMessage,
      resetType = _toRefs.resetType;
    var formRef = ref(null);
    var children = ref([]);
    provide("formDisabled", {
      disabled: disabled
    });
    provide(FormInjectionKey, reactive({
      showErrorMessage: showErrorMessage,
      labelWidth: labelWidth,
      labelAlign: labelAlign,
      contentAlign: contentAlign,
      data: data,
      colon: colon,
      requiredMark: requiredMark,
      rules: rules,
      errorMessage: errorMessage,
      resetType: resetType,
      children: children,
      renderContent: renderContent
    }));
    var formClass = computed(function () {
      return [name$1];
    });
    var needValidate = function needValidate(name2, fields) {
      if (!fields || !isArray(fields)) return true;
      return fields.indexOf("".concat(name2)) !== -1;
    };
    var formatValidateResult = function formatValidateResult(validateResultList) {
      var result = validateResultList.reduce(function (r, err) {
        return Object.assign(r || {}, err);
      }, {});
      Object.keys(result).forEach(function (key) {
        if (result[key] === true) {
          delete result[key];
        }
      });
      return isEmpty(result) ? true : result;
    };
    var validate = /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(param) {
        var _props2$onValidate;
        var _ref3, fields, _ref3$trigger, trigger, showErrorMessage2, list, arr, result;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _ref3 = param || {}, fields = _ref3.fields, _ref3$trigger = _ref3.trigger, trigger = _ref3$trigger === void 0 ? "all" : _ref3$trigger, showErrorMessage2 = _ref3.showErrorMessage;
              list = children.value.filter(function (child) {
                return isFunction(child.validate) && needValidate(String(child.name), fields);
              }).map(function (child) {
                return child.validate(trigger, showErrorMessage2);
              });
              _context.next = 4;
              return Promise.all(list);
            case 4:
              arr = _context.sent;
              result = formatValidateResult(arr);
              (_props2$onValidate = props2.onValidate) === null || _props2$onValidate === void 0 || _props2$onValidate.call(props2, {
                validateResult: result
              });
              return _context.abrupt("return", result);
            case 8:
            case "end":
              return _context.stop();
          }
        }, _callee);
      }));
      return function validate(_x) {
        return _ref2.apply(this, arguments);
      };
    }();
    var getFirstError = function getFirstError(r) {
      var _r$Object$keys$, _Object$keys;
      if (isBoolean(r)) return "";
      return (r === null || r === void 0 || (_r$Object$keys$ = r[(_Object$keys = Object.keys(r)) === null || _Object$keys === void 0 ? void 0 : _Object$keys[0]]) === null || _r$Object$keys$ === void 0 || (_r$Object$keys$ = _r$Object$keys$[0]) === null || _r$Object$keys$ === void 0 ? void 0 : _r$Object$keys$.message) || "";
    };
    var submitParams = ref();
    var _onSubmit = function onSubmit(e) {
      if (props2.preventSubmitDefault && e) {
        preventDefault(e, true);
      }
      validate(submitParams.value).then(function (r) {
        var _props2$onSubmit;
        var firstError = getFirstError(r);
        (_props2$onSubmit = props2.onSubmit) === null || _props2$onSubmit === void 0 || _props2$onSubmit.call(props2, {
          validateResult: r,
          firstError: firstError
        });
      });
      submitParams.value = void 0;
    };
    var submit = /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(params) {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              submitParams.value = params;
              requestSubmit(formRef.value);
            case 2:
            case "end":
              return _context2.stop();
          }
        }, _callee2);
      }));
      return function submit(_x2) {
        return _ref4.apply(this, arguments);
      };
    }();
    var resetParams = ref();
    var _onReset = function onReset(e) {
      var _props2$onReset;
      if (props2.preventSubmitDefault && e) {
        preventDefault(e, true);
      }
      children.value.filter(function (child) {
        var _resetParams$value;
        return isFunction(child.resetField) && needValidate(String(child.name), (_resetParams$value = resetParams.value) === null || _resetParams$value === void 0 ? void 0 : _resetParams$value.fields);
      }).forEach(function (child) {
        var _resetParams$value2;
        return child.resetField((_resetParams$value2 = resetParams.value) === null || _resetParams$value2 === void 0 ? void 0 : _resetParams$value2.type);
      });
      resetParams.value = void 0;
      (_props2$onReset = props2.onReset) === null || _props2$onReset === void 0 || _props2$onReset.call(props2, {
        e: e
      });
    };
    var reset = function reset(params) {
      resetParams.value = params;
      formRef.value.reset();
    };
    var clearValidate = function clearValidate(fields) {
      children.value.forEach(function (child) {
        if (isFunction(child.resetHandler) && needValidate(String(child.name), fields)) {
          child.resetHandler();
        }
      });
    };
    var setValidateMessage = function setValidateMessage(validateMessage) {
      var keys = Object.keys(validateMessage);
      if (!keys.length) return;
      var list = children.value.filter(function (child) {
        return isFunction(child.setValidateMessage) && keys.includes("".concat(child.name));
      }).map(function (child) {
        return child.setValidateMessage(validateMessage["".concat(child.name)]);
      });
      Promise.all(list);
    };
    expose({
      validate: validate,
      submit: submit,
      reset: reset,
      clearValidate: clearValidate,
      setValidateMessage: setValidateMessage
    });
    return function () {
      return createVNode("form", {
        "ref": formRef,
        "class": formClass.value,
        "onSubmit": function onSubmit(e) {
          return _onSubmit(e);
        },
        "onReset": function onReset(e) {
          return _onReset(e);
        }
      }, [renderTNodeJSX("default")]);
    };
  }
});

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var prefix = config.prefix;
var name = "".concat(prefix, "-form-item");
var classPrefix = "".concat(prefix, "-form__item");
var _FormItem = defineComponent({
  name: name,
  components: {
    TNode: TNodeComponent
  },
  props: props$1,
  setup: function setup(props2, _ref) {
    var slots = _ref.slots;
    var renderTNodeJSX = useTNodeJSX();
    var _toRefs = toRefs(props2),
      name2 = _toRefs.name;
    var form = inject(FormInjectionKey, void 0);
    var extraNode = computed(function () {
      var _list$;
      var list = errorList.value;
      if (showErrorMessage.value && (_list$ = list[0]) !== null && _list$ !== void 0 && _list$.message) {
        var _list$2;
        return (_list$2 = list[0]) === null || _list$2 === void 0 ? void 0 : _list$2.message;
      }
      if (successList.value.length) {
        return successList.value[0].message;
      }
      return null;
    });
    var formItemClass = computed(function () {
      return ["".concat(prefix, "-form__item"), "".concat(prefix, "-form__item--bordered"), "".concat(prefix, "-form--").concat(labelAlign.value), "".concat(prefix, "-form-item__").concat(props2.name)];
    });
    var needRequiredMark = computed(function () {
      var _props2$requiredMark;
      var requiredMark = (_props2$requiredMark = props2.requiredMark) !== null && _props2$requiredMark !== void 0 ? _props2$requiredMark : form === null || form === void 0 ? void 0 : form.requiredMark;
      var isRequired = innerRules.value.filter(function (rule) {
        return rule.required;
      }).length > 0;
      return requiredMark !== null && requiredMark !== void 0 ? requiredMark : isRequired;
    });
    var hasLabel = computed(function () {
      return slots.label || props2.label;
    });
    var hasColon = computed(function () {
      return !!(form !== null && form !== void 0 && form.colon && hasLabel.value);
    });
    var FROM_LABEL = "".concat(prefix, "-form__label");
    var labelAlign = computed(function () {
      return isNil(props2.labelAlign) ? form === null || form === void 0 ? void 0 : form.labelAlign : props2.labelAlign;
    });
    var labelWidth = computed(function () {
      return isNil(props2.labelWidth) ? form === null || form === void 0 ? void 0 : form.labelWidth : props2.labelWidth;
    });
    var contentAlign = computed(function () {
      return isNil(props2.contentAlign) ? form === null || form === void 0 ? void 0 : form.contentAlign : props2.contentAlign;
    });
    var labelClasses = computed(function () {
      return ["".concat(prefix, "-form__label"), _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty({}, "".concat(FROM_LABEL, "--required"), needRequiredMark.value), "".concat(FROM_LABEL, "--colon"), hasColon.value), "".concat(FROM_LABEL, "--top"), hasLabel.value && (labelAlign.value === "top" || !labelWidth.value)), "".concat(FROM_LABEL, "--left"), labelAlign.value === "left" && labelWidth.value), "".concat(FROM_LABEL, "--right"), labelAlign.value === "right" && labelWidth.value)];
    });
    var labelStyle = computed(function () {
      if (labelWidth.value && labelAlign.value !== "top") {
        return isNumber(labelWidth.value) ? {
          width: "".concat(labelWidth.value, "px")
        } : {
          width: labelWidth.value
        };
      }
      return {};
    });
    var freeShowErrorMessage = ref(false);
    var showErrorMessage = computed(function () {
      if (isBoolean(freeShowErrorMessage.value)) return freeShowErrorMessage.value;
      if (isBoolean(props2.showErrorMessage)) return props2.showErrorMessage;
      return form === null || form === void 0 ? void 0 : form.showErrorMessage;
    });
    var errorClasses = computed(function () {
      if (!showErrorMessage.value) return "";
      if (!errorList.value.length) return "";
      var type = errorList.value[0].type || "error";
      return type === "error" ? "".concat(classPrefix, "--error") : "".concat(classPrefix, "--warning");
    });
    var contentClasses = computed(function () {
      return ["".concat(prefix, "-form__controls"), errorClasses.value];
    });
    var contentSlotClasses = computed(function () {
      return ["".concat(prefix, "-form__controls-content"), "".concat(prefix, "-form__controls--").concat(contentAlign.value)];
    });
    var contentStyle = computed(function () {
      var contentStyle2 = {};
      if (labelWidth.value && labelAlign.value !== "top") {
        if (isNumber(labelWidth.value)) {
          contentStyle2 = {
            marginLeft: "".concat(labelWidth.value, "px")
          };
        } else {
          contentStyle2 = {
            marginLeft: labelWidth.value
          };
        }
      }
      return contentStyle2;
    });
    var errorList = ref([]);
    var successList = ref([]);
    var verifyStatus = ref(ValidateStatus.TO_BE_VALIDATED);
    var resetValidating = ref(false);
    var needResetField = ref(false);
    var resetHandler = function resetHandler() {
      needResetField.value = false;
      errorList.value = [];
      successList.value = [];
      verifyStatus.value = ValidateStatus.TO_BE_VALIDATED;
    };
    var getEmptyValue = function getEmptyValue() {
      var type = Object.prototype.toString.call(get(form === null || form === void 0 ? void 0 : form.data, "".concat(props2.name)));
      var emptyValue;
      if (type === "[object String]") {
        emptyValue = "";
      }
      if (type === "[object Array]") {
        emptyValue = [];
      }
      if (type === "[object Object]") {
        emptyValue = {};
      }
      return emptyValue;
    };
    var resetField = /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var resetType,
          _args = arguments;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              resetType = _args.length > 0 && _args[0] !== undefined ? _args[0] : form === null || form === void 0 ? void 0 : form.resetType;
              if (props2.name) {
                _context.next = 3;
                break;
              }
              return _context.abrupt("return", null);
            case 3:
              if (resetType === "empty") {
                lodashSet(form === null || form === void 0 ? void 0 : form.data, props2.name, getEmptyValue());
              } else if (resetType === "initial") {
                lodashSet(form === null || form === void 0 ? void 0 : form.data, props2.name, initialValue.value);
              }
              _context.next = 6;
              return nextTick();
            case 6:
              if (resetValidating.value) {
                needResetField.value = true;
              } else {
                resetHandler();
              }
            case 7:
            case "end":
              return _context.stop();
          }
        }, _callee);
      }));
      return function resetField() {
        return _ref3.apply(this, arguments);
      };
    }();
    var errorMessages = computed(function () {
      return (form === null || form === void 0 ? void 0 : form.errorMessage) || {};
    });
    var innerRules = computed(function () {
      var _props2$rules;
      if ((_props2$rules = props2.rules) !== null && _props2$rules !== void 0 && _props2$rules.length) return props2.rules;
      if (!props2.name) return [];
      var index = "".concat(props2.name).lastIndexOf(".") || -1;
      var pRuleName = "".concat(props2.name).slice(index + 1);
      return get(form === null || form === void 0 ? void 0 : form.rules, props2.name) || get(form === null || form === void 0 ? void 0 : form.rules, pRuleName) || [];
    });
    var analysisValidateResult = /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(trigger) {
        var _result$rules;
        var result;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              result = {
                successList: [],
                errorList: [],
                rules: [],
                resultList: [],
                allowSetValue: false
              };
              result.rules = trigger === "all" ? innerRules.value : innerRules.value.filter(function (item) {
                return (item.trigger || "change") === trigger;
              });
              if (!(innerRules.value.length && !((_result$rules = result.rules) !== null && _result$rules !== void 0 && _result$rules.length))) {
                _context2.next = 4;
                break;
              }
              return _context2.abrupt("return", result);
            case 4:
              result.allowSetValue = true;
              _context2.next = 7;
              return validate(value.value, result.rules);
            case 7:
              result.resultList = _context2.sent;
              result.errorList = result.resultList.filter(function (item) {
                return item.result !== true;
              }).map(function (item) {
                Object.keys(item).forEach(function (key) {
                  if (!item.message && errorMessages.value[key]) {
                    var compiled = lodashTemplate(errorMessages.value[key]);
                    var name3 = isString(props2.label) ? props2.label : props2.name;
                    item.message = compiled({
                      name: name3,
                      validate: item[key]
                    });
                  }
                });
                return item;
              });
              result.successList = result.resultList.filter(function (item) {
                return item.result === true && item.message && item.type === "success";
              });
              return _context2.abrupt("return", result);
            case 11:
            case "end":
              return _context2.stop();
          }
        }, _callee2);
      }));
      return function analysisValidateResult(_x) {
        return _ref4.apply(this, arguments);
      };
    }();
    var validateHandler = /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(trigger, showErrorMessage2) {
        var _yield$analysisValida, innerSuccessList, innerErrorList, rules, resultList, allowSetValue;
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              resetValidating.value = true;
              freeShowErrorMessage.value = showErrorMessage2;
              _context3.next = 4;
              return analysisValidateResult(trigger);
            case 4:
              _yield$analysisValida = _context3.sent;
              innerSuccessList = _yield$analysisValida.successList;
              innerErrorList = _yield$analysisValida.errorList;
              rules = _yield$analysisValida.rules;
              resultList = _yield$analysisValida.resultList;
              allowSetValue = _yield$analysisValida.allowSetValue;
              if (allowSetValue) {
                successList.value = innerSuccessList || [];
                errorList.value = innerErrorList || [];
              }
              if (rules.length) {
                verifyStatus.value = innerErrorList !== null && innerErrorList !== void 0 && innerErrorList.length ? ValidateStatus.FAIL : ValidateStatus.SUCCESS;
              }
              if (needResetField.value) {
                resetHandler();
              }
              resetValidating.value = false;
              return _context3.abrupt("return", _defineProperty({}, "".concat(name2.value), (innerErrorList === null || innerErrorList === void 0 ? void 0 : innerErrorList.length) === 0 ? true : resultList));
            case 15:
            case "end":
              return _context3.stop();
          }
        }, _callee3);
      }));
      return function validateHandler(_x2, _x3) {
        return _ref5.apply(this, arguments);
      };
    }();
    var setValidateMessage = function setValidateMessage(validateMessage) {
      if (!validateMessage && !isArray(validateMessage)) return;
      if (validateMessage.length === 0) {
        errorList.value = [];
        verifyStatus.value = ValidateStatus.SUCCESS;
      }
      errorList.value = validateMessage.map(function (item) {
        return _objectSpread(_objectSpread({}, item), {}, {
          result: false
        });
      });
      verifyStatus.value = ValidateStatus.FAIL;
    };
    var value = computed(function () {
      return (form === null || form === void 0 ? void 0 : form.data) && get(form === null || form === void 0 ? void 0 : form.data, "".concat(name2.value));
    });
    var initialValue = ref(void 0);
    var context = reactive({
      name: name2,
      resetHandler: resetHandler,
      resetField: resetField,
      validate: validateHandler,
      setValidateMessage: setValidateMessage
    });
    onMounted(function () {
      initialValue.value = cloneDeep(value.value);
      form === null || form === void 0 || form.children.push(context);
    });
    onBeforeUnmount(function () {
      if (form) form.children = form === null || form === void 0 ? void 0 : form.children.filter(function (ctx) {
        return ctx !== context;
      });
    });
    watch(value, /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {
      return _regeneratorRuntime.wrap(function _callee4$(_context4) {
        while (1) switch (_context4.prev = _context4.next) {
          case 0:
            _context4.next = 2;
            return validateHandler("change");
          case 2:
          case "end":
            return _context4.stop();
        }
      }, _callee4);
    })), {
      deep: true
    });
    watch(function () {
      return [props2.name, JSON.stringify(props2.rules)].join(",");
    }, function () {
      validateHandler("change");
    });
    return function () {
      var renderRightIconContent = function renderRightIconContent() {
        if (!props2.arrow) {
          return null;
        }
        return h(ChevronRightIcon, {
          size: "24px",
          color: "rgba(0, 0, 0, .4)"
        });
      };
      var renderLabelContent = function renderLabelContent() {
        if (Number(labelWidth.value) === 0) {
          return null;
        }
        return renderTNodeJSX("label");
      };
      var renderHelpNode = function renderHelpNode() {
        var helpNode = renderTNodeJSX("help");
        if (!helpNode) {
          return null;
        }
        return createVNode("div", {
          "class": ["".concat(classPrefix, "-help"), "".concat(prefix, "-form__controls--").concat(contentAlign.value)]
        }, [helpNode]);
      };
      var renderExtraNode = function renderExtraNode() {
        if (!extraNode.value) {
          return null;
        }
        return createVNode("div", {
          "class": ["".concat(classPrefix, "-extra"), "".concat(prefix, "-form__controls--").concat(contentAlign.value)]
        }, [extraNode.value]);
      };
      return createVNode("div", {
        "class": [].concat(_toConsumableArray(formItemClass.value), [renderHelpNode() ? "".concat(prefix, "-form__item-with-help") : ""])
      }, [createVNode("div", {
        "class": ["".concat(classPrefix, "-wrap"), "".concat(classPrefix, "--").concat(labelAlign.value)]
      }, [createVNode("div", {
        "class": labelClasses.value,
        "style": labelStyle.value
      }, [createVNode("label", {
        "for": props2.for
      }, [renderLabelContent()])]), createVNode("div", {
        "class": contentClasses.value,
        "style": contentStyle.value
      }, [createVNode("div", {
        "class": contentSlotClasses.value
      }, [renderTNodeJSX("default")]), renderHelpNode(), renderExtraNode()])]), renderRightIconContent()]);
    };
  }
});

var Form = withInstall(_Form);
var FormItem = withInstall(_FormItem);

export { Form, FormItem };
//# sourceMappingURL=index.js.map
