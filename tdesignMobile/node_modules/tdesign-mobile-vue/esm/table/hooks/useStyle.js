/**
 * tdesign v1.2.3
 * (c) 2024 TDesign Group
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { toRefs, computed } from 'vue';
import useClassName from './useClassName.js';
import '../../config.js';

function formatCSSUnit(unit) {
  if (!unit) return unit;
  return isNaN(Number(unit)) ? unit : "".concat(unit, "px");
}
function useStyle(props) {
  var _toRefs = toRefs(props),
    bordered = _toRefs.bordered,
    stripe = _toRefs.stripe,
    verticalAlign = _toRefs.verticalAlign,
    height = _toRefs.height,
    maxHeight = _toRefs.maxHeight,
    tableContentWidth = _toRefs.tableContentWidth;
  var _useClassName = useClassName(),
    tableBaseClass = _useClassName.tableBaseClass,
    tableAlignClasses = _useClassName.tableAlignClasses;
  var tableClasses = computed(function () {
    return [tableBaseClass.table, [tableAlignClasses[(verticalAlign === null || verticalAlign === void 0 ? void 0 : verticalAlign.value) || "middle"]], _defineProperty(_defineProperty(_defineProperty({}, tableBaseClass.bordered, bordered === null || bordered === void 0 ? void 0 : bordered.value), tableBaseClass.striped, stripe === null || stripe === void 0 ? void 0 : stripe.value), tableBaseClass.loading, props.loading)];
  });
  var tableContentStyles = computed(function () {
    return {
      height: formatCSSUnit(height === null || height === void 0 ? void 0 : height.value),
      maxHeight: formatCSSUnit(maxHeight === null || maxHeight === void 0 ? void 0 : maxHeight.value)
    };
  });
  var tableElementStyles = computed(function () {
    return {
      width: formatCSSUnit(tableContentWidth === null || tableContentWidth === void 0 ? void 0 : tableContentWidth.value)
    };
  });
  return {
    tableClasses: tableClasses,
    tableElementStyles: tableElementStyles,
    tableContentStyles: tableContentStyles
  };
}

export { useStyle as default, formatCSSUnit };
//# sourceMappingURL=useStyle.js.map
