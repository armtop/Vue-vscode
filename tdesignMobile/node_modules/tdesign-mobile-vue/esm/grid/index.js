/**
 * tdesign v1.2.3
 * (c) 2024 TDesign Group
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { defineComponent, toRefs, computed, provide, createVNode, isVNode, inject, resolveComponent, mergeProps } from 'vue';
import config from '../config.js';
import props from './props.js';
import isObject from 'lodash/isObject';
import isString from 'lodash/isString';
import isFunction from 'lodash/isFunction';
import props$1 from './grid-item-props.js';
import { useTNodeJSX } from '../hooks/tnode.js';
import _Image from '../image/index.js';
import _Badge from '../badge/index.js';
import '../shared/index.js';
import './style';
import './type.js';
import { withInstall } from '../shared/component.js';
import 'lodash/camelCase';
import 'lodash/kebabCase';
import '../hooks/render-tnode.js';
import 'lodash/isEmpty';
import '../image/image.js';
import '@babel/runtime/helpers/slicedToArray';
import '@vueuse/core';
import 'tdesign-icons-vue-next';
import '../loading/index.js';
import '../_common/js/loading/circle-adapter.js';
import '../_common/js/utils/set-style.js';
import '../_common/js/utils/helper.js';
import '@babel/runtime/helpers/toConsumableArray';
import '@babel/runtime/helpers/objectWithoutProperties';
import 'lodash/isNull';
import 'lodash/isUndefined';
import 'lodash/isNumber';
import 'lodash/isArray';
import '../hooks/useClass.js';
import '../config-provider/useConfig.js';
import 'lodash/cloneDeep';
import '../config-provider/context.js';
import 'lodash/mergeWith';
import 'lodash/merge';
import '../_common/js/global-config/mobile/default-config.js';
import '../_common/js/global-config/mobile/locale/zh_CN.js';
import '../_chunks/dep-4c6045f6.js';
import '@babel/runtime/helpers/typeof';
import '../_chunks/dep-1d280204.js';
import 'dayjs';
import '../_chunks/dep-5101c61a.js';
import '../config-provider/type.js';
import '../loading/props.js';
import '../loading/style';
import '../loading/type.js';
import '../image/props.js';
import '../shared/render-tnode.js';
import '../shared/render.js';
import '../image/style';
import '../image/type.js';
import '../shared/functions.js';
import '../shared/util.js';
import '../shared/constants.js';
import '../shared/useToggle/index.js';
import '../shared/useCountDown/index.js';
import '@babel/runtime/helpers/asyncToGenerator';
import '@babel/runtime/regenerator';
import '../shared/useCountDown/utils.js';
import '../shared/useDefault/index.js';
import '../shared/useChildSlots/index.js';
import '../shared/useVModel/index.js';
import '../shared/useTouch/index.js';
import '../shared/useScrollParent/index.js';
import '../shared/useExpose/index.js';
import '../shared/useTest/index.js';
import '../shared/useClickAway/index.js';
import '../shared/useGesture/index.js';
import '@use-gesture/vanilla';
import '../shared/hover.js';
import '../badge/props.js';
import '../badge/style';
import '../badge/type.js';

var prefix$1 = config.prefix;
var name$1 = "".concat(prefix$1, "-grid");
var LocalGrid = defineComponent({
  name: name$1,
  props: props,
  setup: function setup(props2, _ref) {
    var slots = _ref.slots;
    var _toRefs = toRefs(props2),
      column = _toRefs.column,
      gutter = _toRefs.gutter,
      border = _toRefs.border,
      align = _toRefs.align;
    var rootStyle = computed(function () {
      if (column.value === 0) return [];
      var ans = ["padding: ".concat(gutter.value, "px;"), "grid-template-columns: repeat(".concat(column.value, ", 1fr)"), "grid-gap: ".concat(gutter.value, "px")];
      return ans;
    });
    provide("grid", {
      column: column,
      border: border,
      align: align,
      gutter: gutter
    });
    var classes = computed(function () {
      return ["".concat(name$1), _defineProperty(_defineProperty(_defineProperty({}, "".concat(name$1, "--card"), props2.theme === "card"), "".concat(name$1, "--auto-size"), props2.column === 0), "".concat(name$1, "--bordered"), props2.border && !props2.gutter)];
    });
    return function () {
      var _slots$default;
      return createVNode("div", {
        "class": classes.value,
        "style": rootStyle.value
      }, [(_slots$default = slots.default) === null || _slots$default === void 0 ? void 0 : _slots$default.call(slots)]);
    };
  }
});

function _isSlot(s) {
  return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !isVNode(s);
}
var prefix = config.prefix;
var name = "".concat(prefix, "-grid-item");
var LocalGridItem = defineComponent({
  name: name,
  components: {
    TImage: _Image,
    TBadge: _Badge
  },
  props: props$1,
  setup: function setup(props2, context) {
    var renderTNodeJSX = useTNodeJSX();
    var _inject = inject("grid"),
      column = _inject.column,
      border = _inject.border,
      align = _inject.align,
      gutter = _inject.gutter;
    var rootStyle = computed(function () {
      var percent = column.value > 0 ? "".concat(100 / +column.value, "%") : 0;
      var style = {
        textAlign: ["center", "left"].includes(align.value) ? align.value : "center"
      };
      if (percent !== 0) {
        style.flexBasis = percent;
      }
      return style;
    });
    var size = computed(function () {
      if (column.value > 4 || !column.value) return "small";
      return column.value < 4 ? "large" : "middle";
    });
    var realImage = computed(function () {
      if (isString(props2.image)) return {
        src: props2.image
      };
      if (isObject(props2.image) && !isFunction(props2.image) && !context.slots.image) {
        return props2.image;
      }
      return null;
    });
    var gridItemClasses = computed(function () {
      return ["".concat(name), "".concat(name, "--").concat(props2.layout), _defineProperty(_defineProperty({}, "".concat(name, "--bordered"), border.value), "".concat(name, "--surround"), border.value && gutter.value)];
    });
    return function () {
      var _slot;
      var renderImage = function renderImage() {
        return realImage.value ? createVNode(resolveComponent("t-image"), mergeProps({
          "shape": "round"
        }, realImage.value), null) : renderTNodeJSX("image");
      };
      return createVNode("div", {
        "class": gridItemClasses.value,
        "style": rootStyle.value
      }, [createVNode("div", {
        "class": "".concat(name, "__image ").concat(name, "__image--").concat(size.value)
      }, [props2.badge ? createVNode(resolveComponent("t-badge"), props2.badge, _isSlot(_slot = renderImage()) ? _slot : {
        default: function _default() {
          return [_slot];
        }
      }) : renderImage()]), createVNode("div", {
        "class": "".concat(name, "__content ").concat(name, "__content--").concat(props2.layout)
      }, [createVNode("div", {
        "class": "".concat(name, "__title ").concat(name, "__title--").concat(size.value)
      }, [renderTNodeJSX("text")]), createVNode("div", {
        "class": "".concat(name, "__description ").concat(name, "__description--").concat(props2.layout)
      }, [renderTNodeJSX("description")])])]);
    };
  }
});

var Grid = withInstall(LocalGrid);
var GridItem = withInstall(LocalGridItem);

export { Grid, GridItem };
//# sourceMappingURL=index.js.map
