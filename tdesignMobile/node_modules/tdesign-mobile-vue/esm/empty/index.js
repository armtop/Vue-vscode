/**
 * tdesign v1.2.3
 * (c) 2024 TDesign Group
 * @license MIT
 */

import { defineComponent, withDirectives, createVNode, resolveDirective } from 'vue';
import _Image from '../image/index.js';
import EmptyProps from './props.js';
import config from '../config.js';
import { usePrefixClass } from '../hooks/useClass.js';
import { useTNodeJSX } from '../hooks/tnode.js';
import '../shared/index.js';
import './style';
import './type.js';
import { withInstall } from '../shared/component.js';
import '../image/image.js';
import '@babel/runtime/helpers/slicedToArray';
import '@babel/runtime/helpers/defineProperty';
import '@vueuse/core';
import 'tdesign-icons-vue-next';
import '../loading/index.js';
import '../_common/js/loading/circle-adapter.js';
import '../_common/js/utils/set-style.js';
import '../_common/js/utils/helper.js';
import '@babel/runtime/helpers/toConsumableArray';
import '@babel/runtime/helpers/objectWithoutProperties';
import 'lodash/isString';
import 'lodash/isNull';
import 'lodash/isUndefined';
import 'lodash/isNumber';
import 'lodash/isArray';
import '../loading/props.js';
import '../loading/style';
import '../loading/type.js';
import '../config-provider/useConfig.js';
import 'lodash/isFunction';
import 'lodash/cloneDeep';
import '../config-provider/context.js';
import 'lodash/mergeWith';
import 'lodash/merge';
import '../_common/js/global-config/mobile/default-config.js';
import '../_common/js/global-config/mobile/locale/zh_CN.js';
import '../_chunks/dep-4c6045f6.js';
import '@babel/runtime/helpers/typeof';
import '../_chunks/dep-1d280204.js';
import 'dayjs';
import '../_chunks/dep-5101c61a.js';
import '../config-provider/type.js';
import 'lodash/camelCase';
import 'lodash/kebabCase';
import '../hooks/render-tnode.js';
import 'lodash/isEmpty';
import 'lodash/isObject';
import '../shared/functions.js';
import '../shared/util.js';
import '../shared/constants.js';
import '../shared/render.js';
import '../shared/render-tnode.js';
import '../shared/useToggle/index.js';
import '../shared/useCountDown/index.js';
import '@babel/runtime/helpers/asyncToGenerator';
import '@babel/runtime/regenerator';
import '../shared/useCountDown/utils.js';
import '../shared/useDefault/index.js';
import '../shared/useChildSlots/index.js';
import '../shared/useVModel/index.js';
import '../shared/useTouch/index.js';
import '../shared/useScrollParent/index.js';
import '../shared/useExpose/index.js';
import '../shared/useTest/index.js';
import '../shared/useClickAway/index.js';
import '../shared/useGesture/index.js';
import '@use-gesture/vanilla';
import '../shared/hover.js';
import '../image/props.js';
import '../image/style';
import '../image/type.js';

var prefix = config.prefix;
var name = "".concat(prefix, "-empty");
var Empty = defineComponent({
  name: name,
  props: EmptyProps,
  setup: function setup(props) {
    var renderTNodeJSX = useTNodeJSX();
    var emptyClass = usePrefixClass("empty");
    return function () {
      var action = renderTNodeJSX("action");
      var description = renderTNodeJSX("description");
      var readerThumb = function readerThumb() {
        var image = renderTNodeJSX("image");
        if (image) {
          if (typeof props.image === "string") {
            return withDirectives(createVNode(_Image, {
              "src": props.image
            }, null), [[resolveDirective("if"), "typeof image === 'string'"]]);
          }
          return image;
        }
        var icon = renderTNodeJSX("icon");
        if (icon) {
          return createVNode("div", {
            "class": "".concat(emptyClass.value, "__icon")
          }, [icon]);
        }
        return null;
      };
      return createVNode("div", {
        "class": emptyClass.value
      }, [createVNode("div", {
        "class": "".concat(emptyClass.value, "__thumb")
      }, [readerThumb()]), description && createVNode("div", {
        "class": "".concat(emptyClass.value, "__description")
      }, [description]), action && createVNode("div", {
        "class": "".concat(emptyClass.value, "__actions")
      }, [action])]);
    };
  }
});

var _Empty = withInstall(Empty);

export { _Empty as default };
//# sourceMappingURL=index.js.map
