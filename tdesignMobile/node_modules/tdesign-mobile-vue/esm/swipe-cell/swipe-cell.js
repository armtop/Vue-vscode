/**
 * tdesign v1.2.3
 * (c) 2024 TDesign Group
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import _asyncToGenerator from '@babel/runtime/helpers/asyncToGenerator';
import _regeneratorRuntime from '@babel/runtime/regenerator';
import { defineComponent, getCurrentInstance, computed, ref, reactive, onMounted, onUnmounted, watch, toRefs, resolveComponent, openBlock, createElementBlock, normalizeClass, createElementVNode, normalizeStyle, createBlock, Fragment, renderList, createCommentVNode, createVNode } from 'vue';
import isFunction from 'lodash/isFunction';
import isArray from 'lodash/isArray';
import isBoolean from 'lodash/isBoolean';
import { useSwipe } from './useSwipe.js';
import props from './props.js';
import config from '../config.js';
import '../shared/index.js';
import { preventDefault } from '../shared/dom.js';
import { useSureConfirm } from './useSureConfirm.js';
import TNodeComponent from '../shared/render-tnode.js';
import { renderContent, renderTNode } from '../shared/render.js';
import { useClickAway } from '../shared/useClickAway/index.js';
import '@babel/runtime/helpers/slicedToArray';
import '@vueuse/core';
import 'lodash/isObject';
import '../shared/util.js';
import 'lodash/isNumber';
import '../shared/functions.js';
import '../shared/component.js';
import '../shared/constants.js';
import '../shared/useToggle/index.js';
import '../shared/useCountDown/index.js';
import '../shared/useCountDown/utils.js';
import '../shared/useDefault/index.js';
import 'lodash/camelCase';
import '../shared/useChildSlots/index.js';
import '@babel/runtime/helpers/toConsumableArray';
import '../shared/useVModel/index.js';
import 'lodash/kebabCase';
import '../shared/useTouch/index.js';
import '../shared/useScrollParent/index.js';
import '../shared/useExpose/index.js';
import '../shared/useTest/index.js';
import '../shared/useGesture/index.js';
import '@use-gesture/vanilla';
import '../shared/hover.js';
import '@babel/runtime/helpers/typeof';
import 'lodash/isString';

function ownKeys$1(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$1(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var prefix = config.prefix;
var name = "".concat(prefix, "-swipe-cell");
var script = defineComponent({
  name: name,
  components: {
    TNode: TNodeComponent
  },
  props: props,
  emits: ["click", "change"],
  setup: function setup(props2, context) {
    var internalInstance = getCurrentInstance();
    var swipeContent = computed(function () {
      return renderContent(internalInstance, "default", "content");
    });
    var swipeLeftMenu = computed(function () {
      return isFunction(props2.left) || internalInstance !== null && internalInstance !== void 0 && internalInstance.slots.left ? renderTNode(internalInstance, "left") : false;
    });
    var swipeRightMenu = computed(function () {
      return isFunction(props2.right) || internalInstance !== null && internalInstance !== void 0 && internalInstance.slots.right ? renderTNode(internalInstance, "right") : false;
    });
    var wrapperRef = ref();
    var leftRef = ref();
    var rightRef = ref();
    var swipeCell = ref();
    var wrapperStyle = computed(function () {
      var transform = "translate3d(".concat(initData.pos, "px, 0, 0)");
      var transition = "margin-left .6s cubic-bezier(0.18, 0.89, 0.32, 1)";
      transition += ",margin-right .6s cubic-bezier(0.18, 0.89, 0.32, 1)";
      transition += initData.moving ? "" : ",transform .6s cubic-bezier(0.18, 0.89, 0.32, 1)";
      return {
        position: "relative",
        transition: transition,
        transform: transform,
        marginLeft: "".concat(sureMarginLeft.value, "px"),
        marginRight: "".concat(sureMarginRight.value, "px")
      };
    });
    var distance = 10;
    var autoBack = true;
    var threshold = 0.3;
    var initData = reactive({
      moving: false,
      moved: false,
      leftWidth: 0,
      rightWidth: 0,
      offset: 0,
      pos: 0,
      status: "close"
    });
    var _useSureConfirm = useSureConfirm(internalInstance, initData),
      sureRightRef = _useSureConfirm.sureRightRef,
      sureLeftRef = _useSureConfirm.sureLeftRef,
      showSureRight = _useSureConfirm.showSureRight,
      showSureLeft = _useSureConfirm.showSureLeft,
      sureMarginRight = _useSureConfirm.sureMarginRight,
      sureMarginLeft = _useSureConfirm.sureMarginLeft,
      closedSure = _useSureConfirm.closedSure,
      sureRightContent = _useSureConfirm.sureRightContent,
      sureLeftContent = _useSureConfirm.sureLeftContent,
      sureLeftBgStyle = _useSureConfirm.sureLeftBgStyle,
      sureRightBgStyle = _useSureConfirm.sureRightBgStyle,
      sureRightStyle = _useSureConfirm.sureRightStyle,
      sureLeftStyle = _useSureConfirm.sureLeftStyle,
      showSure = _useSureConfirm.showSure,
      handleSureClick = _useSureConfirm.handleSureClick;
    var range = function range(num, min, max) {
      return Math.min(Math.max(num, min), max);
    };
    var swipeDir = 0;
    var _useSwipe = useSwipe(swipeCell, {
        threshold: 0,
        onSwipeStart: function onSwipeStart(e) {
          if (props2.disabled) {
            return;
          }
          setPanelWidth();
          swipeDir = 0;
          initData.moved = false;
          initData.offset = initData.pos;
        },
        onSwipe: function onSwipe(e) {
          var absLenX = Math.abs(lengthX.value);
          var absLenY = Math.abs(lengthY.value);
          if (!swipeDir && absLenX < distance / 2 && absLenY < distance / 2) {
            return;
          }
          if (!swipeDir && absLenX < absLenY) {
            swipeDir = -1;
          } else if (!swipeDir && absLenX >= absLenY) {
            swipeDir = 1;
          }
          if (swipeDir < 0) {
            swipeDir = -1;
            return;
          }
          preventDefault(e, false);
          if (props2.disabled || !initData.moved && Math.abs(lengthX.value) < distance) {
            return;
          }
          if (showSureRight.value) {
            closedSure.value = lengthX.value > 0 && initData.pos === 0;
            showSureRight.value = false;
          } else if (showSureLeft.value) {
            closedSure.value = lengthX.value < 0 && initData.pos === 0;
            showSureLeft.value = false;
          }
          initData.moving = true;
          initData.moved = true;
          var offset = range(initData.offset - lengthX.value, -initData.rightWidth, initData.leftWidth);
          initData.pos = offset;
        },
        onSwipeEnd: function onSwipeEnd(e) {
          if (props2.disabled) {
            return;
          }
          initData.moving = false;
          setTimeout(function () {
            closedSure.value = false;
          }, 0);
          end();
        }
      }),
      lengthX = _useSwipe.lengthX,
      lengthY = _useSwipe.lengthY,
      stop = _useSwipe.stop;
    var setPanelWidth = function setPanelWidth() {
      var _leftRef$value, _rightRef$value;
      var leftWidth = (_leftRef$value = leftRef.value) === null || _leftRef$value === void 0 ? void 0 : _leftRef$value.clientWidth;
      var rightWidth = (_rightRef$value = rightRef.value) === null || _rightRef$value === void 0 ? void 0 : _rightRef$value.clientWidth;
      initData.leftWidth = leftWidth > 0 ? leftWidth : 0;
      initData.rightWidth = rightWidth > 0 ? rightWidth : 0;
    };
    var classes = computed(function () {
      return ["".concat(name)];
    });
    onMounted( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            setPanelWidth();
            renderMenuStatus();
          case 2:
          case "end":
            return _context.stop();
        }
      }, _callee);
    })));
    onUnmounted(function () {
      var _stopClickAway$value;
      stop();
      (_stopClickAway$value = stopClickAway.value) === null || _stopClickAway$value === void 0 || _stopClickAway$value.call(stopClickAway);
    });
    watch(function () {
      return props2.opened;
    }, function () {
      return renderMenuStatus();
    }, {
      deep: true
    });
    watch(function () {
      return initData.pos;
    }, function (newVal, oldVal) {
      if (rightRef.value && (newVal < 0 || newVal === 0 && oldVal < 0)) {
        updateRightMenuPosStyle(newVal);
      } else if (leftRef.value && (newVal > 0 || newVal === 0 && oldVal > 0)) {
        updateLeftMenuPosStyle(newVal);
      }
    });
    var updateRightMenuPosStyle = function updateRightMenuPosStyle(value) {
      if (!rightRef.value) return;
      var pos = value || initData.pos;
      var children = rightRef.value.children || [];
      var wArr = [];
      for (var i = 0, len = children.length - 2; i < len; ++i) {
        var el = children[i];
        wArr.push((wArr[i - 1] || 0) + el.clientWidth);
      }
      for (var _i = 0, _len = children.length - 2; _i < _len; ++_i) {
        var _el = children[_i];
        var w = (1 + pos / initData.rightWidth) * (wArr[_i - 1] || 0);
        if (_el) {
          _el.style.transform = "translate3d(".concat(-w, "px, 0, 0)");
          _el.style.transition = initData.moving ? "none" : "transform .6s cubic-bezier(0.18, 0.89, 0.32, 1)";
        }
      }
    };
    var updateLeftMenuPosStyle = function updateLeftMenuPosStyle(value) {
      if (!leftRef.value) return;
      var pos = value || initData.pos;
      var children = leftRef.value.children || [];
      var wArr = [];
      for (var i = 0, len = children.length - 2; i < len; ++i) {
        var el = children[i];
        wArr.push((wArr[i - 1] || 0) + el.clientWidth);
      }
      for (var _i2 = 0, _len2 = children.length - 2; _i2 < _len2; ++_i2) {
        var _el2 = children[_i2];
        var w = (1 - pos / initData.leftWidth) * (wArr[_i2 - 1] || 0);
        if (_el2) {
          _el2.style.transform = "translate3d(".concat(w, "px, 0, 0)");
          _el2.style.transition = initData.moving ? "none" : "transform .6s cubic-bezier(0.18, 0.89, 0.32, 1)";
        }
      }
    };
    var stopClickAway = ref(useClickAway(swipeCell, function () {
      close();
    }, {
      detectIframe: true
    }));
    var renderMenuStatus = function renderMenuStatus() {
      if (isBoolean(props2.opened)) {
        if (props2.opened && initData.rightWidth > 0) {
          open("toLeft");
        } else if (props2.opened && initData.leftWidth > 0) {
          open("toRight");
        } else if (!props2.opened && (initData.leftWidth > 0 || initData.rightWidth > 0)) {
          close();
        }
      } else if (isArray(props2.opened)) {
        if (props2.opened[1] && initData.rightWidth > 0) {
          open("toLeft");
        } else if (props2.opened[0] && initData.leftWidth > 0) {
          open("toRight");
        } else if (!props2.opened[1] && initData.rightWidth > 0 || !props2.opened[0] && initData.leftWidth > 0) {
          close();
        }
      }
    };
    var end = function end() {
      if (props2.disabled) {
        return;
      }
      if (+initData.rightWidth > 0 && (-initData.offset < +initData.rightWidth && -initData.pos > +initData.rightWidth * threshold || -initData.offset === +initData.rightWidth && -initData.pos > +initData.rightWidth * (1 - threshold))) {
        open("toLeft");
      } else if (+initData.leftWidth > 0 && (initData.offset < +initData.leftWidth && initData.pos > +initData.leftWidth * threshold || initData.offset === +initData.leftWidth && initData.pos > +initData.leftWidth * (1 - threshold))) {
        open("toRight");
      } else if (initData.offset !== initData.pos) {
        close("force");
      }
    };
    var open = function open(direction) {
      var isOpen = initData.status === "open";
      initData.status = "open";
      if (direction === "toLeft") {
        initData.pos = -initData.rightWidth;
        if (initData.rightWidth && !isOpen) {
          var _props2$onChange;
          (_props2$onChange = props2.onChange) === null || _props2$onChange === void 0 || _props2$onChange.call(props2, "right");
        }
      } else {
        initData.pos = initData.leftWidth;
        if (initData.leftWidth && !isOpen) {
          var _props2$onChange2;
          (_props2$onChange2 = props2.onChange) === null || _props2$onChange2 === void 0 || _props2$onChange2.call(props2, "left");
        }
      }
    };
    var close = function close(type) {
      var _props2$onChange3;
      if (initData.status === "close" && type !== "force") {
        return;
      }
      sureMarginLeft.value = 0;
      sureMarginRight.value = 0;
      initData.status = "close";
      initData.pos = 0;
      (_props2$onChange3 = props2.onChange) === null || _props2$onChange3 === void 0 || _props2$onChange3.call(props2, void 0);
    };
    var handleClickBtn = function handleClickBtn(_ref2) {
      var action = _ref2.action,
        source = _ref2.source;
      var clickFn = function clickFn() {
        var _props2$onClick;
        if (autoBack) {
          close();
        }
        if (action.onClick) {
          action.onClick();
          return;
        }
        (_props2$onClick = props2.onClick) === null || _props2$onClick === void 0 || _props2$onClick.call(props2, {
          action: action,
          source: source
        });
      };
      if (action.sure) {
        showSure(action.sure, clickFn);
        return;
      }
      clickFn();
    };
    var handleCellClick = function handleCellClick(e) {
      if (initData.moved) {
        preventDefault(e, true);
      }
    };
    context.expose({
      showSure: showSure
    });
    return _objectSpread$1(_objectSpread$1({}, toRefs(props2)), {}, {
      swipeContent: swipeContent,
      swipeLeftMenu: swipeLeftMenu,
      swipeRightMenu: swipeRightMenu,
      initData: initData,
      classes: classes,
      wrapperRef: wrapperRef,
      wrapperStyle: wrapperStyle,
      swipeCell: swipeCell,
      leftRef: leftRef,
      rightRef: rightRef,
      handleClickBtn: handleClickBtn,
      end: end,
      handleCellClick: handleCellClick,
      showSureRight: showSureRight,
      showSureLeft: showSureLeft,
      sureLeftBgStyle: sureLeftBgStyle,
      sureRightBgStyle: sureRightBgStyle,
      sureRightStyle: sureRightStyle,
      sureLeftStyle: sureLeftStyle,
      sureRightRef: sureRightRef,
      sureLeftRef: sureLeftRef,
      sureRightContent: sureRightContent,
      sureLeftContent: sureLeftContent,
      showSure: showSure,
      handleSureClick: handleSureClick
    });
  }
});

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var _hoisted_1 = ["onClick"];
var _hoisted_2 = ["onClick"];
function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_t_node = resolveComponent("t-node");
  return openBlock(), createElementBlock("div", {
    ref: "swipeCell",
    class: normalizeClass(_ctx.classes),
    onClickCapture: _cache[2] || (_cache[2] = function () {
      return _ctx.handleCellClick && _ctx.handleCellClick.apply(_ctx, arguments);
    })
  }, [createElementVNode("div", {
    style: normalizeStyle(_ctx.wrapperStyle)
  }, [createElementVNode("div", {
    ref: "leftRef",
    class: normalizeClass(_ctx.classes + "__left"),
    style: normalizeStyle({
      width: _ctx.initData.leftWidth ? "".concat(_ctx.initData.leftWidth, "px") : "auto"
    })
  }, [_ctx.swipeLeftMenu ? (openBlock(), createBlock(_component_t_node, {
    key: 0,
    content: _ctx.swipeLeftMenu
  }, null, 8, ["content"])) : (openBlock(true), createElementBlock(Fragment, {
    key: 1
  }, renderList(_ctx.left, function (btn, index) {
    return openBlock(), createElementBlock("div", {
      key: index,
      class: normalizeClass([_ctx.classes + "__content", btn.className || ""]),
      style: normalizeStyle(btn.style || "height: 100%;"),
      onClick: function onClick($event) {
        return _ctx.handleClickBtn({
          action: _objectSpread({}, btn),
          source: "left"
        });
      }
    }, [btn.icon ? (openBlock(), createBlock(_component_t_node, {
      key: 0,
      class: normalizeClass(_ctx.classes + "__icon"),
      content: btn.icon
    }, null, 8, ["class", "content"])) : createCommentVNode("", true), btn.text ? (openBlock(), createElementBlock("span", {
      key: 1,
      class: normalizeClass(_ctx.classes + "__text")
    }, [createVNode(_component_t_node, {
      content: btn.text
    }, null, 8, ["content"])], 2)) : createCommentVNode("", true)], 14, _hoisted_1);
  }), 128)), createElementVNode("div", {
    style: normalizeStyle(_ctx.sureLeftBgStyle)
  }, null, 4), createElementVNode("div", {
    ref: "sureLeftRef",
    style: normalizeStyle(_ctx.sureLeftStyle),
    onClick: _cache[0] || (_cache[0] = function () {
      return _ctx.handleSureClick && _ctx.handleSureClick.apply(_ctx, arguments);
    })
  }, [_ctx.sureLeftContent ? (openBlock(), createBlock(_component_t_node, {
    key: 0,
    content: _ctx.sureLeftContent
  }, null, 8, ["content"])) : createCommentVNode("", true)], 4)], 6), _ctx.swipeContent ? (openBlock(), createBlock(_component_t_node, {
    key: 0,
    content: _ctx.swipeContent
  }, null, 8, ["content"])) : createCommentVNode("", true), createElementVNode("div", {
    ref: "rightRef",
    class: normalizeClass(_ctx.classes + "__right"),
    style: normalizeStyle({
      width: _ctx.initData.rightWidth ? "".concat(_ctx.initData.rightWidth, "px") : "auto"
    })
  }, [_ctx.swipeRightMenu ? (openBlock(), createBlock(_component_t_node, {
    key: 0,
    content: _ctx.swipeRightMenu
  }, null, 8, ["content"])) : (openBlock(true), createElementBlock(Fragment, {
    key: 1
  }, renderList(_ctx.right, function (btn, index) {
    return openBlock(), createElementBlock("div", {
      key: index,
      class: normalizeClass([_ctx.classes + "__content", btn.className || ""]),
      style: normalizeStyle(btn.style || "height: 100%;"),
      onClick: function onClick($event) {
        return _ctx.handleClickBtn({
          action: _objectSpread({}, btn),
          source: "right"
        });
      }
    }, [btn.icon ? (openBlock(), createBlock(_component_t_node, {
      key: 0,
      class: normalizeClass(_ctx.classes + "__icon"),
      content: btn.icon
    }, null, 8, ["class", "content"])) : createCommentVNode("", true), btn.text ? (openBlock(), createElementBlock("span", {
      key: 1,
      class: normalizeClass(_ctx.classes + "__text")
    }, [createVNode(_component_t_node, {
      content: btn.text
    }, null, 8, ["content"])], 2)) : createCommentVNode("", true)], 14, _hoisted_2);
  }), 128)), createElementVNode("div", {
    style: normalizeStyle(_ctx.sureRightBgStyle)
  }, null, 4), createElementVNode("div", {
    ref: "sureRightRef",
    style: normalizeStyle(_ctx.sureRightStyle),
    onClick: _cache[1] || (_cache[1] = function () {
      return _ctx.handleSureClick && _ctx.handleSureClick.apply(_ctx, arguments);
    })
  }, [_ctx.sureRightContent ? (openBlock(), createBlock(_component_t_node, {
    key: 0,
    content: _ctx.sureRightContent
  }, null, 8, ["content"])) : createCommentVNode("", true)], 4)], 6)], 4)], 34);
}

script.render = render;

export { script as default };
//# sourceMappingURL=swipe-cell.js.map
