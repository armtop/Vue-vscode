import { TdStickyProps } from '../sticky/type';
import { TdTabPanelProps } from './type';
declare const _default: import("vue").DefineComponent<{
    animation: {
        type: import("vue").PropType<import("./type").TabAnimation>;
    };
    bottomLineMode: {
        type: import("vue").PropType<"fixed" | "auto" | "full">;
        default: "fixed" | "auto" | "full";
        validator(val: "fixed" | "auto" | "full"): boolean;
    };
    list: {
        type: import("vue").PropType<TdTabPanelProps[]>;
    };
    showBottomLine: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: import("vue").PropType<"medium" | "large">;
        default: "medium" | "large";
        validator(val: "medium" | "large"): boolean;
    };
    spaceEvenly: {
        type: BooleanConstructor;
        default: boolean;
    };
    sticky: BooleanConstructor;
    stickyProps: {
        type: import("vue").PropType<TdStickyProps>;
    };
    swipeable: {
        type: BooleanConstructor;
        default: boolean;
    };
    theme: {
        type: import("vue").PropType<"line" | "card" | "tag">;
        default: "line" | "card" | "tag";
        validator(val: "line" | "card" | "tag"): boolean;
    };
    value: {
        type: import("vue").PropType<import("./type").TabValue>;
        default: any;
    };
    modelValue: {
        type: import("vue").PropType<import("./type").TabValue>;
        default: any;
    };
    defaultValue: {
        type: import("vue").PropType<import("./type").TabValue>;
    };
    onChange: import("vue").PropType<(value: import("./type").TabValue, label: string) => void>;
    onClick: import("vue").PropType<(value: import("./type").TabValue, label: string) => void>;
    onScroll: import("vue").PropType<(scrollTop: number, isFixed: boolean) => void>;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    animation: {
        type: import("vue").PropType<import("./type").TabAnimation>;
    };
    bottomLineMode: {
        type: import("vue").PropType<"fixed" | "auto" | "full">;
        default: "fixed" | "auto" | "full";
        validator(val: "fixed" | "auto" | "full"): boolean;
    };
    list: {
        type: import("vue").PropType<TdTabPanelProps[]>;
    };
    showBottomLine: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: import("vue").PropType<"medium" | "large">;
        default: "medium" | "large";
        validator(val: "medium" | "large"): boolean;
    };
    spaceEvenly: {
        type: BooleanConstructor;
        default: boolean;
    };
    sticky: BooleanConstructor;
    stickyProps: {
        type: import("vue").PropType<TdStickyProps>;
    };
    swipeable: {
        type: BooleanConstructor;
        default: boolean;
    };
    theme: {
        type: import("vue").PropType<"line" | "card" | "tag">;
        default: "line" | "card" | "tag";
        validator(val: "line" | "card" | "tag"): boolean;
    };
    value: {
        type: import("vue").PropType<import("./type").TabValue>;
        default: any;
    };
    modelValue: {
        type: import("vue").PropType<import("./type").TabValue>;
        default: any;
    };
    defaultValue: {
        type: import("vue").PropType<import("./type").TabValue>;
    };
    onChange: import("vue").PropType<(value: import("./type").TabValue, label: string) => void>;
    onClick: import("vue").PropType<(value: import("./type").TabValue, label: string) => void>;
    onScroll: import("vue").PropType<(scrollTop: number, isFixed: boolean) => void>;
}>>, {
    size: "medium" | "large";
    theme: "line" | "card" | "tag";
    sticky: boolean;
    value: import("./type").TabValue;
    modelValue: import("./type").TabValue;
    bottomLineMode: "fixed" | "auto" | "full";
    showBottomLine: boolean;
    spaceEvenly: boolean;
    swipeable: boolean;
}, {}>;
export default _default;
