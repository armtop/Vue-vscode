/**
 * tdesign v1.2.3
 * (c) 2024 TDesign Group
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var _slicedToArray = require('@babel/runtime/helpers/slicedToArray');
var vue = require('vue');
var tdesignIconsVueNext = require('tdesign-icons-vue-next');
var config = require('../config.js');
var radio_props = require('./props.js');
var form_hooks = require('../form/hooks.js');
var hooks_useClass = require('../hooks/useClass.js');
var hooks_tnode = require('../hooks/tnode.js');
var shared_functions = require('../shared/functions.js');
var shared_useVModel_index = require('../shared/useVModel/index.js');
var radio_radioGroupProps = require('./radio-group-props.js');
var shared_useDefault_index = require('../shared/useDefault/index.js');
var shared_component = require('../shared/component.js');
require('../config-provider/useConfig.js');
require('lodash/isFunction');
require('lodash/cloneDeep');
require('lodash/isString');
require('../config-provider/context.js');
require('lodash/mergeWith');
require('lodash/merge');
require('lodash/isArray');
require('../_common/js/global-config/mobile/default-config.js');
require('../_common/js/global-config/mobile/locale/zh_CN.js');
require('../_chunks/dep-191173f8.js');
require('@babel/runtime/helpers/typeof');
require('../_chunks/dep-2088457f.js');
require('dayjs');
require('lodash/camelCase');
require('lodash/kebabCase');
require('../hooks/render-tnode.js');
require('lodash/isEmpty');
require('lodash/isObject');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);
var _slicedToArray__default = /*#__PURE__*/_interopDefaultLegacy(_slicedToArray);

var prefix$1 = config["default"].prefix;
var Radio = vue.defineComponent({
  name: "".concat(prefix$1, "-radio"),
  props: radio_props["default"],
  setup: function setup(props2) {
    var renderTNodeContent = hooks_tnode.useContent();
    var renderTNodeJSX = hooks_tnode.useTNodeJSX();
    var radioClass = hooks_useClass.usePrefixClass("radio");
    var _toRefs = vue.toRefs(props2),
      checked = _toRefs.checked,
      modelValue = _toRefs.modelValue,
      block = _toRefs.block;
    var _useVModel = shared_useVModel_index.useVModel(checked, modelValue, props2.defaultChecked, props2.onChange, "checked"),
      _useVModel2 = _slicedToArray__default["default"](_useVModel, 2),
      innerChecked = _useVModel2[0],
      setInnerChecked = _useVModel2[1];
    var rootGroupProps = vue.inject("rootGroupProps", {});
    var rootGroupValue = vue.inject("rootGroupValue", {});
    var rootGroupChange = vue.inject("rootGroupChange", shared_functions.NOOP);
    var groupDisabled = vue.computed(function () {
      return rootGroupProps === null || rootGroupProps === void 0 ? void 0 : rootGroupProps.disabled;
    });
    var formDisabled = form_hooks.useFormDisabled(groupDisabled);
    var isDisabled = vue.computed(function () {
      if (formDisabled.value == null && "disabled" in rootGroupProps) return rootGroupProps.disabled;
      return formDisabled.value;
    });
    var radioChecked = vue.computed(function () {
      return innerChecked.value || props2.value === (rootGroupValue === null || rootGroupValue === void 0 ? void 0 : rootGroupValue.value);
    });
    var finalBorderless = vue.computed(function () {
      if (props2.borderless == null && "borderless" in rootGroupProps) return rootGroupProps.borderless;
      return props2.borderless;
    });
    var finalPlacement = vue.computed(function () {
      if (props2.placement == null && "placement" in rootGroupProps) return rootGroupProps.placement;
      return props2.placement || "left";
    });
    var finalAllowUncheck = vue.computed(function () {
      if (props2.allowUncheck == null && "allowUncheck" in rootGroupProps) return rootGroupProps.allowUncheck;
      return props2.allowUncheck;
    });
    var inputProps = vue.computed(function () {
      return {
        name: rootGroupProps.name || props2.name,
        checked: radioChecked.value,
        disabled: isDisabled.value,
        value: props2.value
      };
    });
    var iconContent = vue.computed(function () {
      var _props2$icon;
      if (((_props2$icon = props2.icon) === null || _props2$icon === void 0 ? void 0 : _props2$icon.length) === 2) {
        var iconIndex = radioChecked.value ? 0 : 1;
        return props2.icon[iconIndex];
      }
      return null;
    });
    var radioClasses = vue.computed(function () {
      return ["".concat(radioClass.value), "".concat(radioClass.value, "--").concat(finalPlacement.value), _defineProperty__default["default"]({}, "".concat(radioClass.value, "--block"), block.value)];
    });
    var titleClasses = vue.computed(function () {
      return ["".concat(radioClass.value, "__title"), _defineProperty__default["default"]({}, "".concat(radioClass.value, "__title--disabled"), isDisabled.value)];
    });
    var iconClass = vue.computed(function () {
      return ["".concat(radioClass.value, "__icon"), "".concat(radioClass.value, "__icon--").concat(finalPlacement.value), _defineProperty__default["default"](_defineProperty__default["default"]({}, "".concat(radioClass.value, "__icon--checked"), radioChecked.value), "".concat(radioClass.value, "__icon--disabled"), isDisabled.value)];
    });
    var radioContentChange = function radioContentChange(e) {
      e.stopPropagation();
      if (props2.contentDisabled) {
        return;
      }
      radioOrgChange(e);
    };
    var radioOrgChange = function radioOrgChange(e) {
      if (isDisabled.value) {
        return;
      }
      if (rootGroupChange) {
        rootGroupChange(finalAllowUncheck.value && radioChecked.value ? "" : props2.value, e);
      } else {
        if (!finalAllowUncheck.value && radioChecked.value) return;
        setInnerChecked(!radioChecked.value, {
          e: e
        });
      }
    };
    var readerIcon = function readerIcon() {
      if (radioChecked.value) {
        if (props2.icon === "circle") {
          return vue.createVNode(tdesignIconsVueNext.CheckCircleFilledIcon, {
            "class": "".concat(radioClass.value, "__icon-wrap")
          }, null);
        }
        if (props2.icon === "line") {
          return vue.createVNode(tdesignIconsVueNext.CheckIcon, {
            "class": "".concat(radioClass.value, "__icon-wrap")
          }, null);
        }
        if (props2.icon === "dot") {
          return vue.createVNode("div", {
            "class": ["".concat(radioClass.value, "__icon-").concat(props2.icon), _defineProperty__default["default"]({}, "".concat(radioClass.value, "__icon-").concat(props2.icon, "--disabled"), isDisabled.value)]
          }, null);
        }
      } else {
        if (props2.icon === "circle" || props2.icon === "dot") {
          return vue.createVNode("div", {
            "class": ["".concat(radioClass.value, "__icon-circle"), _defineProperty__default["default"]({}, "".concat(radioClass.value, "__icon-circle--disabled"), isDisabled.value)]
          }, null);
        }
        if (props2.icon === "line") {
          return vue.createVNode("div", {
            "class": "placeholder"
          }, null);
        }
      }
    };
    return function () {
      var label = renderTNodeContent("default", "label");
      var content = renderTNodeJSX("content");
      return vue.createVNode("div", {
        "class": radioClasses.value,
        "onClick": radioOrgChange
      }, [vue.createVNode("input", vue.mergeProps({
        "type": "radio",
        "class": "".concat(radioClass.value, "__original")
      }, inputProps.value), null), vue.createVNode("div", {
        "class": iconClass.value
      }, [readerIcon(), iconContent.value]), vue.createVNode("div", {
        "class": "".concat(radioClass.value, "__content"),
        "onClick": radioContentChange
      }, [label && vue.createVNode("span", {
        "class": titleClasses.value,
        "style": "-webkit-line-clamp: ".concat(props2.maxLabelRow)
      }, [label]), content && vue.createVNode("div", {
        "class": ["".concat(radioClass.value, "__description"), _defineProperty__default["default"]({}, "".concat(radioClass.value, "__description"), isDisabled.value)],
        "style": "-webkit-line-clamp: ".concat(props2.maxContentRow)
      }, [content])]), !finalBorderless.value && vue.createVNode("div", {
        "class": "".concat(radioClass.value, "__border ").concat(radioClass.value, "__border--").concat(finalPlacement.value)
      }, null)]);
    };
  }
});

var prefix = config["default"].prefix;
var _RadioGroup = vue.defineComponent({
  name: "".concat(prefix, "-radio-group"),
  props: radio_radioGroupProps["default"],
  setup: function setup(props2, context) {
    var renderTNodeJSX = hooks_tnode.useTNodeJSX();
    var radioGroupClass = hooks_useClass.usePrefixClass("radio-group");
    var _useDefault = shared_useDefault_index.useDefault(props2, context.emit, "value", "change"),
      _useDefault2 = _slicedToArray__default["default"](_useDefault, 2),
      groupValue = _useDefault2[0],
      setGroupValue = _useDefault2[1];
    var keys = vue.computed(function () {
      return props2.keys;
    });
    var groupOptions = vue.computed(function () {
      var _props2$options;
      return (_props2$options = props2.options) === null || _props2$options === void 0 ? void 0 : _props2$options.map(function (option) {
        var opt = option;
        if (typeof option === "string" || typeof option === "number") {
          opt = {
            value: option,
            label: option.toString()
          };
        }
        return opt;
      });
    });
    var handleRadioChange = function handleRadioChange(val, e) {
      if (props2.allowUncheck && val === groupValue.value) {
        setGroupValue("", {
          e: e
        });
      } else {
        setGroupValue(val, {
          e: e
        });
      }
    };
    vue.provide("rootGroupProps", props2);
    vue.provide("rootGroupValue", groupValue);
    vue.provide("rootGroupChange", handleRadioChange);
    return function () {
      return vue.createVNode("div", {
        "class": radioGroupClass.value,
        "role": "radiogroup"
      }, [props2.options && groupOptions.value.map(function (opt, index) {
        var _keys$value$value, _keys$value, _opt$disabled, _keys$value$value2, _keys$value2, _keys$value$label, _keys$value3;
        return vue.createVNode(Radio, {
          "name": props2.name,
          "icon": props2.icon,
          "checked": groupValue.value === opt[(_keys$value$value = (_keys$value = keys.value) === null || _keys$value === void 0 ? void 0 : _keys$value.value) !== null && _keys$value$value !== void 0 ? _keys$value$value : "value"],
          "disabled": (_opt$disabled = opt === null || opt === void 0 ? void 0 : opt.disabled) !== null && _opt$disabled !== void 0 ? _opt$disabled : props2.disabled,
          "value": opt[(_keys$value$value2 = (_keys$value2 = keys.value) === null || _keys$value2 === void 0 ? void 0 : _keys$value2.value) !== null && _keys$value$value2 !== void 0 ? _keys$value$value2 : "value"],
          "label": opt[(_keys$value$label = (_keys$value3 = keys.value) === null || _keys$value3 === void 0 ? void 0 : _keys$value3.label) !== null && _keys$value$label !== void 0 ? _keys$value$label : "label"],
          "placement": props2.placement
        }, null);
      }), !props2.options && renderTNodeJSX("default")]);
    };
  }
});

var RadioGroup = shared_component.withInstall(_RadioGroup);
var _Radio = shared_component.withInstall(Radio);

exports.RadioGroup = RadioGroup;
exports["default"] = _Radio;
//# sourceMappingURL=index.js.map
