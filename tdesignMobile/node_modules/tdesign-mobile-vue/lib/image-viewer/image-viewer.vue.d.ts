import { h } from 'vue';
declare const _default: import("vue").DefineComponent<{
    closeBtn: {
        type: import("vue").PropType<boolean | ((h: typeof h) => import("../common").SlotReturnValue)>;
        default: boolean;
    };
    deleteBtn: {
        type: import("vue").PropType<boolean | ((h: typeof h) => import("../common").SlotReturnValue)>;
        default: boolean;
    };
    images: {
        type: import("vue").PropType<string[]>;
        default: () => string[];
    };
    index: {
        type: NumberConstructor;
        default: any;
    };
    defaultIndex: {
        type: NumberConstructor;
    };
    maxZoom: {
        type: NumberConstructor;
        default: number;
    };
    showIndex: BooleanConstructor;
    visible: {
        type: BooleanConstructor;
        default: any;
    };
    modelValue: {
        type: BooleanConstructor;
        default: any;
    };
    defaultVisible: BooleanConstructor;
    onClose: import("vue").PropType<(context: {
        trigger: "overlay" | "close-btn";
        visible: Boolean;
        index: Number;
    }) => void>;
    onDelete: import("vue").PropType<(index: Number) => void>;
    onIndexChange: import("vue").PropType<(index: number, context: {
        trigger: "next" | "prev";
    }) => void>;
}, {
    prefix: string;
    closeNode: import("vue").ComputedRef<any>;
    deleteNode: import("vue").ComputedRef<any>;
    currentIndex: import("vue").WritableComputedRef<number>;
    imageTransform: import("vue").ComputedRef<string>;
    imageTransitionDuration: import("vue").ComputedRef<"transition-duration: 0s" | "transition-duration: 0.3s">;
    visible: import("vue").WritableComputedRef<unknown>;
    handleClose: (e: Event, trigger: string) => void;
    handleDelete: () => void;
    onSwiperChange: (index: number, context: any) => void;
    onImgLoad: (e: Event, index: number) => void;
    onTransitionEnd: (index: number) => void;
    onTransitionStart: (index: number) => void;
    dblTapZooming: import("vue").Ref<boolean>;
    zooming: import("vue").Ref<boolean>;
    scale: import("vue").Ref<number>;
    touchIndex: import("vue").Ref<number>;
    dragging: import("vue").Ref<boolean>;
    draggedX: import("vue").Ref<number>;
    draggedY: import("vue").Ref<number>;
    extraDraggedX: import("vue").Ref<number>;
    swiperRootRef: import("vue").Ref<any>;
    swiperItemRefs: import("vue").Ref<any>;
    rootRef: import("vue").Ref<any>;
    disabled: import("vue").Ref<boolean>;
    name: string;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "close" | "update:visible" | "index-change" | "update:index" | "delete")[], "update:modelValue" | "close" | "delete" | "update:visible" | "index-change" | "update:index", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    closeBtn: {
        type: import("vue").PropType<boolean | ((h: typeof h) => import("../common").SlotReturnValue)>;
        default: boolean;
    };
    deleteBtn: {
        type: import("vue").PropType<boolean | ((h: typeof h) => import("../common").SlotReturnValue)>;
        default: boolean;
    };
    images: {
        type: import("vue").PropType<string[]>;
        default: () => string[];
    };
    index: {
        type: NumberConstructor;
        default: any;
    };
    defaultIndex: {
        type: NumberConstructor;
    };
    maxZoom: {
        type: NumberConstructor;
        default: number;
    };
    showIndex: BooleanConstructor;
    visible: {
        type: BooleanConstructor;
        default: any;
    };
    modelValue: {
        type: BooleanConstructor;
        default: any;
    };
    defaultVisible: BooleanConstructor;
    onClose: import("vue").PropType<(context: {
        trigger: "overlay" | "close-btn";
        visible: Boolean;
        index: Number;
    }) => void>;
    onDelete: import("vue").PropType<(index: Number) => void>;
    onIndexChange: import("vue").PropType<(index: number, context: {
        trigger: "next" | "prev";
    }) => void>;
}>> & {
    "onUpdate:modelValue"?: (...args: any[]) => any;
    onClose?: (...args: any[]) => any;
    "onUpdate:visible"?: (...args: any[]) => any;
    onDelete?: (...args: any[]) => any;
    "onIndex-change"?: (...args: any[]) => any;
    "onUpdate:index"?: (...args: any[]) => any;
}, {
    visible: boolean;
    modelValue: boolean;
    index: number;
    closeBtn: boolean | ((h: typeof h) => import("../common").SlotReturnValue);
    defaultVisible: boolean;
    deleteBtn: boolean | ((h: typeof h) => import("../common").SlotReturnValue);
    images: string[];
    maxZoom: number;
    showIndex: boolean;
}, {}>;
export default _default;
