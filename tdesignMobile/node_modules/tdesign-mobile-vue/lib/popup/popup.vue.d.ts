import { h } from 'vue';
declare const _default: import("vue").DefineComponent<{
    attach: {
        type: import("vue").PropType<import("../common").AttachNode>;
        default: string;
    };
    closeBtn: {
        type: import("vue").PropType<boolean | ((h: typeof h) => import("../common").SlotReturnValue)>;
    };
    closeOnOverlayClick: {
        type: BooleanConstructor;
        default: boolean;
    };
    destroyOnClose: BooleanConstructor;
    overlayProps: {
        type: import("vue").PropType<object>;
        default: () => {};
    };
    placement: {
        type: import("vue").PropType<"" | "left" | "center" | "right" | "top" | "bottom">;
        validator(val: "" | "left" | "center" | "right" | "top" | "bottom"): boolean;
    };
    preventScrollThrough: {
        type: BooleanConstructor;
        default: boolean;
    };
    showOverlay: {
        type: BooleanConstructor;
        default: boolean;
    };
    transitionName: {
        type: StringConstructor;
        default: string;
    };
    visible: {
        type: BooleanConstructor;
        default: any;
    };
    modelValue: {
        type: BooleanConstructor;
        default: any;
    };
    defaultVisible: BooleanConstructor;
    zIndex: {
        type: NumberConstructor;
    };
    onClose: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onClosed: import("vue").PropType<() => void>;
    onOpen: import("vue").PropType<() => void>;
    onOpened: import("vue").PropType<() => void>;
    onVisibleChange: import("vue").PropType<(visible: boolean, trigger: import("./type").PopupSource) => void>;
}, {
    name: string;
    to: import("vue").ComputedRef<Element>;
    wrapperVisible: import("vue").Ref<boolean>;
    innerVisible: import("vue").Ref<boolean>;
    currentVisible: import("vue").WritableComputedRef<boolean>;
    rootStyles: import("vue").ComputedRef<{
        constructor: Function;
        toString(): string;
        toLocaleString(): string;
        valueOf(): Object;
        hasOwnProperty(v: PropertyKey): boolean;
        isPrototypeOf(v: Object): boolean;
        propertyIsEnumerable(v: PropertyKey): boolean;
    }>;
    contentClasses: import("vue").ComputedRef<{
        [x: string]: boolean;
    }>;
    contentTransitionName: import("vue").ComputedRef<string>;
    closeBtnNode: import("vue").ComputedRef<any>;
    afterEnter: () => void;
    afterLeave: () => void;
    handleOverlayClick: (args: {
        e: MouseEvent;
    }) => void;
    handleCloseClick: (e: MouseEvent) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("open" | "update:modelValue" | "close" | "opened" | "closed" | "visible-change" | "update:visible")[], "open" | "update:modelValue" | "close" | "closed" | "opened" | "visible-change" | "update:visible", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    attach: {
        type: import("vue").PropType<import("../common").AttachNode>;
        default: string;
    };
    closeBtn: {
        type: import("vue").PropType<boolean | ((h: typeof h) => import("../common").SlotReturnValue)>;
    };
    closeOnOverlayClick: {
        type: BooleanConstructor;
        default: boolean;
    };
    destroyOnClose: BooleanConstructor;
    overlayProps: {
        type: import("vue").PropType<object>;
        default: () => {};
    };
    placement: {
        type: import("vue").PropType<"" | "left" | "center" | "right" | "top" | "bottom">;
        validator(val: "" | "left" | "center" | "right" | "top" | "bottom"): boolean;
    };
    preventScrollThrough: {
        type: BooleanConstructor;
        default: boolean;
    };
    showOverlay: {
        type: BooleanConstructor;
        default: boolean;
    };
    transitionName: {
        type: StringConstructor;
        default: string;
    };
    visible: {
        type: BooleanConstructor;
        default: any;
    };
    modelValue: {
        type: BooleanConstructor;
        default: any;
    };
    defaultVisible: BooleanConstructor;
    zIndex: {
        type: NumberConstructor;
    };
    onClose: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onClosed: import("vue").PropType<() => void>;
    onOpen: import("vue").PropType<() => void>;
    onOpened: import("vue").PropType<() => void>;
    onVisibleChange: import("vue").PropType<(visible: boolean, trigger: import("./type").PopupSource) => void>;
}>> & {
    "onUpdate:modelValue"?: (...args: any[]) => any;
    onClose?: (...args: any[]) => any;
    onClosed?: (...args: any[]) => any;
    onOpen?: (...args: any[]) => any;
    onOpened?: (...args: any[]) => any;
    "onVisible-change"?: (...args: any[]) => any;
    "onUpdate:visible"?: (...args: any[]) => any;
}, {
    visible: boolean;
    modelValue: boolean;
    attach: import("../common").AttachNode;
    overlayProps: object;
    preventScrollThrough: boolean;
    closeOnOverlayClick: boolean;
    destroyOnClose: boolean;
    showOverlay: boolean;
    transitionName: string;
    defaultVisible: boolean;
}, {}>;
export default _default;
