{"version":3,"file":"index.js","sources":["../../src/grid/grid.tsx","../../src/grid/grid-item.tsx","../../src/grid/index.ts"],"sourcesContent":["import { defineComponent, provide, toRefs, computed } from 'vue';\n\nimport config from '../config';\nimport props from './props';\n\nconst { prefix } = config;\nconst name = `${prefix}-grid`;\n\nexport default defineComponent({\n  name,\n  props,\n  setup(props, { slots }) {\n    const { column, gutter, border, align } = toRefs(props);\n    const rootStyle = computed(() => {\n      if (column.value === 0) return [];\n      const ans = [\n        `padding: ${gutter.value}px;`,\n        `grid-template-columns: repeat(${column.value}, 1fr)`,\n        `grid-gap: ${gutter.value}px`,\n      ];\n\n      return ans;\n    });\n\n    provide('grid', {\n      column,\n      border,\n      align,\n      gutter,\n    });\n\n    const classes = computed(() => [\n      `${name}`,\n      {\n        [`${name}--card`]: props.theme === 'card',\n        [`${name}--auto-size`]: props.column === 0,\n        [`${name}--bordered`]: props.border && !props.gutter,\n      },\n    ]);\n    return () => (\n      <div class={classes.value} style={rootStyle.value}>\n        {slots.default?.()}\n      </div>\n    );\n  },\n});\n","import { defineComponent, getCurrentInstance, computed, inject } from 'vue';\nimport isObject from 'lodash/isObject';\nimport isString from 'lodash/isString';\nimport isFunction from 'lodash/isFunction';\n\nimport config from '../config';\nimport props from './grid-item-props';\nimport { useTNodeJSX } from '../hooks/tnode';\nimport TImage from '../image';\nimport TBadge from '../badge';\n\nconst { prefix } = config;\nconst name = `${prefix}-grid-item`;\n\nexport default defineComponent({\n  name,\n  components: { TImage, TBadge },\n  props,\n  setup(props, context) {\n    const renderTNodeJSX = useTNodeJSX();\n    const { column, border, align, gutter } = inject<any>('grid');\n\n    const rootStyle = computed(() => {\n      const percent = column.value > 0 ? `${100 / +column.value}%` : 0;\n      const style: Record<string, any> = {\n        textAlign: ['center', 'left'].includes(align.value) ? align.value : 'center',\n      };\n      if (percent !== 0) {\n        style.flexBasis = percent;\n      }\n      return style;\n    });\n\n    const size = computed(() => {\n      if (column.value > 4 || !column.value) return 'small';\n      return column.value < 4 ? 'large' : 'middle';\n    });\n\n    const realImage = computed(() => {\n      if (isString(props.image)) return { src: props.image };\n      if (isObject(props.image) && !isFunction(props.image) && !context.slots.image) {\n        return props.image;\n      }\n      return null;\n    });\n\n    const gridItemClasses = computed(() => [\n      `${name}`,\n      `${name}--${props.layout}`,\n      { [`${name}--bordered`]: border.value, [`${name}--surround`]: border.value && gutter.value },\n    ]);\n\n    return () => {\n      const renderImage = () =>\n        realImage.value ? <t-image shape=\"round\" {...realImage.value} /> : renderTNodeJSX('image');\n\n      return (\n        <div class={gridItemClasses.value} style={rootStyle.value}>\n          <div class={`${name}__image ${name}__image--${size.value}`}>\n            {props.badge ? <t-badge {...(props.badge as Object)}>{renderImage()}</t-badge> : renderImage()}\n          </div>\n\n          <div class={`${name}__content ${name}__content--${props.layout}`}>\n            <div class={`${name}__title ${name}__title--${size.value}`}>{renderTNodeJSX('text')}</div>\n            <div class={`${name}__description ${name}__description--${props.layout}`}>\n              {renderTNodeJSX('description')}\n            </div>\n          </div>\n        </div>\n      );\n    };\n  },\n});\n","import LocalGrid from './grid';\nimport LocalGridItem from './grid-item';\nimport { withInstall, WithInstallType } from '../shared';\n\nimport { TdGridItemProps, TdGridProps } from './type';\nimport './style';\n\nexport * from './type';\nexport type GridProps = TdGridProps;\nexport type GridItemProps = TdGridItemProps;\n\nexport const Grid: WithInstallType<typeof LocalGrid> = withInstall(LocalGrid);\nexport const GridItem: WithInstallType<typeof LocalGridItem> = withInstall(LocalGridItem);\n"],"names":["prefix","config","name","defineComponent","props","setup","slots","_ref","_toRefs","toRefs","column","gutter","border","align","rootStyle","computed","value","ans","concat","provide","classes","_defineProperty","theme","_slots$default","_createVNode","default","call","_isSlot","s","Object","prototype","toString","_isVNode","components","TImage","TBadge","context","renderTNodeJSX","useTNodeJSX","_inject","inject","percent","style","textAlign","includes","flexBasis","size","realImage","isString","image","src","isObject","isFunction","gridItemClasses","layout","_slot","renderImage","_resolveComponent","_mergeProps","badge","_default","Grid","withInstall","LocalGrid","GridItem","LocalGridItem"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA,IAAQA,WAAWC,iBAAA,CAAXD;AACR,IAAME,mBAAUF,QAAA,EAAA,OAAA,CAAA,CAAA;AAEhB,gBAAeG,mBAAgB,CAAA;AAC7BD,EAAAA,IAAA,EAAAA,MAAA;AACAE,EAAAA,KAAA,EAAAA,qBAAA;AACAC,EAAAA,KAAMD,EAAAA,SAAAA,KAAAA,CAAAA,MAAAA,EAAAA,IAAAA,EAAkB;AAAA,IAAA,IAATE,KAAA,GAAAC,IAAA,CAAAD,KAAA,CAAA;AACb,IAAA,IAAAE,OAAA,GAA0CC,WAAOL,MAAK,CAAA;MAA9CM,MAAQ,GAAAF,OAAA,CAARE,MAAQ;MAAAC,MAAA,GAAAH,OAAA,CAAAG,MAAA;MAAQC,iBAAAA;MAAQC,KAAM,GAAAL,OAAA,CAANK,KAAM,CAAA;AAChC,IAAA,IAAAC,SAAA,GAAYC,aAAS,YAAM;AAC/B,MAAA,IAAIL,OAAOM,KAAU,KAAA,CAAA,EAAG,OAAO,EAAC,CAAA;MAChC,IAAMC,GAAM,GAAA,CAAAC,WAAAA,CAAAA,MAAA,CACEP,MAAO,CAAAK,KAAA,EAAAE,KAAAA,CAAAA,EAAAA,gCAAAA,CAAAA,MAAA,CACcR,MAAO,CAAAM,KAAA,EAAAE,QAAAA,CAAAA,EAAAA,YAAAA,CAAAA,MAAA,CAC3BP,MAAO,CAAAK,KAAA,EACtB,IAAA,CAAA,CAAA,CAAA;AAEO,MAAA,OAAAC,GAAA,CAAA;AACT,KAAC,CAAA,CAAA;IAEDE,WAAA,CAAQ,MAAQ,EAAA;AACdT,MAAAA,MAAA,EAAAA,MAAA;AACAE,MAAAA,MAAA,EAAAA,MAAA;AACAC,MAAAA,KAAA,EAAAA,KAAA;AACAF,MAAAA,MAAA,EAAAA,MAAAA;AACF,KAAC,CAAA,CAAA;IAEK,IAAAS,OAAA,GAAUL,aAAS,YAAA;AAAA,MAAA,OAAM,IAAAG,MAAA,CAC1BhB,MAAA,CAAAmB,EAAAA,mCAAA,CAAAA,mCAAA,CAAAA,mCAAA,CAAAH,EAAAA,EAAAA,EAAAA,CAAAA,MAAA,CAEGhB,MAAeE,EAAAA,QAAAA,CAAAA,EAAAA,MAAAA,CAAMkB,KAAU,KAAA,MAAA,CAAA,EAAA,EAAA,CAAAJ,MAAA,CAC/BhB,MAAoBE,kBAAAA,MAAAA,CAAMM,MAAW,KAAA,CAAA,MAAAQ,MAAA,CACrChB,MAAA,EAAmBE,YAAAA,CAAAA,EAAAA,MAAM,CAAAQ,MAAA,IAAU,CAACR,MAAM,CAAAO,MAAA,CAEjD,CAAA,CAAA;KAAA,CAAA,CAAA;IACD,OAAO,YAAA;AAAA,MAAA,IAAAY,cAAA,CAAA;AAAA,MAAA,OAAAC,eAAA,CAAA,KAAA,EAAA;QAAA,OACOJ,EAAAA,OAAQ,CAAAJ,KAAA;AAAA,QAAA,OAAA,EAAcF,SAAA,CAAUE,KAAAA;AACzC,OAAA,EAAA,CAAA,CAAAO,cAAA,GAAAjB,KAAA,CAAMmB,OAAU,MAAA,IAAA,IAAAF,cAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAhBA,cAAA,CAAAG,IAAA,CAAApB,KAAgB,CAAA,CAAA,CAAA,CAAA;KADlB,CAAA;AAIL,GAAA;AACF,CAAC,CAAA;;ACpCkB,SAAAqB,QAAAC,CAAA,EAAA;AAAA,EAAA,OAAA,OAAAA,CAAA,KAAA,UAAA,IAAAC,MAAA,CAAAC,SAAA,CAAAC,QAAA,CAAAL,IAAA,CAAAE,CAAA,CAAAI,KAAAA,iBAAAA,IAAAA,CAAAA,WAAA,CAAAJ,CAAA,CAAA,CAAA;AAAA,CAAA;AAEnB,IAAQ5B,SAAWC,iBAAA,CAAXD;AACR,IAAME,iBAAUF,MAAA,EAAA,YAAA,CAAA,CAAA;AAEhB,oBAAeG,mBAAgB,CAAA;AAC7BD,EAAAA,IAAA,EAAAA,IAAA;AACA+B,EAAAA,UAAA,EAAY;AAAEC,IAAAA,MAAA,EAAAA,sBAAA;AAAQC,IAAAA,MAAO,EAAPA,sBAAAA;GAAO;AAC7B/B,EAAAA,KAAA,EAAAA,6BAAA;AACAC,EAAAA,KAAA,EAAAA,SAAAA,KAAAA,CAAMD,QAAOgC,OAAS,EAAA;AACpB,IAAA,IAAMC,iBAAiBC,uBAAY,EAAA,CAAA;AACnC,IAAA,IAAAC,OAAA,GAA0CC,WAAY,MAAM,CAAA;MAApD9B,MAAQ,GAAA6B,OAAA,CAAR7B,MAAQ;MAAAE,MAAA,GAAA2B,OAAA,CAAA3B,MAAA;MAAQC,gBAAAA;MAAOF,MAAO,GAAA4B,OAAA,CAAP5B,MAAO,CAAA;AAEhC,IAAA,IAAAG,SAAA,GAAYC,aAAS,YAAM;AACzB,MAAA,IAAA0B,OAAA,GAAU/B,OAAOM,KAAQ,GAAA,CAAA,GAAA,EAAA,CAAAE,MAAA,CAAO,GAAM,GAAA,CAACR,OAAOM,KAAW,SAAA,CAAA,CAAA;AAC/D,MAAA,IAAM0B,KAA6B,GAAA;AACjCC,QAAAA,SAAA,EAAW,CAAC,QAAA,EAAU,MAAM,CAAA,CAAEC,SAAS/B,KAAM,CAAAG,KAAK,CAAI,GAAAH,KAAA,CAAMG,KAAQ,GAAA,QAAA;OACtE,CAAA;MACA,IAAIyB,YAAY,CAAG,EAAA;QACjBC,KAAA,CAAMG,SAAY,GAAAJ,OAAA,CAAA;AACpB,OAAA;AACO,MAAA,OAAAC,KAAA,CAAA;AACT,KAAC,CAAA,CAAA;AAEK,IAAA,IAAAI,IAAA,GAAO/B,aAAS,YAAM;AAC1B,MAAA,IAAIL,MAAO,CAAAM,KAAA,GAAQ,CAAK,IAAA,CAACN,MAAO,CAAAM,KAAA,EAAc,OAAA,OAAA,CAAA;MACvC,OAAAN,MAAA,CAAOM,KAAQ,GAAA,CAAA,GAAI,OAAU,GAAA,QAAA,CAAA;AACtC,KAAC,CAAA,CAAA;AAEK,IAAA,IAAA+B,SAAA,GAAYhC,aAAS,YAAM;AAC3B,MAAA,IAAAiC,4BAAA,CAAS5C,OAAM6C,KAAK,CAAA,EAAU,OAAA;QAAEC,GAAK9C,EAAAA,MAAAA,CAAM6C,KAAAA;OAAM,CAAA;MACrD,IAAIE,4BAAS/C,CAAAA,MAAAA,CAAM6C,KAAK,CAAA,IAAK,CAACG,8BAAA,CAAWhD,MAAM,CAAA6C,KAAK,CAAK,IAAA,CAACb,OAAQ,CAAA9B,KAAA,CAAM2C,KAAO,EAAA;QAC7E,OAAO7C,MAAM,CAAA6C,KAAA,CAAA;AACf,OAAA;AACO,MAAA,OAAA,IAAA,CAAA;AACT,KAAC,CAAA,CAAA;IAEK,IAAAI,eAAA,GAAkBtC,aAAS,YAAA;AAAA,MAAA,OAAM,IAAAG,MAAA,CAClChB,IAAA,CAAA,EAAA,EAAA,CAAAgB,MAAA,CACAhB,mBAASE,MAAM,CAAAkD,MAAA,CAAAjC,EAAAA,mCAAA,CAAAA,mCAAA,CAAA,EAAA,EAAA,EAAA,CAAAH,MAAA,CACZhB,IAAA,EAAmBU,YAAAA,CAAAA,EAAAA,MAAO,CAAAI,KAAA,MAAAE,MAAA,CAAWhB,IAAmB,EAAA,YAAA,CAAA,EAAAU,MAAA,CAAOI,KAAS,IAAAL,MAAA,CAAOK,KAAM,CAC5F,CAAA,CAAA;KAAA,CAAA,CAAA;AAED,IAAA,OAAO,YAAM;AAAA,MAAA,IAAAuC,KAAA,CAAA;AACX,MAAA,IAAMC,WAAc,GAAA,SAAdA,WAAcA,GAAA;QAAA,OAClBT,SAAU,CAAA/B,KAAA,GAAAQ,eAAA,CAAAiC,oBAAA,aAAAC,cAAA,CAAA;UAAA,OAAuB,EAAA,OAAA;AAAA,SAAA,EAAYX,SAAU,CAAA/B,KAAA,WAAYqB,cAAA,CAAe,OAAO,CAAA,CAAA;AAAA,OAAA,CAAA;AAE3F,MAAA,OAAAb,eAAA,CAAA,KAAA,EAAA;QAAA,OACc6B,EAAAA,eAAgB,CAAArC,KAAA;AAAA,QAAA,OAAA,EAAcF,SAAU,CAAAE,KAAAA;AAAA,OAAA,EAAA,CAAAQ,eAAA,CAAA,KAAA,EAAA;AAAA,QAAA,OAAA,EAAA,EAAA,CAAAN,MAAA,CACnChB,yBAAeA,IAAgB,EAAA,WAAA,CAAA,CAAAgB,MAAA,CAAA4B,IAAA,CAAK9B;OAChDZ,EAAAA,CAAAA,MAAM,CAAAuD,KAAA,GAAAnC,eAAA,CAAAiC,oBAAA,aAAsBrD,MAAAA,CAAMuD,uBAAmBH,WAAY,EAAA,IAAAD,KAAA,GAAA;AAAA9B,QAAAA,OAAA,WAAAmC,QAAA,GAAA;AAAA,UAAA,OAAA,CAAAL,KAAA,CAAA,CAAA;AAAA,SAAA;AAAA,OAAA,CAAA,GAAeC,WAAA;2BAGpEtD,IAAA,EAAA,YAAA,CAAA,CAAAgB,MAAA,CAAiBhB,4BAAkBE,MAAM,CAAAkD,MAAA,CAAA;AAAA,OAAA,EAAA,CAAA9B,eAAA,CAAA,KAAA,EAAA;AAAA,QAAA,OAAA,EAAA,EAAA,CAAAN,MAAA,CACvChB,IAAA,EAAA,UAAA,CAAA,CAAAgB,MAAA,CAAehB,IAAgB,EAAA,WAAA,CAAA,CAAAgB,MAAA,CAAA4B,IAAA,CAAK9B,KAAU,CAAA;AAAA,OAAA,EAAA,CAAAqB,cAAA,CAAe,MAAM,CAAA,IAAAb,eAAA,CAAA,KAAA,EAAA;AAAA,QAAA,OAAA,EAAA,EAAA,CAAAN,MAAA,CACnEhB,IAAA,EAAA,gBAAA,CAAA,CAAAgB,MAAA,CAAqBhB,IAAsBE,EAAAA,iBAAAA,CAAAA,CAAAA,MAAAA,CAAAA,MAAAA,CAAMkD,MAC7D,CAAA;OAAAjB,EAAAA,CAAAA,cAAA,CAAe,aAAa,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;KAKvC,CAAA;AACF,GAAA;AACF,CAAC,CAAA;;IC7DYwB,IAAA,GAA0CC,6BAAYC,SAAS,EAAA;IAC/DC,QAAA,GAAkDF,6BAAYG,aAAa;;;;;"}