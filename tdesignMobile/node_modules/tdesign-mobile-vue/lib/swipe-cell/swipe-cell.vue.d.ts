import { StyleValue } from 'vue';
import { SwipeActionItem } from './type';
export interface SwipeInitData {
    moving: boolean;
    moved: boolean;
    leftWidth: number;
    rightWidth: number;
    offset: number;
    pos: number;
    status: 'open' | 'close';
}
declare const _default: import("vue").DefineComponent<{
    content: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    default: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    disabled: BooleanConstructor;
    left: {
        type: import("vue").PropType<SwipeActionItem[]>;
    };
    opened: {
        type: import("vue").PropType<boolean | boolean[]>;
        default: boolean;
    };
    right: {
        type: import("vue").PropType<SwipeActionItem[]>;
    };
    onChange: import("vue").PropType<(value: string) => void>;
    onClick: import("vue").PropType<(action: SwipeActionItem, source: import("./type").SwipeSource) => void>;
}, {
    swipeContent: import("vue").ComputedRef<any>;
    swipeLeftMenu: import("vue").ComputedRef<any>;
    swipeRightMenu: import("vue").ComputedRef<any>;
    initData: SwipeInitData;
    classes: import("vue").ComputedRef<string[]>;
    wrapperRef: import("vue").Ref<HTMLElement>;
    wrapperStyle: import("vue").ComputedRef<StyleValue>;
    swipeCell: import("vue").Ref<HTMLElement>;
    leftRef: import("vue").Ref<HTMLElement>;
    rightRef: import("vue").Ref<HTMLElement>;
    handleClickBtn: ({ action, source }: {
        action: SwipeActionItem;
        source: String;
    }) => void;
    end: () => void;
    handleCellClick: (e: Event) => void;
    showSureRight: import("vue").Ref<boolean>;
    showSureLeft: import("vue").Ref<boolean>;
    sureLeftBgStyle: import("vue").ComputedRef<import("vue").CSSProperties>;
    sureRightBgStyle: import("vue").ComputedRef<import("vue").CSSProperties>;
    sureRightStyle: import("vue").ComputedRef<import("vue").CSSProperties>;
    sureLeftStyle: import("vue").ComputedRef<import("vue").CSSProperties>;
    sureRightRef: import("vue").Ref<HTMLElement>;
    sureLeftRef: import("vue").Ref<HTMLElement>;
    sureRightContent: import("vue").Ref<any>;
    sureLeftContent: import("vue").Ref<any>;
    showSure: (sure: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue), onClick?: () => void) => void;
    handleSureClick: import("vue").Ref<() => void>;
    disabled: import("vue").Ref<boolean>;
    opened: import("vue").Ref<boolean | boolean[]>;
    left: import("vue").Ref<SwipeActionItem[]>;
    right: import("vue").Ref<SwipeActionItem[]>;
    content: import("vue").Ref<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    default: import("vue").Ref<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    onChange: import("vue").Ref<((value: string) => void) & ((...args: any[]) => any)>;
    onClick: import("vue").Ref<((action: SwipeActionItem, source: import("./type").SwipeSource) => void) & ((...args: any[]) => any)>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "click")[], "change" | "click", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    content: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    default: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    disabled: BooleanConstructor;
    left: {
        type: import("vue").PropType<SwipeActionItem[]>;
    };
    opened: {
        type: import("vue").PropType<boolean | boolean[]>;
        default: boolean;
    };
    right: {
        type: import("vue").PropType<SwipeActionItem[]>;
    };
    onChange: import("vue").PropType<(value: string) => void>;
    onClick: import("vue").PropType<(action: SwipeActionItem, source: import("./type").SwipeSource) => void>;
}>> & {
    onChange?: (...args: any[]) => any;
    onClick?: (...args: any[]) => any;
}, {
    disabled: boolean;
    opened: boolean | boolean[];
}, {}>;
export default _default;
