import { h } from 'vue';
declare const _default: import("vue").DefineComponent<{
    allowHalf: BooleanConstructor;
    color: {
        type: import("vue").PropType<string | string[]>;
        default: string;
    };
    count: {
        type: NumberConstructor;
        default: number;
    };
    disabled: BooleanConstructor;
    gap: {
        type: NumberConstructor;
        default: number;
    };
    icon: {
        type: import("vue").PropType<(Function | ((h: typeof h) => import("../common").SlotReturnValue))[]>;
    };
    showText: BooleanConstructor;
    size: {
        type: StringConstructor;
        default: string;
    };
    texts: {
        type: import("vue").PropType<string[]>;
        default: () => string[];
    };
    value: {
        type: NumberConstructor;
        default: any;
    };
    modelValue: {
        type: NumberConstructor;
        default: any;
    };
    defaultValue: {
        type: NumberConstructor;
        default: number;
    };
    variant: {
        type: import("vue").PropType<"filled" | "outline">;
        default: "filled" | "outline";
        validator(val: "filled" | "outline"): boolean;
    };
    onChange: import("vue").PropType<(value: number) => void>;
}, {
    name: import("vue").Ref<string>;
    rootClasses: import("vue").ComputedRef<(string | {
        [x: string]: boolean;
    })[]>;
    classes: (n: number) => {
        [x: string]: boolean;
    };
    rateWrapper: import("vue").Ref<HTMLElement>;
    actualVal: import("vue").WritableComputedRef<number>;
    regSize: (val: string | number) => string | number;
    unitConvert: (value: number | string) => number;
    colors: import("vue").ComputedRef<{
        '--td-rate-selected-color': string;
        '--td-rate-unselected-color': string;
    } | {
        '--td-rate-selected-color': string;
        '--td-rate-unselected-color'?: undefined;
    } | {
        '--td-rate-selected-color'?: undefined;
        '--td-rate-unselected-color'?: undefined;
    }>;
    rateText: import("vue").ComputedRef<any>;
    onClick: (event: MouseEvent) => void;
    onTouchstart: (e: TouchEvent) => void;
    onTouchmove: (e: TouchEvent) => void;
    onTouchEnd: (e: TouchEvent) => void;
    tipsVisible: import("vue").Ref<boolean>;
    tipsLeft: import("vue").Ref<number>;
    actionType: import("vue").Ref<"move" | "tap">;
    onSelect: (value: number) => void;
    popoverValue: import("vue").Ref<number>;
    ratePopoverRef: import("vue").Ref<HTMLElement>;
    iconComponent: (n: number, value: number) => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "update:value" | "change")[], "update:modelValue" | "update:value" | "change", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    allowHalf: BooleanConstructor;
    color: {
        type: import("vue").PropType<string | string[]>;
        default: string;
    };
    count: {
        type: NumberConstructor;
        default: number;
    };
    disabled: BooleanConstructor;
    gap: {
        type: NumberConstructor;
        default: number;
    };
    icon: {
        type: import("vue").PropType<(Function | ((h: typeof h) => import("../common").SlotReturnValue))[]>;
    };
    showText: BooleanConstructor;
    size: {
        type: StringConstructor;
        default: string;
    };
    texts: {
        type: import("vue").PropType<string[]>;
        default: () => string[];
    };
    value: {
        type: NumberConstructor;
        default: any;
    };
    modelValue: {
        type: NumberConstructor;
        default: any;
    };
    defaultValue: {
        type: NumberConstructor;
        default: number;
    };
    variant: {
        type: import("vue").PropType<"filled" | "outline">;
        default: "filled" | "outline";
        validator(val: "filled" | "outline"): boolean;
    };
    onChange: import("vue").PropType<(value: number) => void>;
}>> & {
    onChange?: (...args: any[]) => any;
    "onUpdate:modelValue"?: (...args: any[]) => any;
    "onUpdate:value"?: (...args: any[]) => any;
}, {
    count: number;
    size: string;
    color: string | string[];
    gap: number;
    disabled: boolean;
    value: number;
    modelValue: number;
    variant: "filled" | "outline";
    defaultValue: number;
    texts: string[];
    allowHalf: boolean;
    showText: boolean;
}, {}>;
export default _default;
