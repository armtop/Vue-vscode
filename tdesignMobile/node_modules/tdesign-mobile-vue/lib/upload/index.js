/**
 * tdesign v1.2.3
 * (c) 2024 TDesign Group
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var vue = require('vue');
var tdesignIconsVueNext = require('tdesign-icons-vue-next');
var image_index = require('../image/index.js');
var imageViewer_index = require('../image-viewer/index.js');
var upload_props = require('./props.js');
var config = require('../config.js');
var upload_hooks_useUpload = require('./hooks/useUpload.js');
var hooks_tnode = require('../hooks/tnode.js');
var configProvider_useConfig = require('../config-provider/useConfig.js');
var shared_component = require('../shared/component.js');
require('../image/image.js');
require('@babel/runtime/helpers/slicedToArray');
require('@vueuse/core');
require('../loading/index.js');
require('../_common/js/loading/circle-adapter.js');
require('../_common/js/utils/set-style.js');
require('../_common/js/utils/helper.js');
require('@babel/runtime/helpers/toConsumableArray');
require('@babel/runtime/helpers/objectWithoutProperties');
require('lodash/isString');
require('lodash/isNull');
require('lodash/isUndefined');
require('lodash/isNumber');
require('lodash/isArray');
require('../hooks/useClass.js');
require('../loading/props.js');
require('lodash/isFunction');
require('lodash/cloneDeep');
require('../config-provider/context.js');
require('lodash/mergeWith');
require('lodash/merge');
require('../_common/js/global-config/mobile/default-config.js');
require('../_common/js/global-config/mobile/locale/zh_CN.js');
require('../_chunks/dep-191173f8.js');
require('@babel/runtime/helpers/typeof');
require('../_chunks/dep-2088457f.js');
require('dayjs');
require('lodash/camelCase');
require('lodash/kebabCase');
require('../hooks/render-tnode.js');
require('lodash/isEmpty');
require('lodash/isObject');
require('../image/props.js');
require('../shared/render-tnode.js');
require('../shared/render.js');
require('../image-viewer/image-viewer.js');
require('../image-viewer/props.js');
require('../swiper/index.js');
require('../swipe-cell/useSwipe.js');
require('../shared/dom.js');
require('../shared/util.js');
require('../swiper/props.js');
require('../shared/useVModel/index.js');
require('../shared/useGesture/index.js');
require('@use-gesture/vanilla');
require('../shared/useDefault/index.js');
require('../_common/js/upload/main.js');
require('@babel/runtime/helpers/toArray');
require('../_common/js/upload/utils.js');
require('../_common/js/log/log.js');
require('../_common/js/upload/xhr.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty__default["default"](e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var prefix = config["default"].prefix;
var name = "".concat(prefix, "-upload");
var Upload = vue.defineComponent({
  name: name,
  components: {
    AddIcon: tdesignIconsVueNext.AddIcon,
    LoadingIcon: tdesignIconsVueNext.LoadingIcon,
    CloseCircleIcon: tdesignIconsVueNext.CloseCircleIcon,
    CloseIcon: tdesignIconsVueNext.CloseIcon,
    TImage: image_index["default"],
    TImageViewer: imageViewer_index["default"]
  },
  props: upload_props["default"],
  emits: ["update:files", "update:modelValue", "change", "fail", "preview", "progress", "remove", "success", "select-change", "validate", "click-upload"],
  setup: function setup(props, context) {
    var _useConfig = configProvider_useConfig.useConfig("upload"),
      globalConfig = _useConfig.globalConfig;
    var _useUpload = upload_hooks_useUpload["default"](props),
      toUploadFiles = _useUpload.toUploadFiles,
      uploadValue = _useUpload.uploadValue,
      displayFiles = _useUpload.displayFiles,
      sizeOverLimitMessage = _useUpload.sizeOverLimitMessage,
      uploading = _useUpload.uploading,
      inputRef = _useUpload.inputRef,
      disabled = _useUpload.disabled,
      xhrReq = _useUpload.xhrReq,
      uploadFilePercent = _useUpload.uploadFilePercent,
      uploadFiles = _useUpload.uploadFiles,
      onFileChange = _useUpload.onFileChange,
      onNormalFileChange = _useUpload.onNormalFileChange,
      onInnerRemove = _useUpload.onInnerRemove,
      cancelUpload = _useUpload.cancelUpload;
    var renderTNodeJSX = hooks_tnode.useTNodeJSX();
    var renderContent = hooks_tnode.useContent();
    var showViewer = vue.ref(false);
    var initialIndex = vue.ref(0);
    var handlePreview = function handlePreview(e, file, index) {
      var _props$onPreview;
      initialIndex.value = index;
      showViewer.value = true;
      (_props$onPreview = props.onPreview) === null || _props$onPreview === void 0 || _props$onPreview.call(props, {
        e: e,
        file: file,
        index: index
      });
    };
    var triggerUpload = function triggerUpload(e) {
      var _props$onClickUpload;
      var input = inputRef.value;
      if (disabled !== null && disabled !== void 0 && disabled.value) return;
      input.click();
      (_props$onClickUpload = props.onClickUpload) === null || _props$onClickUpload === void 0 || _props$onClickUpload.call(props, {
        e: e
      });
    };
    var previewImgs = vue.computed(function () {
      return displayFiles.value.map(function (item) {
        return item.url;
      });
    });
    var handleImageClose = function handleImageClose(_ref) {
      var visible = _ref.visible;
      showViewer.value = visible;
    };
    var renderStatus = function renderStatus(file) {
      if (file.status === "fail" || file.status === "progress") {
        return vue.createVNode("div", {
          "class": "".concat(name, "__progress-mask")
        }, [file.status === "progress" ? vue.createVNode(vue.Fragment, null, [vue.createVNode(vue.resolveComponent("loading-icon"), {
          "class": "".concat(name, "__progress-loading"),
          "size": "24"
        }, null), vue.createVNode("div", {
          "class": "".concat(name, "__progress-text")
        }, [file.percent ? "".concat(file.percent, "%") : globalConfig.value.progress.uploadingText])]) : vue.createVNode(vue.resolveComponent("close-circle-icon"), {
          "size": "24"
        }, null), file.status === "fail" && vue.createVNode("div", {
          "class": "".concat(name, "__progress-text")
        }, [globalConfig.value.progress.failText])]);
      }
    };
    var content = function content() {
      var _displayFiles$value;
      var defaultContent = renderContent("default", "content");
      var addContent = renderTNodeJSX("addContent");
      if (props.max === 0 || props.max > 0 && ((_displayFiles$value = displayFiles.value) === null || _displayFiles$value === void 0 ? void 0 : _displayFiles$value.length) < props.max) {
        if (defaultContent) {
          return vue.createVNode("div", {
            "onClick": triggerUpload
          }, [defaultContent]);
        }
        return vue.createVNode("div", {
          "class": "".concat(name, "__item ").concat(name, "__item--add"),
          "onClick": triggerUpload
        }, [vue.createVNode("div", {
          "class": "".concat(name, "__add-icon")
        }, [addContent || vue.createVNode(vue.resolveComponent("add-icon"), {
          "size": "28"
        }, null)])]);
      }
    };
    return _objectSpread(_objectSpread({}, vue.toRefs(props)), {}, {
      name: name,
      globalConfig: globalConfig,
      initialIndex: initialIndex,
      showViewer: showViewer,
      previewImgs: previewImgs,
      toUploadFiles: toUploadFiles,
      uploadValue: uploadValue,
      displayFiles: displayFiles,
      sizeOverLimitMessage: sizeOverLimitMessage,
      uploading: uploading,
      inputRef: inputRef,
      disabled: disabled,
      xhrReq: xhrReq,
      handlePreview: handlePreview,
      triggerUpload: triggerUpload,
      uploadFilePercent: uploadFilePercent,
      uploadFiles: uploadFiles,
      onFileChange: onFileChange,
      onNormalFileChange: onNormalFileChange,
      onInnerRemove: onInnerRemove,
      cancelUpload: cancelUpload,
      handleImageClose: handleImageClose,
      renderStatus: renderStatus,
      content: content
    });
  },
  render: function render() {
    var _this = this;
    return vue.createVNode("div", {
      "class": "".concat(name)
    }, [this.displayFiles.map(function (file, index) {
      return vue.createVNode("div", {
        "key": index,
        "class": "".concat(name, "__item")
      }, [file.url && vue.createVNode(vue.resolveComponent("t-image"), vue.mergeProps({
        "class": "".concat(name, "__image"),
        "shape": "round"
      }, _this.$props.imageProps, {
        "src": file.url,
        "onClick": function onClick(e) {
          return _this.handlePreview(e, file, index);
        }
      }), null), _this.renderStatus(file), vue.createVNode(vue.resolveComponent("close-icon"), {
        "class": "".concat(name, "__delete-btn"),
        "onClick": function onClick(_ref2) {
          var e = _ref2.e;
          return _this.onInnerRemove({
            e: e,
            file: file,
            index: index
          });
        }
      }, null)]);
    }), this.content(), vue.createVNode("input", {
      "ref": "inputRef",
      "value": this.$props.files,
      "type": "file",
      "multiple": this.$props.multiple,
      "hidden": true,
      "accept": this.$props.accept,
      "onChange": this.onNormalFileChange
    }, null), vue.createVNode(vue.resolveComponent("t-image-viewer"), {
      "visible": this.showViewer,
      "images": this.previewImgs,
      "index": this.initialIndex,
      "onClose": this.handleImageClose
    }, null)]);
  }
});

var _Upload = shared_component.withInstall(Upload);

exports["default"] = _Upload;
//# sourceMappingURL=index.js.map
