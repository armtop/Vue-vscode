/**
 * tdesign v1.2.3
 * (c) 2024 TDesign Group
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var vue = require('vue');
var tdesignIconsVueNext = require('tdesign-icons-vue-next');
var config = require('../config.js');
var navbar_props = require('./props.js');
var hooks_useClass = require('../hooks/useClass.js');
var hooks_tnode = require('../hooks/tnode.js');
var shared_component = require('../shared/component.js');
require('../config-provider/useConfig.js');
require('lodash/isFunction');
require('lodash/cloneDeep');
require('lodash/isString');
require('../config-provider/context.js');
require('lodash/mergeWith');
require('lodash/merge');
require('lodash/isArray');
require('../_common/js/global-config/mobile/default-config.js');
require('../_common/js/global-config/mobile/locale/zh_CN.js');
require('../_chunks/dep-191173f8.js');
require('@babel/runtime/helpers/typeof');
require('../_chunks/dep-2088457f.js');
require('dayjs');
require('lodash/camelCase');
require('lodash/kebabCase');
require('../hooks/render-tnode.js');
require('lodash/isEmpty');
require('lodash/isObject');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);

var prefix = config["default"].prefix;
var name = "".concat(prefix, "-navbar");
var Navbar = vue.defineComponent({
  name: name,
  components: {
    TChevronLeftIcon: tdesignIconsVueNext.ChevronLeftIcon
  },
  props: navbar_props["default"],
  emits: ["left-click", "right-click"],
  setup: function setup(props2, _ref) {
    var slots = _ref.slots;
    var navbarClass = hooks_useClass.usePrefixClass("navbar");
    var renderTNodeJSX = hooks_tnode.useTNodeJSX();
    var animationSuffix = vue.computed(function () {
      return props2.animation ? "-animation" : "";
    });
    var navClass = vue.computed(function () {
      return [navbarClass.value, _defineProperty__default["default"]({}, "".concat(navbarClass.value, "--fixed"), props2.fixed), props2.visible ? "".concat(navbarClass.value, "--visible").concat(animationSuffix.value) : "".concat(navbarClass.value, "--hide").concat(animationSuffix.value)];
    });
    var navStyle = vue.computed(function () {
      return "position: ".concat(props2.fixed ? "fixed" : "relative", ";");
    });
    var handleLeftClick = function handleLeftClick() {
      var _props2$onLeftClick;
      (_props2$onLeftClick = props2.onLeftClick) === null || _props2$onLeftClick === void 0 || _props2$onLeftClick.call(props2);
    };
    var handleRightClick = function handleRightClick() {
      var _props2$onRightClick;
      (_props2$onRightClick = props2.onRightClick) === null || _props2$onRightClick === void 0 || _props2$onRightClick.call(props2);
    };
    return function () {
      var fixed = props2.fixed,
        titleMaxLength = props2.titleMaxLength,
        title = props2.title,
        leftArrow = props2.leftArrow;
      var renderRightContent = function renderRightContent() {
        var rightContent = renderTNodeJSX("right");
        if (!rightContent) {
          return null;
        }
        return vue.createVNode("div", {
          "class": "".concat(navbarClass.value, "__right"),
          "onClick": handleRightClick
        }, [rightContent]);
      };
      var renderCapsuleContent = function renderCapsuleContent() {
        var capsuleContent = renderTNodeJSX("capsule");
        if (!capsuleContent) {
          return null;
        }
        return vue.createVNode("div", {
          "class": "".concat(navbarClass.value, "__capsule")
        }, [capsuleContent]);
      };
      var renderTitleContent = function renderTitleContent() {
        var isStringTitle = typeof title === "string" && !slots.title;
        var titleContent = renderTNodeJSX("title");
        if (!titleContent) {
          return null;
        }
        if (titleMaxLength != null && title) {
          if (titleMaxLength <= 0) {
            console.warn("titleMaxLength must be greater than 0");
          } else {
            titleContent = title.length <= titleMaxLength ? title : "".concat(title.slice(0, titleMaxLength), "...");
          }
        }
        return isStringTitle ? vue.createVNode("span", {
          "class": "".concat(navbarClass.value, "__center-title")
        }, [titleContent]) : titleContent;
      };
      return vue.createVNode("div", {
        "class": navClass.value,
        "style": navStyle.value
      }, [fixed && vue.createVNode("div", {
        "class": "".concat(navbarClass.value, "____placeholder")
      }, null), vue.createVNode("div", {
        "class": "".concat(navbarClass.value, "__content")
      }, [vue.createVNode("div", {
        "class": "".concat(navbarClass.value, "__left"),
        "onClick": handleLeftClick
      }, [leftArrow && vue.createVNode(vue.resolveComponent("t-chevron-left-icon"), {
        "class": "".concat(navbarClass.value, "__left-arrow")
      }, null), renderTNodeJSX("left"), renderCapsuleContent()]), vue.createVNode("div", {
        "class": "".concat(navbarClass.value, "__center")
      }, [renderTitleContent()]), renderRightContent()])]);
    };
  }
});

var _Navbar = shared_component.withInstall(Navbar);

exports["default"] = _Navbar;
//# sourceMappingURL=index.js.map
