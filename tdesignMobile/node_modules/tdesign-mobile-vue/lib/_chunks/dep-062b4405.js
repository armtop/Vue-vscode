/**
 * tdesign v1.2.3
 * (c) 2024 TDesign Group
 * @license MIT
 */

'use strict';

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var vue = require('vue');
var config = require('../config.js');
var picker_props = require('../picker/props.js');
var _slicedToArray = require('@babel/runtime/helpers/slicedToArray');
var isString = require('lodash/isString');
var isBoolean = require('lodash/isBoolean');
var hooks_tnode = require('../hooks/tnode.js');
var picker_picker_class = require('../picker/picker.class.js');
var configProvider_useConfig = require('../config-provider/useConfig.js');
var shared_useVModel_index = require('../shared/useVModel/index.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);
var _slicedToArray__default = /*#__PURE__*/_interopDefaultLegacy(_slicedToArray);
var isString__default = /*#__PURE__*/_interopDefaultLegacy(isString);
var isBoolean__default = /*#__PURE__*/_interopDefaultLegacy(isBoolean);

var prefix$2 = config["default"].prefix;
var name$2 = "".concat(prefix$2, "-picker-item");
var PickerItem = vue.defineComponent({
  name: name$2,
  props: {
    options: {
      type: Array
    },
    value: {
      type: [String, Number],
      default: void 0
    },
    renderLabel: {
      type: Function,
      default: void 0
    },
    onPick: {
      type: Function,
      default: void 0
    }
  },
  emits: ["pick"],
  setup: function setup(props, context) {
    var picker = null;
    var root = vue.ref();
    var getIndexByValue = function getIndexByValue(val) {
      var defaultIndex = 0;
      if (val !== void 0) {
        var _props$options;
        defaultIndex = (_props$options = props.options) === null || _props$options === void 0 ? void 0 : _props$options.findIndex(function (item) {
          return item.value === val;
        });
      }
      return defaultIndex < 0 ? 0 : defaultIndex;
    };
    var className = vue.computed(function () {
      return "".concat(name$2);
    });
    var itemClassName = vue.computed(function () {
      return ["".concat(name$2, "__item")];
    });
    var setIndex = function setIndex(index) {
      if (picker) {
        picker.updateItems();
        picker.updateIndex(index, {
          isChange: false
        });
      }
    };
    var setValue = function setValue(value) {
      if (picker) {
        picker.updateItems();
        picker.updateIndex(getIndexByValue(value), {
          isChange: false
        });
      }
    };
    var setOptions = function setOptions() {
      var _picker;
      (_picker = picker) === null || _picker === void 0 || _picker.update();
    };
    var setUpdateItems = function setUpdateItems() {
      var _picker2;
      (_picker2 = picker) === null || _picker2 === void 0 || _picker2.updateItems();
    };
    context.expose({
      setIndex: setIndex,
      setValue: setValue,
      setOptions: setOptions,
      setUpdateItems: setUpdateItems
    });
    vue.onMounted(function () {
      if (root.value) {
        picker = new picker_picker_class["default"]({
          el: root.value,
          defaultIndex: getIndexByValue(props.value) || 0,
          onChange: function onChange(index) {
            var _props$onPick;
            var curItem = props.options[index];
            var changeValue = {
              value: curItem.value,
              index: index
            };
            (_props$onPick = props.onPick) === null || _props$onPick === void 0 || _props$onPick.call(props, changeValue);
          }
        });
      }
    });
    vue.watch(function () {
      return props.options;
    }, function () {
      var _picker3;
      (_picker3 = picker) === null || _picker3 === void 0 || _picker3.updateItems();
    }, {
      flush: "post",
      deep: true
    });
    return function () {
      return vue.createVNode("ul", {
        "ref": root,
        "class": className.value
      }, [(props.options || []).map(function (option, index) {
        return vue.createVNode("li", {
          "key": index,
          "class": itemClassName.value
        }, [props.renderLabel ? props.renderLabel(option) : option.label]);
      })]);
    };
  }
});

var prefix$1 = config["default"].prefix;
var name$1 = "".concat(prefix$1, "-picker");
var getIndexFromColumns = function getIndexFromColumns(column, value) {
  if (!value) return 0;
  return column === null || column === void 0 ? void 0 : column.findIndex(function (item) {
    return item.value === value;
  });
};
var _Picker = vue.defineComponent({
  name: name$1,
  components: {
    PickerItem: PickerItem
  },
  props: picker_props["default"],
  emits: ["change", "cancel", "pick", "update:modelValue", "update:value"],
  setup: function setup(props) {
    var _pickerValue$value;
    var _useConfig = configProvider_useConfig.useConfig("picker"),
      globalConfig = _useConfig.globalConfig;
    var renderTNodeJSX = hooks_tnode.useTNodeJSX();
    var _toRefs = vue.toRefs(props),
      value = _toRefs.value,
      modelValue = _toRefs.modelValue;
    var _useVModel = shared_useVModel_index.useVModel(value, modelValue, props.defaultValue, props.onChange),
      _useVModel2 = _slicedToArray__default["default"](_useVModel, 2),
      _useVModel2$ = _useVModel2[0],
      pickerValue = _useVModel2$ === void 0 ? vue.ref([]) : _useVModel2$,
      setPickerValue = _useVModel2[1];
    var getDefaultText = function getDefaultText(prop, defaultText) {
      if (isString__default["default"](prop)) return prop;
      if (isBoolean__default["default"](prop) && prop) return defaultText;
      return "";
    };
    var confirmButtonText = vue.computed(function () {
      return getDefaultText(props.confirmBtn, globalConfig.value.confirm);
    });
    var cancelButtonText = vue.computed(function () {
      return getDefaultText(props.cancelBtn, globalConfig.value.cancel);
    });
    var curValueArray = vue.ref(((_pickerValue$value = pickerValue.value) === null || _pickerValue$value === void 0 ? void 0 : _pickerValue$value.map(function (item) {
      return item;
    })) || []);
    var realColumns = vue.computed(function () {
      if (typeof props.columns === "function") {
        return props.columns(curValueArray.value);
      }
      return props.columns;
    });
    var curIndexArray = realColumns.value.map(function (item, index) {
      var _pickerValue$value2;
      return getIndexFromColumns(item, (_pickerValue$value2 = pickerValue.value) === null || _pickerValue$value2 === void 0 ? void 0 : _pickerValue$value2[index]);
    });
    var pickerItemInstanceArray = vue.ref([]);
    var setPickerItemRef = function setPickerItemRef(item, index) {
      pickerItemInstanceArray.value[index] = item;
    };
    var handleConfirm = function handleConfirm(e) {
      var _props$onConfirm;
      var target = realColumns.value.map(function (item, index) {
        return item[curIndexArray[index]];
      });
      var label = target.map(function (item) {
        return item.label;
      });
      var value2 = target.map(function (item) {
        return item.value;
      });
      setPickerValue(value2);
      (_props$onConfirm = props.onConfirm) === null || _props$onConfirm === void 0 || _props$onConfirm.call(props, value2, {
        index: curIndexArray,
        label: label,
        e: e
      });
    };
    var handleCancel = function handleCancel(e) {
      var _props$onCancel;
      pickerItemInstanceArray.value.forEach(function (item, index) {
        item === null || item === void 0 || item.setIndex(curIndexArray[index]);
      });
      (_props$onCancel = props.onCancel) === null || _props$onCancel === void 0 || _props$onCancel.call(props, {
        e: e
      });
    };
    var handlePick = function handlePick(context, column) {
      var _realColumns$value, _props$onPick;
      var index = context.index;
      curIndexArray[column] = index;
      curValueArray.value[column] = (_realColumns$value = realColumns.value) === null || _realColumns$value === void 0 || (_realColumns$value = _realColumns$value[column][index]) === null || _realColumns$value === void 0 ? void 0 : _realColumns$value.value;
      (_props$onPick = props.onPick) === null || _props$onPick === void 0 || _props$onPick.call(props, curValueArray.value, {
        index: index,
        column: column
      });
    };
    vue.watch(pickerValue, function () {
      curValueArray.value = pickerValue.value.map(function (item) {
        return item;
      });
    });
    vue.watch([realColumns, curValueArray], function () {
      realColumns.value.forEach(function (col, idx) {
        var _pickerItemInstanceAr;
        var index = col.findIndex(function (item) {
          return item.value === curValueArray.value[idx];
        });
        curIndexArray[idx] = index > -1 ? index : 0;
        (_pickerItemInstanceAr = pickerItemInstanceArray.value[idx]) === null || _pickerItemInstanceAr === void 0 || _pickerItemInstanceAr.setIndex(curIndexArray[idx]);
      });
    });
    return function () {
      var header = renderTNodeJSX("header");
      return vue.createVNode("div", {
        "class": "".concat(name$1)
      }, [vue.createVNode("div", {
        "class": "".concat(name$1, "__toolbar")
      }, [cancelButtonText.value && vue.createVNode("div", {
        "class": "".concat(name$1, "__cancel"),
        "onClick": handleCancel
      }, [cancelButtonText.value]), vue.createVNode("div", {
        "class": "".concat(name$1, "__title")
      }, [props.title]), confirmButtonText.value && vue.createVNode("div", {
        "class": "".concat(name$1, "__confirm"),
        "onClick": handleConfirm
      }, [confirmButtonText.value])]), header, vue.createVNode("div", {
        "class": "".concat(name$1, "__main")
      }, [realColumns.value.map(function (item, index) {
        var _pickerValue$value3;
        return vue.createVNode("div", {
          "key": index,
          "class": "".concat(name$1, "-item__group")
        }, [vue.createVNode(vue.resolveComponent("picker-item"), {
          "ref": function ref(item2) {
            return setPickerItemRef(item2, index);
          },
          "options": item,
          "value": (_pickerValue$value3 = pickerValue.value) === null || _pickerValue$value3 === void 0 ? void 0 : _pickerValue$value3[index],
          "render-label": props.renderLabel,
          "onPick": function onPick($event) {
            return handlePick($event, index);
          }
        }, null)]);
      }), vue.createVNode("div", {
        "class": "".concat(name$1, "__mask ").concat(name$1, "__mask--top")
      }, null), vue.createVNode("div", {
        "class": "".concat(name$1, "__mask ").concat(name$1, "__mask--bottom")
      }, null), vue.createVNode("div", {
        "class": "".concat(name$1, "__indicator")
      }, null)])]);
    };
  }
});

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty__default["default"](e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var prefix = config["default"].prefix;
var name = "".concat(prefix, "-cascade");
var script = vue.defineComponent({
  name: name,
  components: {
    Picker: _Picker
  },
  props: picker_props["default"],
  setup: function setup(props, context) {
    var pickerProps = vue.computed(function () {
      return _objectSpread({}, props);
    });
    var finalDepth = vue.ref(1);
    var finalSubOptionsRecord = vue.ref({});
    var generateCascadePickerColumns = function generateCascadePickerColumns(value, options, depth, subOptionsRecord) {
      var columns = [];
      columns.push(options.map(function (option) {
        return {
          label: option.label,
          value: option.value
        };
      }));
      for (var i = 0; i < depth - 1; i++) {
        var x = value[i];
        var subOptions = subOptionsRecord[x];
        if (!subOptions) {
          columns.push([]);
        } else {
          columns.push(subOptions.map(function (option) {
            return {
              label: option.label,
              value: option.value
            };
          }));
        }
      }
      return columns;
    };
    var initDepthAndRecord = function initDepthAndRecord(options) {
      var depth = 1;
      var subOptionsRecord = {};
      function traverse(option, currentDepth) {
        if (!option.children) {
          return;
        }
        subOptionsRecord[option.value] = option.children;
        var nextDepth = currentDepth + 1;
        if (nextDepth > depth) {
          depth = nextDepth;
        }
        option.children.forEach(function (option2) {
          traverse(option2, nextDepth);
        });
      }
      options.forEach(function (option) {
        traverse(option, 1);
      });
      finalDepth.value = depth;
      finalSubOptionsRecord.value = subOptionsRecord;
    };
    initDepthAndRecord(props.columns);
    return {
      name: name,
      finalDepth: finalDepth,
      finalSubOptionsRecord: finalSubOptionsRecord,
      pickerProps: pickerProps,
      generateCascadePickerColumns: generateCascadePickerColumns
    };
  }
});

function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_picker = vue.resolveComponent("picker");
  return vue.openBlock(), vue.createBlock(_component_picker, vue.mergeProps(_ctx.pickerProps, {
    columns: function columns(selected) {
      return _ctx.generateCascadePickerColumns(selected, _ctx.columns, _ctx.finalDepth, _ctx.finalSubOptionsRecord);
    }
  }), null, 16, ["columns"]);
}

script.render = render;

exports._Picker = _Picker;
exports.script = script;
//# sourceMappingURL=dep-062b4405.js.map
