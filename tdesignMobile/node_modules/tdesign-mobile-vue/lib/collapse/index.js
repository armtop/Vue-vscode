/**
 * tdesign v1.2.3
 * (c) 2024 TDesign Group
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _slicedToArray = require('@babel/runtime/helpers/slicedToArray');
var vue = require('vue');
var collapse_props = require('./props.js');
var config = require('../config.js');
var hooks_tnode = require('../hooks/tnode.js');
var hooks_useClass = require('../hooks/useClass.js');
var shared_useVModel_index = require('../shared/useVModel/index.js');
var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var tdesignIconsVueNext = require('tdesign-icons-vue-next');
var cell_index = require('../cell/index.js');
var collapse_collapsePanelProps = require('./collapse-panel-props.js');
var collapse_util = require('./util.js');
var shared_component = require('../shared/component.js');
require('lodash/isFunction');
require('lodash/camelCase');
require('lodash/kebabCase');
require('../hooks/render-tnode.js');
require('lodash/isEmpty');
require('lodash/isString');
require('lodash/isObject');
require('../config-provider/useConfig.js');
require('lodash/cloneDeep');
require('../config-provider/context.js');
require('lodash/mergeWith');
require('lodash/merge');
require('lodash/isArray');
require('../_common/js/global-config/mobile/default-config.js');
require('../_common/js/global-config/mobile/locale/zh_CN.js');
require('../_chunks/dep-191173f8.js');
require('@babel/runtime/helpers/typeof');
require('../_chunks/dep-2088457f.js');
require('dayjs');
require('../cell/props.js');
require('../form/hooks.js');
require('../shared/hover.js');
require('../cell/cell-group-props.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _slicedToArray__default = /*#__PURE__*/_interopDefaultLegacy(_slicedToArray);
var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);

var prefix$1 = config["default"].prefix;
var name$1 = "".concat(prefix$1, "-collapse");
var LocalCollapse = vue.defineComponent({
  name: name$1,
  props: collapse_props["default"],
  setup: function setup(props2, _ref) {
    var slots = _ref.slots;
    var renderTNodeJSX = hooks_tnode.useTNodeJSX();
    var componentName = hooks_useClass.usePrefixClass("collapse");
    var _toRefs = vue.toRefs(props2),
      value = _toRefs.value,
      modelValue = _toRefs.modelValue;
    var _useVModel = shared_useVModel_index.useVModel(value, modelValue, props2.defaultValue, props2.onChange),
      _useVModel2 = _slicedToArray__default["default"](_useVModel, 2),
      activeValue = _useVModel2[0],
      setActiveValue = _useVModel2[1];
    var calcActiveValues = function calcActiveValues(activeValues, panelValue, expandMutex) {
      var hit = activeValues.indexOf(panelValue);
      if (hit > -1) {
        return activeValues.filter(function (item) {
          return item !== panelValue;
        });
      }
      return expandMutex ? [panelValue] : activeValues.concat(panelValue);
    };
    var onPanelChange = function onPanelChange(value2, args) {
      if (Array.isArray(activeValue.value)) {
        var val = calcActiveValues(activeValue.value, value2, props2.expandMutex);
        setActiveValue(val, args);
      }
    };
    var disabled = vue.computed(function () {
      return props2.disabled;
    });
    var expandIcon = vue.computed(function () {
      return props2.expandIcon;
    });
    var rootClass = vue.computed(function () {
      return [componentName.value, "".concat(componentName.value, "--").concat(props2.theme)];
    });
    vue.provide("collapse", {
      activeValue: activeValue,
      disabled: disabled,
      expandIcon: expandIcon,
      onPanelChange: onPanelChange,
      defaultExpandAll: props2.defaultExpandAll
    });
    vue.provide("renderParentTNode", renderTNodeJSX);
    return function () {
      var _slots$default;
      return vue.createVNode("div", {
        "class": rootClass.value
      }, [(_slots$default = slots.default) === null || _slots$default === void 0 ? void 0 : _slots$default.call(slots)]);
    };
  }
});

var prefix = config["default"].prefix;
var name = "".concat(prefix, "-collapse-panel");
var LocalCollapsePanel = vue.defineComponent({
  name: name,
  components: {
    TCell: cell_index["default"]
  },
  props: collapse_collapsePanelProps["default"],
  setup: function setup(props2, _ref) {
    var slots = _ref.slots;
    var renderTNodeJSX = hooks_tnode.useTNodeJSX();
    var renderContent = hooks_tnode.useContent();
    var componentName = hooks_useClass.usePrefixClass("collapse-panel");
    var parent = vue.inject("collapse");
    var renderParentTNode = vue.inject("renderParentTNode");
    var disabled = vue.computed(function () {
      return (parent === null || parent === void 0 ? void 0 : parent.disabled.value) || props2.disabled;
    });
    var rootClass = vue.computed(function () {
      return _defineProperty__default["default"](_defineProperty__default["default"](_defineProperty__default["default"](_defineProperty__default["default"]({}, "".concat(componentName.value), true), "".concat(componentName.value, "--").concat(props2.placement), true), "".concat(componentName.value, "--active"), isActive.value), "".concat(componentName.value, "--disabled"), disabled.value);
    });
    var isActive = vue.computed(function () {
      return collapse_util.findIndex(props2.value, parent === null || parent === void 0 ? void 0 : parent.activeValue.value) > -1;
    });
    var updatePanelValue = function updatePanelValue(args) {
      if (props2.value != null) {
        parent === null || parent === void 0 || parent.onPanelChange(props2.value, args);
      }
    };
    var handleClick = function handleClick(e) {
      e === null || e === void 0 || e.stopPropagation();
      if (disabled.value) {
        return;
      }
      updatePanelValue({
        e: e
      });
    };
    var bodyRef = vue.ref();
    var wrapRef = vue.ref();
    var headRef = vue.ref();
    var wrapperHeight = vue.ref("");
    var updatePanelState = function updatePanelState() {
      vue.nextTick(function () {
        if (!wrapRef.value) {
          return;
        }
        var _headRef$value$getBou = headRef.value.getBoundingClientRect(),
          headHeight = _headRef$value$getBou.height;
        if (!isActive.value) {
          wrapperHeight.value = "".concat(headHeight, "px");
          return;
        }
        var _bodyRef$value$getBou = bodyRef.value.getBoundingClientRect(),
          bodyHeight = _bodyRef$value$getBou.height;
        var height = headHeight + bodyHeight;
        wrapperHeight.value = "".concat(height, "px");
      });
    };
    vue.watch(isActive, function () {
      vue.nextTick(function () {
        return updatePanelState();
      });
    }, {
      immediate: true
    });
    vue.onMounted(function () {
      if (parent !== null && parent !== void 0 && parent.defaultExpandAll) {
        updatePanelValue();
      }
    });
    var renderDefaultIcon = function renderDefaultIcon() {
      if (props2.placement === "bottom") {
        return isActive.value ? vue.createVNode(tdesignIconsVueNext.ChevronUpIcon, null, null) : vue.createVNode(tdesignIconsVueNext.ChevronDownIcon, null, null);
      }
      return isActive.value ? vue.createVNode(tdesignIconsVueNext.ChevronDownIcon, null, null) : vue.createVNode(tdesignIconsVueNext.ChevronUpIcon, null, null);
    };
    var panelExpandIcon = vue.computed(function () {
      return slots.expandIcon || props2.expandIcon;
    });
    var renderRightIcon = function renderRightIcon() {
      var tNodeRender = panelExpandIcon.value === void 0 ? renderParentTNode : renderTNodeJSX;
      return vue.createVNode("div", {
        "class": "".concat(componentName.value, "__header-icon")
      }, [tNodeRender("expandIcon", renderDefaultIcon())]);
    };
    return function () {
      var panelContent = renderContent("default", "content");
      var headerContent = renderTNodeJSX("header");
      var noteContent = renderTNodeJSX("headerRightContent");
      var _leftIcon = renderTNodeJSX("headerLeftIcon");
      return vue.createVNode("div", {
        "ref": wrapRef,
        "class": rootClass.value,
        "style": {
          height: wrapperHeight.value
        }
      }, [vue.createVNode("div", {
        "ref": headRef,
        "class": "".concat(componentName.value, "__title"),
        "onClick": handleClick
      }, [vue.createVNode(cell_index["default"], {
        "class": ["".concat(componentName.value, "__header"), "".concat(componentName.value, "__header--").concat(props2.placement), _defineProperty__default["default"]({}, "".concat(componentName.value, "__header--expanded"), isActive.value)]
      }, {
        leftIcon: function leftIcon() {
          return _leftIcon;
        },
        title: function title() {
          return headerContent;
        },
        note: function note() {
          return noteContent;
        },
        rightIcon: function rightIcon() {
          return renderRightIcon();
        }
      })]), vue.createVNode("div", {
        "ref": bodyRef,
        "class": "".concat(componentName.value, "__content")
      }, [panelContent])]);
    };
  }
});

var Collapse = shared_component.withInstall(LocalCollapse);
var CollapsePanel = shared_component.withInstall(LocalCollapsePanel);

exports.Collapse = Collapse;
exports.CollapsePanel = CollapsePanel;
//# sourceMappingURL=index.js.map
