/**
 * tdesign v1.2.3
 * (c) 2024 TDesign Group
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var vue = require('vue');
var core = require('@vueuse/core');
var loading_index = require('../loading/index.js');
var config = require('../config.js');
var list_props = require('./props.js');
var configProvider_useConfig = require('../config-provider/useConfig.js');
var shared_renderTnode = require('../shared/render-tnode.js');
var shared_useScrollParent_index = require('../shared/useScrollParent/index.js');
var shared_render = require('../shared/render.js');
require('@babel/runtime/helpers/defineProperty');
require('../_common/js/loading/circle-adapter.js');
require('../_common/js/utils/set-style.js');
require('../_common/js/utils/helper.js');
require('@babel/runtime/helpers/toConsumableArray');
require('@babel/runtime/helpers/objectWithoutProperties');
require('@babel/runtime/helpers/slicedToArray');
require('lodash/isString');
require('lodash/isNull');
require('lodash/isUndefined');
require('lodash/isNumber');
require('lodash/isArray');
require('../hooks/useClass.js');
require('../loading/props.js');
require('../hooks/tnode.js');
require('lodash/isFunction');
require('lodash/camelCase');
require('lodash/kebabCase');
require('../hooks/render-tnode.js');
require('lodash/isEmpty');
require('lodash/isObject');
require('../shared/component.js');
require('lodash/cloneDeep');
require('../config-provider/context.js');
require('lodash/mergeWith');
require('lodash/merge');
require('../_common/js/global-config/mobile/default-config.js');
require('../_common/js/global-config/mobile/locale/zh_CN.js');
require('../_chunks/dep-191173f8.js');
require('@babel/runtime/helpers/typeof');
require('../_chunks/dep-2088457f.js');
require('dayjs');
require('../shared/util.js');

var prefix = config["default"].prefix;
var name = "".concat(prefix, "-list");
var script = vue.defineComponent({
  name: name,
  components: {
    TLoading: loading_index["default"],
    TNode: shared_renderTnode["default"]
  },
  props: list_props["default"],
  emits: ["load-more", "scroll"],
  setup: function setup(props, context) {
    var _useConfig = configProvider_useConfig.useConfig("list"),
      globalConfig = _useConfig.globalConfig;
    var LOADING_TEXT_MAP = {
      loading: globalConfig.value.loading,
      "load-more": globalConfig.value.loadingMoreText
    };
    var root = vue.ref();
    var empty = vue.ref();
    var scrollParent = shared_useScrollParent_index.useScrollParent(root);
    var _useWindowSize = core.useWindowSize(),
      height = _useWindowSize.height;
    var internalInstance = vue.getCurrentInstance();
    var headerContent = vue.computed(function () {
      return shared_render.renderTNode(internalInstance, "header");
    });
    var footerContent = vue.computed(function () {
      return shared_render.renderTNode(internalInstance, "footer");
    });
    var onLoadMore = function onLoadMore(e) {
      if (props.asyncLoading === "load-more") {
        var _props$onLoadMore;
        (_props$onLoadMore = props.onLoadMore) === null || _props$onLoadMore === void 0 || _props$onLoadMore.call(props);
      }
    };
    var handleScroll = function handleScroll(e) {
      var _props$onScroll;
      var scrollHeight = e.target.scrollHeight || Math.max(document.documentElement.scrollHeight, document.body.scrollHeight);
      var scrollTop = e.target.scrollTop || document.documentElement.scrollTop || document.body.scrollTop;
      var offsetHeight = e.target.offsetHeight || height.value;
      (_props$onScroll = props.onScroll) === null || _props$onScroll === void 0 || _props$onScroll.call(props, scrollHeight - (scrollTop + offsetHeight), scrollTop);
    };
    core.useEventListener(scrollParent, "scroll", handleScroll);
    return {
      name: name,
      root: root,
      empty: empty,
      onLoadMore: onLoadMore,
      handleScroll: handleScroll,
      headerContent: headerContent,
      footerContent: footerContent,
      LOADING_TEXT_MAP: LOADING_TEXT_MAP
    };
  }
});

function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_t_node = vue.resolveComponent("t-node");
  var _component_t_loading = vue.resolveComponent("t-loading");
  return vue.openBlock(), vue.createElementBlock("div", {
    ref: "root",
    class: vue.normalizeClass(_ctx.name),
    onScroll: _cache[1] || (_cache[1] = function () {
      return _ctx.handleScroll && _ctx.handleScroll.apply(_ctx, arguments);
    })
  }, [vue.createVNode(_component_t_node, {
    content: _ctx.headerContent
  }, null, 8, ["content"]), vue.renderSlot(_ctx.$slots, "default"), vue.createElementVNode("div", {
    class: vue.normalizeClass("".concat(_ctx.name, "__loading--wrapper")),
    onClick: _cache[0] || (_cache[0] = vue.withModifiers(function () {
      return _ctx.onLoadMore && _ctx.onLoadMore.apply(_ctx, arguments);
    }, ["stop"]))
  }, [typeof _ctx.asyncLoading === "string" && ["loading", "load-more"].includes(_ctx.asyncLoading) ? (vue.openBlock(), vue.createBlock(_component_t_loading, {
    key: 0,
    indicator: _ctx.asyncLoading === "loading",
    text: typeof _ctx.asyncLoading === "string" ? _ctx.LOADING_TEXT_MAP[_ctx.asyncLoading] : "",
    class: vue.normalizeClass("".concat(_ctx.name, "__loading"))
  }, null, 8, ["indicator", "text", "class"])) : vue.createCommentVNode("", true)], 2), vue.createVNode(_component_t_node, {
    content: _ctx.footerContent
  }, null, 8, ["content"])], 34);
}

script.render = render;

exports["default"] = script;
//# sourceMappingURL=list.js.map
