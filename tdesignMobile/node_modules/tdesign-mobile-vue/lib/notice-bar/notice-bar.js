/**
 * tdesign v1.2.3
 * (c) 2024 TDesign Group
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var _slicedToArray = require('@babel/runtime/helpers/slicedToArray');
var vue = require('vue');
var tdesignIconsVueNext = require('tdesign-icons-vue-next');
var isArray = require('lodash/isArray');
var swiper_index = require('../swiper/index.js');
var noticeBar_props = require('./props.js');
var config = require('../config.js');
var shared_renderTnode = require('../shared/render-tnode.js');
var shared_render = require('../shared/render.js');
var shared_useVModel_index = require('../shared/useVModel/index.js');
require('@babel/runtime/helpers/typeof');
require('lodash/isObject');
require('lodash/isNumber');
require('../swipe-cell/useSwipe.js');
require('@vueuse/core');
require('../shared/dom.js');
require('lodash/isFunction');
require('lodash/isString');
require('../shared/util.js');
require('../swiper/props.js');
require('../hooks/tnode.js');
require('lodash/camelCase');
require('lodash/kebabCase');
require('../hooks/render-tnode.js');
require('lodash/isEmpty');
require('../hooks/useClass.js');
require('../config-provider/useConfig.js');
require('lodash/cloneDeep');
require('../config-provider/context.js');
require('lodash/mergeWith');
require('lodash/merge');
require('../_common/js/global-config/mobile/default-config.js');
require('../_common/js/global-config/mobile/locale/zh_CN.js');
require('../_chunks/dep-191173f8.js');
require('../_chunks/dep-2088457f.js');
require('dayjs');
require('../shared/component.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);
var _slicedToArray__default = /*#__PURE__*/_interopDefaultLegacy(_slicedToArray);
var isArray__default = /*#__PURE__*/_interopDefaultLegacy(isArray);

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty__default["default"](e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var prefix = config["default"].prefix;
var name = "".concat(prefix, "-notice-bar");
var iconDefault = {
  info: vue.h(tdesignIconsVueNext.InfoCircleFilledIcon),
  success: vue.h(tdesignIconsVueNext.CheckCircleFilledIcon),
  warning: vue.h(tdesignIconsVueNext.InfoCircleFilledIcon),
  error: vue.h(tdesignIconsVueNext.InfoCircleFilledIcon)
};
var script = vue.defineComponent({
  name: name,
  components: {
    TNode: shared_renderTnode["default"],
    TSwiper: swiper_index.Swiper,
    TSwiperItem: swiper_index.SwiperItem
  },
  props: noticeBar_props["default"],
  emits: ["click"],
  setup: function setup(props, context) {
    var internalInstance = vue.getCurrentInstance();
    var state = vue.reactive({
      duration: 0,
      offset: 0,
      listWidth: 0,
      itemWidth: 0,
      timer: null,
      nextTimer: null,
      scroll: {
        marquee: false,
        speed: 50,
        loop: -1,
        delay: 0
      }
    });
    var rootClasses = vue.computed(function () {
      return ["".concat(name), "".concat(name, "--").concat(props.theme)];
    });
    var prefixIconContent = vue.computed(function () {
      return shared_render.renderTNode(internalInstance, "prefixIcon", {
        defaultNode: iconDefault[props.theme || "info"]
      });
    });
    var suffixIconContent = vue.computed(function () {
      return shared_render.renderTNode(internalInstance, "suffixIcon");
    });
    var operationContent = vue.computed(function () {
      return shared_render.renderTNode(internalInstance, "operation");
    });
    var showContent = vue.computed(function () {
      return shared_render.renderTNode(internalInstance, "content");
    });
    function handleClick(trigger) {
      var _props$onClick;
      (_props$onClick = props.onClick) === null || _props$onClick === void 0 || _props$onClick.call(props, trigger);
    }
    var animateStyle = vue.computed(function () {
      return {
        transform: state.offset ? "translateX(".concat(state.offset, "px)") : "",
        transitionDuration: "".concat(state.duration, "s"),
        transitionTimingFunction: "linear"
      };
    });
    var listDOM = vue.ref();
    var itemDOM = vue.ref();
    var _toRefs = vue.toRefs(props),
      visible = _toRefs.visible,
      modelValue = _toRefs.modelValue;
    var _useVModel = shared_useVModel_index.useVModel(visible, modelValue, props.defaultVisible),
      _useVModel2 = _slicedToArray__default["default"](_useVModel, 2),
      isShow = _useVModel2[0];
      _useVModel2[1];
    function handleScrolling() {
      var _props$marquee, _marquee$speed, _marquee$delay;
      if (!(props !== null && props !== void 0 && props.marquee) || (props === null || props === void 0 || (_props$marquee = props.marquee) === null || _props$marquee === void 0 ? void 0 : _props$marquee.loop) === 0) {
        return;
      }
      if (typeof props.marquee === "boolean") {
        state.scroll = _objectSpread(_objectSpread({}, state.scroll), {}, {
          marquee: props.marquee
        });
      }
      var marquee = props.marquee;
      state.scroll = {
        marquee: true,
        loop: typeof (marquee === null || marquee === void 0 ? void 0 : marquee.loop) === "undefined" ? state.scroll.loop : marquee.loop,
        speed: (_marquee$speed = marquee.speed) !== null && _marquee$speed !== void 0 ? _marquee$speed : state.scroll.speed,
        delay: (_marquee$delay = marquee.delay) !== null && _marquee$delay !== void 0 ? _marquee$delay : state.scroll.delay
      };
      setTimeout(function () {
        var _listDOM$value, _itemDOM$value;
        var listDOMWidth = (_listDOM$value = listDOM.value) === null || _listDOM$value === void 0 ? void 0 : _listDOM$value.getBoundingClientRect().width;
        var itemDOMWidth = (_itemDOM$value = itemDOM.value) === null || _itemDOM$value === void 0 ? void 0 : _itemDOM$value.getBoundingClientRect().width;
        if (itemDOMWidth >= listDOMWidth) {
          state.offset = -itemDOMWidth;
          state.duration = itemDOMWidth / state.scroll.speed;
          state.listWidth = listDOMWidth;
          state.itemWidth = itemDOMWidth;
        }
      }, state.scroll.delay);
    }
    function handleTransitionend() {
      state.scroll.loop = --state.scroll.loop;
      if (state.scroll.loop === 0) {
        state.scroll = _objectSpread(_objectSpread({}, state.scroll), {}, {
          marquee: false
        });
        return;
      }
      state.offset = state.listWidth;
      state.duration = 0;
      setTimeout(function () {
        state.offset = -state.itemWidth;
        state.duration = (state.itemWidth + state.listWidth) / state.scroll.speed;
      }, 0);
    }
    vue.onMounted(function () {
      vue.nextTick(function () {
        if (isShow.value) {
          handleScrolling();
        }
      });
    });
    vue.watch(function () {
      return isShow.value;
    }, function () {
      vue.nextTick(function () {
        if (isShow.value) {
          state.offset = state.listWidth;
          state.duration = 0;
          handleScrolling();
        }
      });
    });
    return _objectSpread(_objectSpread(_objectSpread({
      isArray: isArray__default["default"],
      name: name
    }, vue.toRefs(props)), vue.toRefs(state)), {}, {
      rootClasses: rootClasses,
      prefixIconContent: prefixIconContent,
      suffixIconContent: suffixIconContent,
      operationContent: operationContent,
      showContent: showContent,
      isShow: isShow,
      handleClick: handleClick,
      listDOM: listDOM,
      itemDOM: itemDOM,
      animateStyle: animateStyle,
      handleScrolling: handleScrolling,
      handleTransitionend: handleTransitionend
    });
  }
});

var _hoisted_1 = {
  key: 0
};
function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_t_node = vue.resolveComponent("t-node");
  var _component_t_swiper_item = vue.resolveComponent("t-swiper-item");
  var _component_t_swiper = vue.resolveComponent("t-swiper");
  return _ctx.isShow ? (vue.openBlock(), vue.createElementBlock("div", {
    key: 0,
    class: vue.normalizeClass(_ctx.rootClasses)
  }, [_ctx.prefixIcon && _ctx.prefixIconContent ? (vue.openBlock(), vue.createElementBlock("div", {
    key: 0,
    class: vue.normalizeClass("".concat(_ctx.name, "__prefix-icon")),
    onClick: _cache[0] || (_cache[0] = function () {
      return _ctx.handleClick("prefix-icon");
    })
  }, [vue.createVNode(_component_t_node, {
    content: _ctx.prefixIconContent
  }, null, 8, ["content"])], 2)) : vue.createCommentVNode("", true), vue.createElementVNode("div", {
    ref: "listDOM",
    class: vue.normalizeClass("".concat(_ctx.name, "__content-wrap")),
    onClick: _cache[3] || (_cache[3] = function () {
      return _ctx.handleClick("content");
    })
  }, [_ctx.direction === "vertical" && _ctx.isArray(_ctx.content) ? (vue.openBlock(), vue.createElementBlock("div", _hoisted_1, [vue.createVNode(_component_t_swiper, {
    autoplay: "",
    loop: "",
    direction: "vertical",
    duration: 2e3,
    height: 22,
    class: vue.normalizeClass("".concat(_ctx.name, "__content--vertical"))
  }, {
    default: vue.withCtx(function () {
      return [(vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.content, function (item, index) {
        return vue.openBlock(), vue.createBlock(_component_t_swiper_item, {
          key: index
        }, {
          default: vue.withCtx(function () {
            return [vue.createElementVNode("div", {
              class: vue.normalizeClass("".concat(_ctx.name, "__content--vertical-item"))
            }, vue.toDisplayString(item), 3)];
          }),
          _: 2
        }, 1024);
      }), 128))];
    }),
    _: 1
  }, 8, ["class"])])) : (vue.openBlock(), vue.createElementBlock("div", {
    key: 1,
    ref: "itemDOM",
    class: vue.normalizeClass(["".concat(_ctx.name, "__content"), !_ctx.scroll.marquee ? "".concat(_ctx.name, "__content-wrapable") : ""]),
    style: vue.normalizeStyle(_ctx.scroll.marquee ? _ctx.animateStyle : ""),
    onTransitionend: _cache[2] || (_cache[2] = function ($event) {
      return _ctx.handleTransitionend();
    })
  }, [_ctx.showContent ? (vue.openBlock(), vue.createBlock(_component_t_node, {
    key: 0,
    content: _ctx.showContent
  }, null, 8, ["content"])) : vue.createCommentVNode("", true), _ctx.operationContent ? (vue.openBlock(), vue.createElementBlock("span", {
    key: 1,
    class: vue.normalizeClass("".concat(_ctx.name, "__operation")),
    onClick: _cache[1] || (_cache[1] = vue.withModifiers(function () {
      return _ctx.handleClick("operation");
    }, ["stop"]))
  }, [vue.createVNode(_component_t_node, {
    content: _ctx.operationContent
  }, null, 8, ["content"])], 2)) : vue.createCommentVNode("", true)], 38))], 2), _ctx.suffixIconContent ? (vue.openBlock(), vue.createElementBlock("div", {
    key: 1,
    class: vue.normalizeClass("".concat(_ctx.name, "__suffix-icon")),
    onClick: _cache[4] || (_cache[4] = function () {
      return _ctx.handleClick("suffix-icon");
    })
  }, [vue.createVNode(_component_t_node, {
    content: _ctx.suffixIconContent
  }, null, 8, ["content"])], 2)) : vue.createCommentVNode("", true)], 2)) : vue.createCommentVNode("", true);
}

script.render = render;

exports["default"] = script;
//# sourceMappingURL=notice-bar.js.map
