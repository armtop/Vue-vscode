/**
 * tdesign v1.2.3
 * (c) 2024 TDesign Group
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var vue = require('vue');
var _common_js_loading_circleAdapter = require('../_common/js/loading/circle-adapter.js');
var config = require('../config.js');
var hooks_useClass = require('../hooks/useClass.js');
var _toConsumableArray = require('@babel/runtime/helpers/toConsumableArray');
var loading_props = require('./props.js');
var hooks_tnode = require('../hooks/tnode.js');
var shared_component = require('../shared/component.js');
require('../_common/js/utils/set-style.js');
require('../_common/js/utils/helper.js');
require('@babel/runtime/helpers/objectWithoutProperties');
require('@babel/runtime/helpers/slicedToArray');
require('lodash/isString');
require('lodash/isNull');
require('lodash/isUndefined');
require('lodash/isNumber');
require('lodash/isArray');
require('../config-provider/useConfig.js');
require('lodash/isFunction');
require('lodash/cloneDeep');
require('../config-provider/context.js');
require('lodash/mergeWith');
require('lodash/merge');
require('../_common/js/global-config/mobile/default-config.js');
require('../_common/js/global-config/mobile/locale/zh_CN.js');
require('../_chunks/dep-191173f8.js');
require('@babel/runtime/helpers/typeof');
require('../_chunks/dep-2088457f.js');
require('dayjs');
require('lodash/camelCase');
require('lodash/kebabCase');
require('../hooks/render-tnode.js');
require('lodash/isEmpty');
require('lodash/isObject');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);
var _toConsumableArray__default = /*#__PURE__*/_interopDefaultLegacy(_toConsumableArray);

var prefix$2 = config["default"].prefix;
var TGradientIcon = vue.defineComponent({
  name: "".concat(prefix$2, "-gradient"),
  props: {
    style: Object
  },
  setup: function setup(props) {
    var gradientClass = hooks_useClass.usePrefixClass("loading__gradient");
    var classes = [gradientClass.value, "".concat(prefix$2, "-icon-loading")];
    var circle = vue.ref();
    var updateColor = function updateColor() {
      var circleElem = circle.value;
      _common_js_loading_circleAdapter["default"](circleElem);
    };
    vue.onMounted(function () {
      vue.nextTick(function () {
        updateColor();
      });
    });
    vue.onUpdated(function () {
      updateColor();
    });
    return function () {
      return vue.createVNode("svg", {
        "style": props.style,
        "class": classes,
        "viewBox": "0 0 12 12",
        "version": "1.1",
        "width": "1em",
        "height": "1em",
        "xmlns": "http://www.w3.org/2000/svg"
      }, [vue.createVNode("foreignObject", {
        "x": "0",
        "y": "0",
        "width": "12",
        "height": "12"
      }, [vue.createVNode("div", {
        "ref": circle,
        "class": "".concat(gradientClass.value, "-conic")
      }, null)])]);
    };
  }
});

var prefix$1 = config["default"].prefix;
var SpinnerIcon = vue.defineComponent({
  name: "".concat(prefix$1, "-spinner"),
  props: {
    style: Object
  },
  setup: function setup(props) {
    var spinnerClass = hooks_useClass.usePrefixClass("loading__spinner");
    return function () {
      return vue.createVNode("span", {
        "class": spinnerClass.value,
        "style": props.style
      }, [_toConsumableArray__default["default"](new Array(12)).map(function (_, index) {
        return vue.createVNode("i", {
          "class": ["".concat(spinnerClass.value, "--line"), "".concat(spinnerClass.value, "--line-").concat(index + 1)]
        }, null);
      })]);
    };
  }
});

var prefix = config["default"].prefix;
var Loading = vue.defineComponent({
  name: "".concat(prefix, "-loading"),
  props: loading_props["default"],
  setup: function setup(props2) {
    var renderTNodeJSX = hooks_tnode.useTNodeJSX();
    var renderTNodeContent = hooks_tnode.useContent();
    var loadingClass = hooks_useClass.usePrefixClass("loading");
    var delayShowLoading = vue.ref(false);
    var countDelay = function countDelay() {
      delayShowLoading.value = false;
      var timer = setTimeout(function () {
        delayShowLoading.value = true;
        clearTimeout(timer);
      }, props2.delay);
    };
    var realLoading = vue.computed(function () {
      return (!props2.delay || delayShowLoading.value) && props2.loading;
    });
    vue.watch(function () {
      return props2.loading;
    }, function (value) {
      if (value) {
        props2.delay && countDelay();
      }
    }, {
      immediate: true
    });
    var rootClass = vue.computed(function () {
      return [loadingClass.value, _defineProperty__default["default"]({}, "".concat(loadingClass.value, "--vertical"), props2.layout === "vertical")];
    });
    var textClass = vue.computed(function () {
      return ["".concat(loadingClass.value, "__text"), _defineProperty__default["default"]({}, "".concat(loadingClass.value, "__text--only"), !props2.indicator)];
    });
    var rootStyle = vue.computed(function () {
      var style = [];
      if (props2.inheritColor) {
        style.push("color: inherit");
      }
      if (props2.size) {
        style.push("font-size: ".concat(props2.size, ";"));
      }
      return style.join(";");
    });
    var defaultIndicator = {
      circular: TGradientIcon,
      spinner: SpinnerIcon
    };
    var dotsLoading = vue.computed(function () {
      vue.setBlockTracking(-1);
      var node = vue.createVNode("div", {
        "class": "".concat(loadingClass.value, "__dots"),
        "style": {
          animationPlayState: props2.pause ? "paused" : "",
          animationDirection: props2.reverse ? "reverse" : "",
          animationDuration: "".concat(props2.duration, "ms"),
          width: props2.size,
          height: props2.size
        }
      }, [Array.from({
        length: 3
      }).map(function (val, i) {
        return vue.createVNode("div", {
          "class": "".concat(loadingClass.value, "__dot"),
          "style": props2.duration ? "animation-duration: ".concat(props2.duration / 1e3, "s; animation-delay: ").concat(props2.duration * i / 3e3, "s") : ""
        }, null);
      })]);
      vue.setBlockTracking(1);
      return node;
    });
    var defaultLoading = vue.computed(function () {
      vue.setBlockTracking(-1);
      var TIndicator = defaultIndicator[props2.theme || "circular"];
      var node = vue.createVNode(TIndicator, {
        "style": {
          animationPlayState: props2.pause ? "paused" : "",
          animationDirection: props2.reverse ? "reverse" : "",
          animationDuration: "".concat(props2.duration, "ms"),
          width: props2.size,
          height: props2.size
        }
      }, null);
      vue.setBlockTracking(1);
      return node;
    });
    return function () {
      var indicator = renderTNodeJSX("indicator", {
        defaultNode: props2.theme === "dots" ? dotsLoading.value : defaultLoading.value
      });
      var text = renderTNodeJSX("text");
      var TNodeContent = renderTNodeContent("default", "content");
      return vue.createVNode("div", {
        "class": rootClass.value,
        "style": rootStyle.value
      }, [realLoading.value && indicator, text && realLoading.value && vue.createVNode("span", {
        "class": textClass.value
      }, [text]), TNodeContent]);
    };
  }
});

var _Loading = shared_component.withInstall(Loading);

exports["default"] = _Loading;
//# sourceMappingURL=index.js.map
