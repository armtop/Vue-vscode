{"version":3,"file":"index.js","sources":["../../src/badge/badge.tsx","../../src/badge/index.ts"],"sourcesContent":["import { defineComponent, computed } from 'vue';\nimport config from '../config';\nimport BadgeProps from './props';\nimport { usePrefixClass } from '../hooks/useClass';\nimport { useContent, useTNodeJSX } from '../hooks/tnode';\n\nconst { prefix } = config;\nconst name = `${prefix}-badge`;\n\nexport default defineComponent({\n  name,\n  props: BadgeProps,\n  setup(props) {\n    const renderTNodeJSX = useTNodeJSX();\n    const renderTNodeContent = useContent();\n\n    const badgeClass = usePrefixClass('badge');\n    // 徽标外层样式类\n    const badgeClasses = computed(() => ({\n      [`${badgeClass.value}`]: true,\n      [`${badgeClass.value}__ribbon-outer`]: props.shape === 'ribbon',\n    }));\n\n    // 徽标内层样式类\n    const badgeInnerClasses = computed(() => ({\n      [`${badgeClass.value}--basic`]: true,\n      [`${badgeClass.value}--dot`]: props.dot,\n      [`${badgeClass.value}--${props.size}`]: true,\n      [`${badgeClass.value}--${props.shape}`]: true,\n      [`${badgeClass.value}--count`]: !props.dot && props.count,\n      [`${prefix}-has-count`]: true,\n    }));\n\n    // 是否展示角标\n    const isShowBadge = computed(() => {\n      if (props.dot) {\n        return true;\n      }\n      const count = Number(props.count);\n      if (!props.showZero && count === 0) {\n        return false;\n      }\n      if (props.count == null) return false;\n      return true;\n    });\n\n    const hasUnit = (unit: string) =>\n      unit.indexOf('px') > 0 ||\n      unit.indexOf('rpx') > 0 ||\n      unit.indexOf('em') > 0 ||\n      unit.indexOf('rem') > 0 ||\n      unit.indexOf('%') > 0 ||\n      unit.indexOf('vh') > 0 ||\n      unit.indexOf('vm') > 0;\n\n    // 徽标自定义样式\n    const badgeStyles = computed(() => {\n      if (!props.offset) {\n        return { background: props.color };\n      }\n      let [xOffset = 0, yOffset = 0]: Array<string | number> = props.offset;\n      xOffset = hasUnit(xOffset.toString()) ? xOffset : `${xOffset}px`;\n      yOffset = hasUnit(yOffset.toString()) ? yOffset : `${yOffset}px`;\n      return {\n        background: props.color,\n        right: xOffset,\n        top: yOffset,\n      };\n    });\n\n    const badgeValue = computed(() => {\n      if (props.dot) {\n        return '';\n      }\n      const count = Number(props.count);\n      if (isNaN(count) || isNaN(props.maxCount)) {\n        return props.count;\n      }\n      return count > props.maxCount ? `${props.maxCount}+` : count;\n    });\n\n    return () => {\n      const readerCount = () => {\n        const countType = typeof props.count;\n        if (countType === 'string' || countType === 'number') {\n          return null;\n        }\n        return renderTNodeJSX('count');\n      };\n      const readerContent = () => {\n        const content = renderTNodeContent('default', 'content');\n        if (typeof content === 'string') {\n          return <span class={`${badgeClass.value}__content-text`}>{content}</span>;\n        }\n        return content;\n      };\n      const readerRibbonBefore = () => {\n        if (props.shape !== 'ribbon') {\n          return null;\n        }\n        return (\n          <div\n            class={`${badgeClass.value}__ribbon--before`}\n            style={props.color ? `border-color: ${props.color}` : ''}\n          />\n        );\n      };\n\n      const readerRibbonAfter = () => {\n        if (props.shape !== 'ribbon') {\n          return null;\n        }\n        return (\n          <div class={`${badgeClass.value}__ribbon--after`} style={props.color ? `border-color: ${props.color}` : ''} />\n        );\n      };\n\n      const readerBadge = () => {\n        if (!isShowBadge.value) {\n          return null;\n        }\n        return (\n          <div class={badgeInnerClasses.value} style={badgeStyles.value}>\n            {readerRibbonBefore()}\n            {badgeValue.value}\n            {readerRibbonAfter()}\n          </div>\n        );\n      };\n      return (\n        <div class={badgeClasses.value}>\n          <div class={`${badgeClass.value}__content`}>{readerContent()}</div>\n          {readerBadge()}\n          {readerCount()}\n        </div>\n      );\n    };\n  },\n});\n","import Badge from './badge';\nimport { withInstall, WithInstallType } from '../shared';\nimport { TdBadgeProps } from './type';\n\nimport './style';\n\nexport * from './type';\nexport type BadgeProps = TdBadgeProps;\n\nconst _Badge: WithInstallType<typeof Badge> = withInstall(Badge);\nexport default _Badge;\n"],"names":["prefix","config","name","defineComponent","props","BadgeProps","setup","renderTNodeJSX","useTNodeJSX","renderTNodeContent","useContent","badgeClass","usePrefixClass","badgeClasses","computed","_defineProperty","concat","value","shape","badgeInnerClasses","dot","size","count","isShowBadge","Number","showZero","hasUnit","unit","indexOf","badgeStyles","offset","background","color","_props$offset","_slicedToArray","_props$offset$","xOffset","_props$offset$2","yOffset","toString","right","top","badgeValue","isNaN","maxCount","readerCount","countType","_typeof","readerContent","content","_createVNode","readerRibbonBefore","readerRibbonAfter","readerBadge","_Badge","withInstall","Badge"],"mappings":"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"}