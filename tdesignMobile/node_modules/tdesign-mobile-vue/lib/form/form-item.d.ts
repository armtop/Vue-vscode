import { h } from 'vue';
import { AllValidateResult, Data, FormRule } from './type';
export declare type FormItemValidateResult<T extends Data = Data> = {
    [key in keyof T]: boolean | AllValidateResult[];
};
declare const _default: import("vue").DefineComponent<{
    for: {
        type: StringConstructor;
        default: string;
    };
    help: {
        type: import("vue").PropType<string | ((h: typeof h) => import("../common").SlotReturnValue)>;
    };
    label: {
        type: import("vue").PropType<string | ((h: typeof h) => import("../common").SlotReturnValue)>;
        default: string;
    };
    labelAlign: {
        type: import("vue").PropType<"left" | "right" | "top">;
        validator(val: "left" | "right" | "top"): boolean;
    };
    labelWidth: {
        type: import("vue").PropType<string | number>;
    };
    contentAlign: {
        type: import("vue").PropType<"left" | "right">;
        default: "left" | "right";
        validator(val: "left" | "right"): boolean;
    };
    name: {
        type: import("vue").PropType<string | number>;
    };
    requiredMark: {
        type: BooleanConstructor;
        default: any;
    };
    rules: {
        type: import("vue").PropType<FormRule[]>;
    };
    showErrorMessage: {
        type: BooleanConstructor;
        default: any;
    };
    status: {
        type: import("vue").PropType<"error" | "warning" | "success" | "validating">;
        default: string;
    };
    statusIcon: {
        type: import("vue").PropType<boolean | ((h: typeof h) => import("../common").SlotReturnValue)>;
        default: any;
    };
    successBorder: BooleanConstructor;
    tips: {
        type: import("vue").PropType<string | ((h: typeof h) => import("../common").SlotReturnValue)>;
    };
    arrow: BooleanConstructor;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    for: {
        type: StringConstructor;
        default: string;
    };
    help: {
        type: import("vue").PropType<string | ((h: typeof h) => import("../common").SlotReturnValue)>;
    };
    label: {
        type: import("vue").PropType<string | ((h: typeof h) => import("../common").SlotReturnValue)>;
        default: string;
    };
    labelAlign: {
        type: import("vue").PropType<"left" | "right" | "top">;
        validator(val: "left" | "right" | "top"): boolean;
    };
    labelWidth: {
        type: import("vue").PropType<string | number>;
    };
    contentAlign: {
        type: import("vue").PropType<"left" | "right">;
        default: "left" | "right";
        validator(val: "left" | "right"): boolean;
    };
    name: {
        type: import("vue").PropType<string | number>;
    };
    requiredMark: {
        type: BooleanConstructor;
        default: any;
    };
    rules: {
        type: import("vue").PropType<FormRule[]>;
    };
    showErrorMessage: {
        type: BooleanConstructor;
        default: any;
    };
    status: {
        type: import("vue").PropType<"error" | "warning" | "success" | "validating">;
        default: string;
    };
    statusIcon: {
        type: import("vue").PropType<boolean | ((h: typeof h) => import("../common").SlotReturnValue)>;
        default: any;
    };
    successBorder: BooleanConstructor;
    tips: {
        type: import("vue").PropType<string | ((h: typeof h) => import("../common").SlotReturnValue)>;
    };
    arrow: BooleanConstructor;
}>>, {
    label: string | ((h: typeof h) => import("../common").SlotReturnValue);
    status: "error" | "warning" | "success" | "validating";
    showErrorMessage: boolean;
    arrow: boolean;
    contentAlign: "left" | "right";
    statusIcon: boolean | ((h: typeof h) => import("../common").SlotReturnValue);
    for: string;
    requiredMark: boolean;
    successBorder: boolean;
}, {}>;
export default _default;
