/**
 * tdesign v1.2.3
 * (c) 2024 TDesign Group
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var vue = require('vue');
var config = require('../config.js');
var grid_index = require('../grid/index.js');
var swiper_index = require('../swiper/index.js');
require('../grid/props.js');
require('lodash/isObject');
require('lodash/isString');
require('lodash/isFunction');
require('../grid/grid-item-props.js');
require('../hooks/tnode.js');
require('lodash/camelCase');
require('lodash/kebabCase');
require('../hooks/render-tnode.js');
require('lodash/isEmpty');
require('../image/index.js');
require('../image/image.js');
require('@babel/runtime/helpers/slicedToArray');
require('@vueuse/core');
require('tdesign-icons-vue-next');
require('../loading/index.js');
require('../_common/js/loading/circle-adapter.js');
require('../_common/js/utils/set-style.js');
require('../_common/js/utils/helper.js');
require('@babel/runtime/helpers/toConsumableArray');
require('@babel/runtime/helpers/objectWithoutProperties');
require('lodash/isNull');
require('lodash/isUndefined');
require('lodash/isNumber');
require('lodash/isArray');
require('../hooks/useClass.js');
require('../config-provider/useConfig.js');
require('lodash/cloneDeep');
require('../config-provider/context.js');
require('lodash/mergeWith');
require('lodash/merge');
require('../_common/js/global-config/mobile/default-config.js');
require('../_common/js/global-config/mobile/locale/zh_CN.js');
require('../_chunks/dep-191173f8.js');
require('@babel/runtime/helpers/typeof');
require('../_chunks/dep-2088457f.js');
require('dayjs');
require('../loading/props.js');
require('../shared/component.js');
require('../image/props.js');
require('../shared/render-tnode.js');
require('../shared/render.js');
require('../badge/index.js');
require('../badge/props.js');
require('../swipe-cell/useSwipe.js');
require('../shared/dom.js');
require('../shared/util.js');
require('../swiper/props.js');
require('../shared/useVModel/index.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);

var prefix = config["default"].prefix;
var name = "".concat(prefix, "-action-sheet");
var script = vue.defineComponent({
  components: {
    TGrid: grid_index.Grid,
    TGridItem: grid_index.GridItem,
    TSwiper: swiper_index.Swiper,
    TSwiperItem: swiper_index.SwiperItem
  },
  props: {
    items: {
      type: Array,
      required: true
    },
    count: {
      type: Number,
      default: 8
    },
    selected: {
      type: Function,
      default: void 0
    }
  },
  emits: ["selected"],
  setup: function setup(props, context) {
    var gridColumn = vue.computed(function () {
      return Math.ceil(props.count / 2);
    });
    var pageNum = vue.computed(function () {
      return Math.ceil(props.items.length / props.count);
    });
    var actionItems = vue.computed(function () {
      var res = [];
      for (var i = 0; i < pageNum.value; i++) {
        var temp = props.items.slice(i * props.count, (i + 1) * props.count);
        res.push(temp);
      }
      return res;
    });
    var gridClasses = vue.computed(function () {
      return _defineProperty__default["default"](_defineProperty__default["default"](_defineProperty__default["default"]({}, "".concat(name, "__grid"), true), "".concat(name, "__grid--swiper"), pageNum.value > 1), "".concat(name, "__dots"), pageNum.value > 1);
    });
    var handleSelected = function handleSelected(i) {
      context.emit("selected", i);
    };
    return {
      name: vue.ref(name),
      pageNum: pageNum,
      gridColumn: gridColumn,
      actionItems: actionItems,
      gridClasses: gridClasses,
      handleSelected: handleSelected
    };
  }
});

function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_t_grid_item = vue.resolveComponent("t-grid-item");
  var _component_t_grid = vue.resolveComponent("t-grid");
  var _component_t_swiper_item = vue.resolveComponent("t-swiper-item");
  var _component_t_swiper = vue.resolveComponent("t-swiper");
  return vue.openBlock(), vue.createElementBlock("div", {
    class: vue.normalizeClass(_ctx.gridClasses)
  }, [_ctx.actionItems.length > 1 ? (vue.openBlock(), vue.createBlock(_component_t_swiper, {
    key: 0,
    autoplay: false,
    "pagination-position": "bottom",
    navigation: {
      type: "dots",
      showControls: false
    },
    loop: false,
    class: vue.normalizeClass("".concat(_ctx.name, "__swiper-wrap")),
    height: 192
  }, {
    default: vue.withCtx(function () {
      return [(vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.actionItems, function (Items, i) {
        return vue.openBlock(), vue.createBlock(_component_t_swiper_item, {
          key: i
        }, {
          default: vue.withCtx(function () {
            return [vue.createVNode(_component_t_grid, {
              column: _ctx.gridColumn
            }, {
              default: vue.withCtx(function () {
                return [(vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(Items, function (item, index) {
                  return vue.openBlock(), vue.createBlock(_component_t_grid_item, {
                    key: index,
                    text: item.label,
                    image: item.icon,
                    badge: item.badge,
                    onClick: vue.withModifiers(function ($event) {
                      return _ctx.handleSelected(i * _ctx.count + index);
                    }, ["prevent"])
                  }, null, 8, ["text", "image", "badge", "onClick"]);
                }), 128))];
              }),
              _: 2
            }, 1032, ["column"])];
          }),
          _: 2
        }, 1024);
      }), 128))];
    }),
    _: 1
  }, 8, ["class"])) : vue.createCommentVNode("", true), _ctx.actionItems.length === 1 ? (vue.openBlock(), vue.createBlock(_component_t_grid, {
    key: 1,
    column: _ctx.gridColumn
  }, {
    default: vue.withCtx(function () {
      return [(vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.actionItems[0], function (item, index) {
        return vue.openBlock(), vue.createBlock(_component_t_grid_item, {
          key: index,
          text: item.label,
          image: item.icon,
          badge: item.badge,
          onClick: function onClick($event) {
            return _ctx.handleSelected(index);
          }
        }, null, 8, ["text", "image", "badge", "onClick"]);
      }), 128))];
    }),
    _: 1
  }, 8, ["column"])) : vue.createCommentVNode("", true)], 2);
}

script.render = render;

exports["default"] = script;
//# sourceMappingURL=action-sheet-grid.js.map
