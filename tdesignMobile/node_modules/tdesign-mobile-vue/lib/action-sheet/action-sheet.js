/**
 * tdesign v1.2.3
 * (c) 2024 TDesign Group
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var _slicedToArray = require('@babel/runtime/helpers/slicedToArray');
var vue = require('vue');
var actionSheet_actionSheetList = require('./action-sheet-list.js');
var actionSheet_actionSheetGrid = require('./action-sheet-grid.js');
var popup_index = require('../popup/index.js');
var button_index = require('../button/index.js');
var config = require('../config.js');
var actionSheet_props = require('./props.js');
var configProvider_useConfig = require('../config-provider/useConfig.js');
var shared_useDefault_index = require('../shared/useDefault/index.js');
require('../badge/index.js');
require('@babel/runtime/helpers/typeof');
require('../badge/props.js');
require('../hooks/useClass.js');
require('../hooks/tnode.js');
require('lodash/isFunction');
require('lodash/camelCase');
require('lodash/kebabCase');
require('../hooks/render-tnode.js');
require('lodash/isEmpty');
require('lodash/isString');
require('lodash/isObject');
require('../shared/component.js');
require('lodash/cloneDeep');
require('../config-provider/context.js');
require('lodash/mergeWith');
require('lodash/merge');
require('lodash/isArray');
require('../_common/js/global-config/mobile/default-config.js');
require('../_common/js/global-config/mobile/locale/zh_CN.js');
require('../_chunks/dep-191173f8.js');
require('../_chunks/dep-2088457f.js');
require('dayjs');
require('../shared/render-tnode.js');
require('../grid/index.js');
require('../grid/props.js');
require('../grid/grid-item-props.js');
require('../image/index.js');
require('../image/image.js');
require('@vueuse/core');
require('tdesign-icons-vue-next');
require('../loading/index.js');
require('../_common/js/loading/circle-adapter.js');
require('../_common/js/utils/set-style.js');
require('../_common/js/utils/helper.js');
require('@babel/runtime/helpers/toConsumableArray');
require('@babel/runtime/helpers/objectWithoutProperties');
require('lodash/isNull');
require('lodash/isUndefined');
require('lodash/isNumber');
require('../loading/props.js');
require('../image/props.js');
require('../shared/render.js');
require('../swiper/index.js');
require('../swipe-cell/useSwipe.js');
require('../shared/dom.js');
require('../shared/util.js');
require('../swiper/props.js');
require('../shared/useVModel/index.js');
require('../popup/popup.js');
require('../popup/props.js');
require('../overlay/index.js');
require('../overlay/props.js');
require('../button/props.js');
require('../form/hooks.js');
require('../shared/hover.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);
var _slicedToArray__default = /*#__PURE__*/_interopDefaultLegacy(_slicedToArray);

var prefix = config["default"].prefix;
var name = "".concat(prefix, "-action-sheet");
var script = vue.defineComponent({
  name: name,
  components: {
    TPopup: popup_index["default"],
    TButton: button_index["default"],
    ActionSheetList: actionSheet_actionSheetList["default"],
    ActionSheetGrid: actionSheet_actionSheetGrid["default"]
  },
  props: actionSheet_props["default"],
  emits: ["selected", "update:modelValue", "cancel", "close", "update:visible"],
  setup: function setup(props, context) {
    var _useConfig = configProvider_useConfig.useConfig("actionSheet"),
      globalConfig = _useConfig.globalConfig;
    var actionItems = vue.computed(function () {
      return props.items.map(function (item) {
        if (typeof item === "string") {
          return {
            label: item
          };
        }
        return item;
      });
    });
    var _useDefault = shared_useDefault_index.useDefault(props, context.emit, "visible", "visible-change"),
      _useDefault2 = _slicedToArray__default["default"](_useDefault, 1),
      currentVisible = _useDefault2[0];
    var rootClasses = vue.computed(function () {
      return _defineProperty__default["default"]({}, "".concat(name, "__content"), true);
    });
    var descriptionClasses = vue.computed(function () {
      return _defineProperty__default["default"](_defineProperty__default["default"](_defineProperty__default["default"]({}, "".concat(name, "__description"), true), "".concat(name, "__description--left"), props.align === "left"), "".concat(name, "__description--grid"), props.theme === "grid");
    });
    vue.watch(function () {
      return currentVisible.value;
    }, function (val) {
      currentVisible.value = val;
    }, {
      immediate: true,
      deep: true
    });
    var hide = function hide(trigger) {
      var _props$onClose;
      context.emit("update:modelValue", false);
      (_props$onClose = props.onClose) === null || _props$onClose === void 0 || _props$onClose.call(props, {
        trigger: trigger
      });
    };
    var handleCancel = function handleCancel() {
      var _props$onCancel;
      (_props$onCancel = props.onCancel) === null || _props$onCancel === void 0 || _props$onCancel.call(props);
      context.emit("update:modelValue", false);
    };
    var handleSelected = function handleSelected(index) {
      var _props$onSelected;
      (_props$onSelected = props.onSelected) === null || _props$onSelected === void 0 || _props$onSelected.call(props, props === null || props === void 0 ? void 0 : props.items[index], index);
      hide("selected");
    };
    var handleClose = function handleClose() {
      hide("overlay");
    };
    return {
      prefix: prefix,
      name: vue.ref(name),
      globalConfig: globalConfig,
      rootClasses: rootClasses,
      descriptionClasses: descriptionClasses,
      actionItems: actionItems,
      currentVisible: currentVisible,
      handleCancel: handleCancel,
      handleSelected: handleSelected,
      handleClose: handleClose
    };
  }
});

function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_action_sheet_list = vue.resolveComponent("action-sheet-list");
  var _component_action_sheet_grid = vue.resolveComponent("action-sheet-grid");
  var _component_t_button = vue.resolveComponent("t-button");
  var _component_t_popup = vue.resolveComponent("t-popup");
  return vue.openBlock(), vue.createBlock(_component_t_popup, {
    visible: _ctx.currentVisible,
    placement: "bottom",
    "destroy-on-close": true,
    class: vue.normalizeClass(_ctx.name),
    onClose: _ctx.handleClose
  }, {
    default: vue.withCtx(function () {
      return [vue.createElementVNode("div", {
        class: vue.normalizeClass(_ctx.rootClasses)
      }, [_ctx.description ? (vue.openBlock(), vue.createElementBlock("p", {
        key: 0,
        class: vue.normalizeClass(_ctx.descriptionClasses)
      }, vue.toDisplayString(_ctx.description), 3)) : vue.createCommentVNode("", true), _ctx.theme === "list" ? (vue.openBlock(), vue.createBlock(_component_action_sheet_list, {
        key: 1,
        align: _ctx.align,
        items: _ctx.actionItems,
        onSelected: _ctx.handleSelected
      }, null, 8, ["align", "items", "onSelected"])) : vue.createCommentVNode("", true), _ctx.theme === "grid" ? (vue.openBlock(), vue.createBlock(_component_action_sheet_grid, {
        key: 2,
        items: _ctx.actionItems,
        count: _ctx.count,
        onSelected: _ctx.handleSelected
      }, null, 8, ["items", "count", "onSelected"])) : vue.createCommentVNode("", true), _ctx.showCancel ? (vue.openBlock(), vue.createElementBlock("div", {
        key: 3,
        class: vue.normalizeClass("".concat(_ctx.name, "__footer"))
      }, [vue.createElementVNode("div", {
        class: vue.normalizeClass("".concat(_ctx.name, "__gap-").concat(_ctx.theme))
      }, null, 2), vue.createVNode(_component_t_button, {
        class: vue.normalizeClass("".concat(_ctx.name, "__cancel")),
        variant: "text",
        block: "",
        onClick: _ctx.handleCancel
      }, {
        default: vue.withCtx(function () {
          return [vue.createTextVNode(vue.toDisplayString(_ctx.cancelText || _ctx.globalConfig.cancel), 1)];
        }),
        _: 1
      }, 8, ["class", "onClick"])], 2)) : vue.createCommentVNode("", true)], 2)];
    }),
    _: 1
  }, 8, ["visible", "class", "onClose"]);
}

script.render = render;

exports["default"] = script;
//# sourceMappingURL=action-sheet.js.map
