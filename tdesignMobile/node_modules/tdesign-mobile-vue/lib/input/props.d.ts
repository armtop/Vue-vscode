import { TdInputProps } from './type';
import { PropType } from 'vue';
declare const _default: {
    align: {
        type: PropType<"left" | "center" | "right">;
        default: "left" | "center" | "right";
        validator(val: TdInputProps['align']): boolean;
    };
    allowInputOverMax: BooleanConstructor;
    autocomplete: {
        type: StringConstructor;
        default: any;
    };
    autofocus: BooleanConstructor;
    borderless: BooleanConstructor;
    clearable: BooleanConstructor;
    disabled: BooleanConstructor;
    format: {
        type: PropType<import("./type").InputFormatType>;
    };
    label: {
        type: PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    layout: {
        type: PropType<"vertical" | "horizontal">;
        default: "vertical" | "horizontal";
        validator(val: TdInputProps['layout']): boolean;
    };
    maxcharacter: {
        type: NumberConstructor;
    };
    maxlength: {
        type: NumberConstructor;
    };
    name: {
        type: StringConstructor;
        default: string;
    };
    placeholder: {
        type: StringConstructor;
        default: any;
    };
    prefixIcon: {
        type: PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
    };
    readonly: BooleanConstructor;
    status: {
        type: PropType<"default" | "error" | "warning" | "success">;
        default: "default" | "error" | "warning" | "success";
        validator(val: TdInputProps['status']): boolean;
    };
    suffix: {
        type: PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    suffixIcon: {
        type: PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
    };
    tips: {
        type: PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    type: {
        type: PropType<"number" | "search" | "text" | "hidden" | "submit" | "password" | "tel" | "url">;
        default: "number" | "search" | "text" | "hidden" | "submit" | "password" | "tel" | "url";
        validator(val: TdInputProps['type']): boolean;
    };
    value: {
        type: PropType<string>;
        default: any;
    };
    modelValue: {
        type: PropType<string>;
        default: any;
    };
    defaultValue: {
        type: PropType<string>;
        default: string;
    };
    onBlur: PropType<(value: string, context: {
        e: FocusEvent;
    }) => void>;
    onChange: PropType<(value: string, context?: {
        e?: MouseEvent | InputEvent | CompositionEvent;
        trigger: "input" | "initial" | "clear";
    }) => void>;
    onClear: PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onFocus: PropType<(value: string, context: {
        e: FocusEvent;
    }) => void>;
    onValidate: PropType<(context: {
        error?: "exceed-maximum" | "below-minimum";
    }) => void>;
};
export default _default;
