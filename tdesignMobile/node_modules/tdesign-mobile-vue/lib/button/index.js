/**
 * tdesign v1.2.3
 * (c) 2024 TDesign Group
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var vue = require('vue');
var loading_index = require('../loading/index.js');
var button_props = require('./props.js');
var config = require('../config.js');
var form_hooks = require('../form/hooks.js');
var hooks_useClass = require('../hooks/useClass.js');
var hooks_tnode = require('../hooks/tnode.js');
var shared_hover = require('../shared/hover.js');
var shared_component = require('../shared/component.js');
require('../_common/js/loading/circle-adapter.js');
require('../_common/js/utils/set-style.js');
require('../_common/js/utils/helper.js');
require('@babel/runtime/helpers/toConsumableArray');
require('@babel/runtime/helpers/objectWithoutProperties');
require('@babel/runtime/helpers/slicedToArray');
require('lodash/isString');
require('lodash/isNull');
require('lodash/isUndefined');
require('lodash/isNumber');
require('lodash/isArray');
require('../loading/props.js');
require('../config-provider/useConfig.js');
require('lodash/isFunction');
require('lodash/cloneDeep');
require('../config-provider/context.js');
require('lodash/mergeWith');
require('lodash/merge');
require('../_common/js/global-config/mobile/default-config.js');
require('../_common/js/global-config/mobile/locale/zh_CN.js');
require('../_chunks/dep-191173f8.js');
require('@babel/runtime/helpers/typeof');
require('../_chunks/dep-2088457f.js');
require('dayjs');
require('lodash/camelCase');
require('lodash/kebabCase');
require('../hooks/render-tnode.js');
require('lodash/isEmpty');
require('lodash/isObject');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);

var prefix = config["default"].prefix;
var name = "".concat(prefix, "-button");
var Button = vue.defineComponent({
  name: name,
  directives: {
    Hover: shared_hover["default"]
  },
  props: button_props["default"],
  setup: function setup(props) {
    var buttonClass = hooks_useClass.usePrefixClass("button");
    var renderTNodeJSX = hooks_tnode.useTNodeJSX();
    var renderTNodeContent = hooks_tnode.useContent();
    var isDisabled = form_hooks.useFormDisabled();
    var buttonClasses = vue.computed(function () {
      return ["".concat(buttonClass.value), "".concat(buttonClass.value, "--size-").concat(props.size), "".concat(buttonClass.value, "--").concat(props.variant), _defineProperty__default["default"](_defineProperty__default["default"](_defineProperty__default["default"](_defineProperty__default["default"](_defineProperty__default["default"](_defineProperty__default["default"]({}, "".concat(buttonClass.value, "--").concat(props.theme), props.theme), "".concat(buttonClass.value, "--").concat(props.shape), props.shape), "".concat(buttonClass.value, "--ghost"), props.ghost), "".concat(buttonClass.value, "--block"), props.block), "".concat(buttonClass.value, "--disabled"), isDisabled.value), "".concat(buttonClass.value, "--loading"), props.loading)];
    });
    var handleClick = function handleClick(e) {
      if (!props.loading && !isDisabled.value) {
        var _props$onClick;
        (_props$onClick = props.onClick) === null || _props$onClick === void 0 || _props$onClick.call(props, e);
      } else {
        e.stopPropagation();
      }
    };
    return function () {
      var suffix = renderTNodeJSX("suffix");
      var readerIcon = function readerIcon() {
        if (props.loading) {
          return vue.createVNode(loading_index["default"], vue.mergeProps({
            "inherit-color": true
          }, props.loadingProps), null);
        }
        return renderTNodeJSX("icon");
      };
      var readerContent = function readerContent() {
        var content = renderTNodeContent("default", "content");
        return vue.createVNode("span", {
          "class": "".concat(buttonClass.value, "__content")
        }, [content]);
      };
      return vue.withDirectives(vue.createVNode("button", {
        "class": buttonClasses.value,
        "role": "button",
        "type": props.type,
        "disabled": props.disabled,
        "aria-disabled": props.disabled,
        "onClick": handleClick
      }, [readerIcon(), readerContent(), suffix]), [[vue.resolveDirective("hover"), {
        className: "".concat(buttonClass.value, "--hover")
      }]]);
    };
  }
});

var _Button = shared_component.withInstall(Button);

exports["default"] = _Button;
//# sourceMappingURL=index.js.map
