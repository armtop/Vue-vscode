declare const _default: import("vue").DefineComponent<{
    block: BooleanConstructor;
    content: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    disabled: BooleanConstructor;
    ghost: BooleanConstructor;
    icon: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
    };
    loading: BooleanConstructor;
    loadingProps: {
        type: import("vue").PropType<import("../loading").TdLoadingProps>;
    };
    shape: {
        type: import("vue").PropType<"circle" | "square" | "round" | "rectangle">;
        default: "circle" | "square" | "round" | "rectangle";
        validator(val: "circle" | "square" | "round" | "rectangle"): boolean;
    };
    size: {
        type: import("vue").PropType<"small" | "medium" | "large" | "extra-small">;
        default: "small" | "medium" | "large" | "extra-small";
        validator(val: "small" | "medium" | "large" | "extra-small"): boolean;
    };
    suffix: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
    };
    theme: {
        type: import("vue").PropType<"default" | "light" | "primary" | "danger">;
        default: "default" | "light" | "primary" | "danger";
        validator(val: "default" | "light" | "primary" | "danger"): boolean;
    };
    type: {
        type: import("vue").PropType<"button" | "reset" | "submit">;
        default: "button" | "reset" | "submit";
        validator(val: "button" | "reset" | "submit"): boolean;
    };
    variant: {
        type: import("vue").PropType<"base" | "text" | "outline">;
        default: "base" | "text" | "outline";
        validator(val: "base" | "text" | "outline"): boolean;
    };
    onClick: import("vue").PropType<(e: MouseEvent) => void>;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    block: BooleanConstructor;
    content: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    disabled: BooleanConstructor;
    ghost: BooleanConstructor;
    icon: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
    };
    loading: BooleanConstructor;
    loadingProps: {
        type: import("vue").PropType<import("../loading").TdLoadingProps>;
    };
    shape: {
        type: import("vue").PropType<"circle" | "square" | "round" | "rectangle">;
        default: "circle" | "square" | "round" | "rectangle";
        validator(val: "circle" | "square" | "round" | "rectangle"): boolean;
    };
    size: {
        type: import("vue").PropType<"small" | "medium" | "large" | "extra-small">;
        default: "small" | "medium" | "large" | "extra-small";
        validator(val: "small" | "medium" | "large" | "extra-small"): boolean;
    };
    suffix: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
    };
    theme: {
        type: import("vue").PropType<"default" | "light" | "primary" | "danger">;
        default: "default" | "light" | "primary" | "danger";
        validator(val: "default" | "light" | "primary" | "danger"): boolean;
    };
    type: {
        type: import("vue").PropType<"button" | "reset" | "submit">;
        default: "button" | "reset" | "submit";
        validator(val: "button" | "reset" | "submit"): boolean;
    };
    variant: {
        type: import("vue").PropType<"base" | "text" | "outline">;
        default: "base" | "text" | "outline";
        validator(val: "base" | "text" | "outline"): boolean;
    };
    onClick: import("vue").PropType<(e: MouseEvent) => void>;
}>>, {
    shape: "circle" | "square" | "round" | "rectangle";
    size: "small" | "medium" | "large" | "extra-small";
    type: "button" | "reset" | "submit";
    theme: "default" | "light" | "primary" | "danger";
    loading: boolean;
    block: boolean;
    disabled: boolean;
    variant: "base" | "text" | "outline";
    ghost: boolean;
}, {}>;
export default _default;
