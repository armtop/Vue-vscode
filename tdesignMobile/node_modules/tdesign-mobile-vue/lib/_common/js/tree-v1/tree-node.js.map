{"version":3,"file":"tree-node.js","sources":["../../../../src/_common/js/tree-v1/tree-node.ts"],"sourcesContent":["import isNull from 'lodash/isNull';\nimport isFunction from 'lodash/isFunction';\nimport isNumber from 'lodash/isNumber';\nimport uniqueId from 'lodash/uniqueId';\nimport isBoolean from 'lodash/isBoolean';\nimport isNil from 'lodash/isNil';\nimport get from 'lodash/get';\nimport { TreeStore } from './tree-store';\nimport {\n  TreeNodeValue,\n  TreeNodeState,\n  TypeIdMap,\n  TypeTreeItem,\n  TypeSettingOptions,\n  TypeTreeNodeModel,\n  TypeTreeNodeData,\n} from './types';\nimport {\n  createNodeModel,\n  updateNodeModel,\n} from './tree-node-model';\nimport log from '../log';\n\nconst { hasOwnProperty } = Object.prototype;\n\n// 这里的属性为 data 中属性可以同步到 treeNode 实例属性的白名单\n// 仅 label 属性和在列表中的属性可以通过 set 方法配置到 treeNode 实例上\nexport const setableStatus: Record<string, boolean | null> = {\n  expandMutex: null,\n  activable: null,\n  checkable: null,\n  draggable: null,\n  loading: false,\n};\n\nexport const setableProps = Object.keys(setableStatus);\n\nexport const syncableProps = [...setableProps, 'actived', 'expanded', 'checked'];\n\nexport const privateKey = '__tdesign_id__';\n\n// vm 开头为视图属性，不可以外部设置\n// 用于触发视图更新\n// public 方法，在 ui 组件中有可能在使用，会保障其输入输出实现\n// private 方法，可能会改动其输入输出\n\n/**\n * tree 节点数据模型\n * @class TreeNode\n * @param {TreeStore} tree TreeStore 实例\n * @param {object} [data] 节点数据\n * @param {TreeNode} parent 指定的当前 TreeStore 实例中的父节点\n */\nexport class TreeNode {\n  // 节点隶属的树实例\n  public tree: TreeStore;\n\n  // 节点 id ，唯一标志\n  public value: string;\n\n  // 节点文本\n  public label: string;\n\n  // 节点数据\n  public data: TypeTreeNodeData;\n\n  // 父节点\n  public parent: TreeNode;\n\n  // 子节点列表\n  public children: TreeNode[] | boolean;\n\n  // 暴露的 treeNodeModel，这个对象的属性和 api 提供给用户使用\n  public model: TypeTreeNodeModel;\n\n  // 是否为叶节点\n  public vmIsLeaf: boolean;\n\n  // 是否为子节点中的第一个\n  public vmIsFirst: boolean;\n\n  // 是否为子节点中的最后\n  public vmIsLast: boolean;\n\n  // 节点是否是经过过滤剩下的\n  public vmIsRest: boolean;\n\n  // 节点是否展示为锁定状态\n  public vmIsLocked: boolean;\n\n  // 节点在视图上实际的展开状态\n  public expanded: boolean;\n\n  // 展开时是否收起同级节点，对子节点生效\n  public expandMutex: null | boolean;\n\n  // 节点在视图上实际的激活状态\n  public actived: boolean;\n\n  // 是否可激活\n  public activable: null | boolean;\n\n  // 是否可选中\n  public checkable: null | boolean;\n\n  // 是否可选中的视图呈现\n  public vmCheckable: boolean;\n\n  // 节点在视图上实际的选中态\n  public checked: boolean;\n\n  // 节点实际是否为半选状态\n  public indeterminate: boolean;\n\n  // 节点是否已禁用\n  public disabled: null | boolean;\n\n  // 节点是否可拖动\n  public draggable: null | boolean;\n\n  // 节点是否可视\n  public visible: boolean;\n\n  // 节点在树中的层级\n  public level: number;\n\n  // 节点是否正在加载数据\n  public loading: boolean;\n\n  public constructor(\n    tree: TreeStore,\n    data?: TypeTreeNodeData,\n    parent?: TreeNode,\n  ) {\n    this.data = data;\n    this.tree = tree;\n\n    const config = tree.config || {};\n    const prefix = config.prefix || 't';\n    const keys = config.keys || {};\n    const propChildren = keys.children || 'children';\n    const propLabel = keys.label || 'label';\n    const propValue = keys.value || 'value';\n    const propsDisabled = keys.disabled || 'disabled';\n\n    // 节点自身初始化数据\n    this.model = null;\n    this.children = null;\n    this.level = 0;\n\n    // vm 开头为视图属性，不可以外部设置\n    this.vmCheckable = false;\n    this.vmIsLeaf = false;\n    this.vmIsFirst = false;\n    this.vmIsLast = false;\n    this.vmIsRest = false;\n    this.vmIsLocked = false;\n\n    // 初始化节点基本状态\n    this.visible = false;\n    this.actived = false;\n    this.checked = false;\n    this.indeterminate = false;\n    this.loading = false;\n    this.expanded = config.expandAll;\n\n    // 下面几个属性，节点初始化的时候，可以设置与 treeStore.config 不同的值\n    // 初始化默认值为 null, 则在方法判断时，默认以 treeStore.config 为准\n    // 传递或者设置属性为 boolean 类型的值，则以节点属性值为准\n    // 这种处理方式主要是解决 treeStore.setConfig 方法配置全局属性导致的状态切换与保留的问题\n    this.activable = null;\n    this.checkable = null;\n    this.expandMutex = null;\n    this.draggable = null;\n\n    // 为节点设置唯一 id\n    // tree 数据替换时，value 相同有可能导致节点状态渲染冲突\n    // 用这个 唯一 id 来解决，用于类似 vue 组件的唯一 key 指定场景\n    this[privateKey] = uniqueId(prefix);\n\n    // 设置 value\n    // 没有 value 的时候，value 默认使用自动生成的 唯一 id\n    this.value = isNil(get(data, propValue))\n      ? this[privateKey]\n      : get(data, propValue);\n    const { nodeMap, privateMap } = tree;\n    if (nodeMap.get(this.value)) {\n      log.warn('Tree', `Dulplicate value: ${this.value}`);\n    }\n    nodeMap.set(this.value, this);\n    privateMap.set(this[privateKey], this);\n\n    // 设置标签\n    this.label = get(data, propLabel) || '';\n    // 设置是否禁用\n    this.disabled = get(data, propsDisabled);\n\n    // 设置子节点\n    const children = data[propChildren];\n    // 子节点为 true 的状态逻辑需要放到状态计算之前\n    // 初始化加载逻辑需要依据这个来进行\n    if (children === true) {\n      this.children = children;\n    }\n\n    // 设置父节点\n    if (parent && parent instanceof TreeNode) {\n      this.parent = parent;\n    } else {\n      this.parent = null;\n    }\n\n    // 同步数据属性到节点属性\n    // 仅 syncableStatus 列举的属性被同步到 treeNode 实例属性\n    syncableProps.forEach((prop) => {\n      if (typeof data[prop] !== 'undefined') {\n        this[prop] = data[prop];\n      }\n    });\n\n    // 初始化节点状态\n    this.initActived();\n    this.initExpanded();\n    this.initChecked();\n\n    // 这里的子节点加载逻辑不能放到状态初始化之前\n    // 因为子节点状态计算依赖父节点初始化状态\n    if (Array.isArray(children)) {\n      this.append(children);\n    } else if (children === true && !config.lazy) {\n      this.loadChildren();\n    }\n\n    // checked 状态依赖于子节点状态\n    // 因此子节点插入之后需要再次更新状态\n    this.updateChecked();\n\n    // 标记节点更新\n    this.update();\n    // 创建节点需要回流操作\n    tree.reflow(this);\n  }\n\n  /* ------ 状态初始化 ------ */\n\n  /**\n   * 初始化选中态\n   * @return void\n   */\n  private initChecked(): void {\n    const { tree, value, parent } = this;\n    const { checkedMap } = tree;\n    const { checkStrictly } = tree.config;\n    if (this.checked) {\n      checkedMap.set(value, true);\n    }\n    if (!checkStrictly && parent?.isChecked()) {\n      checkedMap.set(value, true);\n    }\n    this.updateChecked();\n  }\n\n  /**\n   * 初始化节点展开状态\n   * @return void\n   */\n  private initExpanded(): void {\n    const { tree } = this;\n    let { expanded } = this;\n    const { config } = tree;\n    if (isNumber(config.expandLevel) && this.getLevel() < config.expandLevel) {\n      tree.expandedMap.set(this.value, true);\n      expanded = true;\n    }\n    if (this.children === true && config.lazy) {\n      expanded = false;\n    }\n    if (expanded) {\n      tree.expandedMap.set(this.value, true);\n    } else {\n      tree.expandedMap.delete(this.value);\n    }\n    this.expanded = expanded;\n  }\n\n  /**\n   * 初始化节点激活状态\n   * @return void\n   */\n  private initActived(): void {\n    const { tree, actived } = this;\n    if (actived && this.isActivable()) {\n      tree.activedMap.set(this.value, true);\n    }\n  }\n\n  /* ------ 节点操作 ------ */\n\n  /**\n   * 追加节点数据\n   * @param {object | object[]} data 节点数据\n   * @return void\n   */\n  public append(data: TypeTreeNodeData | TypeTreeNodeData[]): void {\n    const list = [];\n    if (!Array.isArray(data)) {\n      list.push(data);\n    } else {\n      list.push(...data);\n    }\n    if (list.length <= 0) {\n      return;\n    }\n    if (!Array.isArray(this.children)) {\n      this.children = [];\n    }\n    const { children, tree } = this;\n    list.forEach((item) => {\n      let node = null;\n      if (item instanceof TreeNode) {\n        node = item;\n        node.appendTo(this.tree, this);\n      } else {\n        node = new TreeNode(this.tree, item, this);\n        children.push(node);\n      }\n    });\n    tree.reflow(this);\n    this.updateRelated();\n  }\n\n  /**\n   * 将当前节点追加到某个父节点的子节点列表中\n   * @param {TreeStore} tree 目标树\n   * @param {TreeNode} [parent] 目标父节点\n   * @param {number} [index] 预期在子节点列表中的位置\n   * @return void\n   */\n  public appendTo(tree: TreeStore, parent?: TreeNode, index?: number): void {\n    const parentNode = parent;\n    let targetIndex = -1;\n    if (isNumber(index)) {\n      targetIndex = index;\n    }\n\n    const targetParents = parentNode?.getParents() || [];\n    const includeCurrent = targetParents.some((pnode) => pnode === this);\n    if (includeCurrent) {\n      throw new Error('无法将父节点插入到子节点');\n    }\n\n    if (parentNode === this) {\n      throw new Error('无法将节点插入到本节点');\n    }\n\n    if (Array.isArray(parentNode?.children)) {\n      const targetPosNode = parentNode?.children[targetIndex];\n      if (targetPosNode && targetPosNode === this) {\n        // 无需将节点插入到原位置\n        return;\n      }\n    }\n\n    // 先要取得 siblings\n    // 因为要应对节点在同一个 siblings 中变换位置的情况\n    let siblings = null;\n    if (parentNode instanceof TreeNode) {\n      if (!Array.isArray(parentNode?.children)) {\n        parentNode.children = [];\n      }\n      siblings = parent.children;\n    } else {\n      siblings = tree.children;\n    }\n\n    // 上面的逻辑其实已经覆盖了所有业务情况\n    // 这里的逻辑报错仅用于极限兜底，防止 treeStore 被误使用\n    if (!Array.isArray(siblings)) {\n      throw new Error('无法插入到目标位置，可插入的节点列表不存在');\n    }\n\n    const prevLength = siblings.length;\n    const prevIndex = this.getIndex();\n\n    this.remove();\n\n    if (isNumber(index)) {\n      let targetIndex = index;\n      if (parentNode === this.parent) {\n        // 前置节点被拔出后再插入到同一个 siblings 时，会引起目标 index 的变化\n        // 因此要相应的变更插入位置\n        // 后置节点被拔出时，目标 index 是不变的\n        const curLength = siblings.length;\n        if (curLength < prevLength && prevIndex <= targetIndex) {\n          targetIndex -= 1;\n        }\n      }\n      siblings.splice(targetIndex, 0, this);\n    } else {\n      siblings.push(this);\n    }\n\n    this.parent = parentNode;\n\n    // 插入节点应当继承展开状态\n    // 但不要继承选中状态和高亮状态\n    const nodes = this.walk();\n    nodes.forEach((item) => {\n      const node = item;\n      node.tree = tree;\n      tree.nodeMap.set(node.value, node);\n      tree.privateMap.set(node[privateKey], node);\n      if (node.expanded) {\n        tree.expandedMap.set(node.value, true);\n      }\n    });\n\n    const updateNodes = parentNode?.walk() || tree.children.map((item) => item.walk()).flat();\n    updateNodes.forEach((node) => {\n      node.update();\n      node.updateChecked();\n    });\n\n    tree.reflow();\n  }\n\n  /**\n   * 插入一个节点或者数据到到同级节点的目标位置\n   * @param {TreeNode | object} item 要插入的节点或者数据\n   * @param {number} [index] 预期在子节点列表中的位置\n   * @return void\n   */\n  private insert(item: TypeTreeItem, index?: number): void {\n    const { tree, parent } = this;\n    const siblings = this.getSiblings();\n    let node = null;\n    if (item instanceof TreeNode) {\n      node = item;\n      node.appendTo(tree, parent, index);\n    } else if (item) {\n      node = new TreeNode(tree, item, parent);\n      if (isNumber(index)) {\n        siblings.splice(index, 0, node);\n      }\n      siblings.forEach((sibling) => {\n        sibling.update();\n      });\n    }\n    tree.reflow();\n  }\n\n  /**\n   * 在当前节点之前插入节点\n   * @param {TreeNode | object} newData 要插入的节点或者数据\n   * @return void\n   */\n  public insertBefore(newData: TypeTreeItem): void {\n    const index = this.getIndex();\n    this.insert(newData, index);\n  }\n\n  /**\n   * 在当前节点之后插入节点\n   * @param {TreeNode | object} newData 要插入的节点或者数据\n   * @return void\n   */\n  public insertAfter(newData: TypeTreeItem): void {\n    const index = this.getIndex();\n    this.insert(newData, index + 1);\n  }\n\n  /**\n   * 从当前树中移除本节点\n   * @return void\n   */\n  public remove(): void {\n    const { tree } = this;\n\n    const nodes = this.walk();\n    const siblings = this.getSiblings();\n    const index = this.getIndex();\n    // 从父节点的子节点列表中移除自己\n    // 但不要将自己的父节点移除，避免渲染与判断失败\n    if (Array.isArray(siblings)) {\n      siblings.splice(index, 1);\n    }\n    // 清理与树的关系，但不清理自身状态\n    nodes.forEach((node) => {\n      node.clean();\n    });\n    // 同级节点的连线状态会受到影响\n    siblings.forEach((node) => {\n      node.update();\n    });\n    // 父节点选中态会受到影响\n    this.updateParents();\n    tree.reflow();\n  }\n\n  /**\n   * 清除本节点与当前树的关系\n   * @return void\n   */\n  private clean(): void {\n    const { tree, value } = this;\n    tree.activedMap.delete(value);\n    tree.checkedMap.delete(value);\n    tree.expandedMap.delete(value);\n    tree.nodeMap.delete(value);\n    tree.filterMap.delete(value);\n    tree.privateMap.delete(this[privateKey]);\n  }\n\n  /**\n   * 异步加载子节点\n   * @return Promise<void>\n   */\n  private async loadChildren(): Promise<void> {\n    const config = get(this, 'tree.config') || {};\n    if (this.children === true && !this.loading) {\n      if (isFunction(config.load)) {\n        this.loading = true;\n        this.update();\n        let list = [];\n        list = await config.load(this);\n        this.tree.emit('load', {\n          node: this,\n          data: list,\n        });\n        this.loading = false;\n        if (Array.isArray(list) && list.length > 0) {\n          this.append(list);\n        } else {\n          this.children = false;\n        }\n        this.update();\n      }\n    }\n  }\n\n  /**\n   * 设置节点状态\n   * - 为节点设置独立于配置的 disabled 状态: set({ disabled: true })\n   * - 清除独立于配置的 disabled 状态: set({ disabled: null })\n   * @param {object} item 节点状态对象\n   * @return void\n   */\n  public set(item: TreeNodeState): void {\n    const { tree } = this;\n    const keys = Object.keys(item);\n    keys.forEach((key) => {\n      if (hasOwnProperty.call(setableStatus, key) || key === 'label' || key === 'disabled') {\n        this[key] = item[key];\n      }\n    });\n    tree.updated(this);\n  }\n\n  /* ------ 节点获取 ------- */\n\n  /**\n   * 获取本节点的父节点\n   * @return TreeNode 父节点\n   */\n  public getParent(): TreeNode {\n    return this.parent;\n  }\n\n  /**\n   * 获取所有父级节点\n   * - 顺序为从当前到根\n   * @return TreeNode[] 父级节点数组\n   */\n  public getParents(): TreeNode[] {\n    const parents = [];\n    let node = this.parent;\n    while (node) {\n      parents.push(node);\n      node = node.parent;\n    }\n    return parents;\n  }\n\n  /**\n   * 获取所有兄弟节点，包含自己在内\n   * @return TreeNode[] 兄弟节点数组\n   */\n  public getSiblings(): TreeNode[] {\n    const { parent, tree } = this;\n    let list: TreeNode[] = [];\n    if (parent) {\n      if (Array.isArray(parent.children)) {\n        list = parent.children;\n      }\n    } else if (tree) {\n      list = tree.children;\n    }\n    return list;\n  }\n\n  /**\n   * 获取当前节点的子节点\n   * @param {boolean} deep 是否获取所有深层子节点\n   * @return TreeNodeModel[] 子节点数组\n   */\n  public getChildren(deep?: boolean): boolean | TypeTreeNodeModel[] {\n    let childrenModel: boolean | TypeTreeNodeModel[] = false;\n    const { children } = this;\n    if (Array.isArray(children)) {\n      if (children.length > 0) {\n        if (deep) {\n          const nodes = this.walk();\n          nodes.shift();\n          childrenModel = nodes.map((item) => item.getModel());\n        } else {\n          childrenModel = children.map((item) => item.getModel());\n        }\n      } else {\n        childrenModel = false;\n      }\n    } else if (isBoolean(children)) {\n      childrenModel = children;\n    }\n    return childrenModel;\n  }\n\n  /**\n   * 获取本节点的根节点\n   * @return TreeNode 根节点\n   */\n  public getRoot(): TreeNode {\n    const parents = this.getParents();\n    return parents[parents.length - 1] || null;\n  }\n\n  /**\n   * 获取节点在父节点的子节点列表中的位置\n   * - 如果没有父节点，则获取节点在根节点列表的位置\n   * @return number 节点位置序号\n   */\n  public getIndex(): number {\n    const list = this.getSiblings();\n    return list.indexOf(this);\n  }\n\n  /**\n   * 返回路径节点\n   * - 路径节点包含自己在内\n   * - 节点顺序与父级节点顺序相反，从根到当前\n   * @return TreeNode[] 路径节点数组\n   */\n  public getPath(): TreeNode[] {\n    const nodes = this.getParents();\n    nodes.unshift(this);\n    return nodes.reverse();\n  }\n\n  /**\n   * 获取节点所在层级\n   * @return number 层级序号\n   */\n  public getLevel(): number {\n    const parents = this.getParents();\n    return parents.length;\n  }\n\n  /* ------ 节点状态判断 ------ */\n\n  /**\n   * 判断节点是否被过滤\n   * @return boolean 是否被过滤方法命中\n   */\n  public isRest(): boolean {\n    const { config, filterMap, hasFilter } = this.tree;\n\n    let rest = false;\n    if (hasFilter) {\n      // 仅在存在过滤条件时，过滤命中才有效\n      const nodeModel = this.getModel();\n      rest = config.filter(nodeModel);\n    }\n\n    if (rest) {\n      filterMap.set(this.value, true);\n    } else if (filterMap.get(this.value)) {\n      filterMap.delete(this.value);\n    }\n\n    return rest;\n  }\n\n  /**\n   * 判断节点是否可见\n   * @return boolean 是否可见\n   */\n  public isVisible(): boolean {\n    const { nodeMap, hasFilter, config } = this.tree;\n    const { allowFoldNodeOnFilter } = config;\n\n    let visible = true;\n\n    if (!nodeMap.get(this.value)) {\n      // 节点不在当前树上，所以不可见\n      return false;\n    }\n\n    if (hasFilter && !allowFoldNodeOnFilter) {\n      // 如果存在过滤条件\n      // 锁定状态和过滤命中状态，直接呈现\n      visible = this.vmIsLocked || this.vmIsRest;\n      return visible;\n    }\n\n    // 标志所有父节点展开导致的可见状态\n    let expandVisible = true;\n    const parents = this.getParents();\n    if (parents.length > 0) {\n      expandVisible = parents.every((node: TreeNode) => node.expanded);\n    }\n\n    if (hasFilter) {\n      visible = expandVisible && (this.vmIsRest || this.vmIsLocked);\n    } else {\n      visible = expandVisible;\n    }\n    return visible;\n  }\n\n  /**\n   * 判断节点是否被禁用\n   * @return boolean 是否被禁用\n   */\n  public isDisabled(): boolean {\n    const { tree } = this;\n    const { hasFilter, config } = tree;\n    const { disabled, allowFoldNodeOnFilter } = config;\n    if (hasFilter && !allowFoldNodeOnFilter && this.vmIsLocked && !this.vmIsRest) {\n      return true;\n    }\n    let state = disabled;\n    if (typeof this.disabled === 'boolean') {\n      state = this.disabled;\n    }\n    return state;\n  }\n\n  /**\n   * 判断节点是否能拖拽\n   * @return boolean 是否能拖拽\n   */\n  public isDraggable(): boolean {\n    let state = !!get(this, 'tree.config.draggable');\n    if (typeof this.draggable === 'boolean') {\n      state = this.draggable;\n    }\n    return state;\n  }\n\n  /**\n   * 判断子节点是否互斥展开\n   * @return boolean 子节点是否互斥展开\n   */\n  public isExpandMutex(): boolean {\n    let state = !!get(this, 'tree.config.expandMutex');\n    if (typeof this.expandMutex === 'boolean') {\n      state = this.expandMutex;\n    }\n    return state;\n  }\n\n  /**\n   * 节点是否可被激活\n   * @return boolean 是否可被激活\n   */\n  public isActivable() {\n    let state = !!get(this, 'tree.config.activable');\n    if (typeof this.activable === 'boolean') {\n      state = this.activable;\n    }\n    return state;\n  }\n\n  /**\n   * 节点是否可选\n   * @return boolean 是否可选\n   */\n  public isCheckable() {\n    let state = !!get(this, 'tree.config.checkable');\n    if (typeof this.checkable === 'boolean') {\n      state = this.checkable;\n    }\n    return state;\n  }\n\n  /**\n   * 节点是否被激活\n   * @param {Map} [map] 预设激活节点 map, 用于计算节点在预期环境中的激活状态\n   * @return boolean 是否被激活\n   */\n  public isActived(map?: Map<string, boolean>): boolean {\n    const { tree, value } = this;\n    const activedMap = map || tree.activedMap;\n    return !!(tree.nodeMap.get(value) && activedMap.get(value));\n  }\n\n  /**\n   * 节点是否已展开\n   * @param {Map} [map] 预设展开节点 map, 用于计算节点在预期环境中的展开状态\n   * @return boolean 是否已展开\n   */\n  public isExpanded(map?: Map<string, boolean>): boolean {\n    const { tree, value, vmIsLocked } = this;\n    const { hasFilter, config } = tree;\n    const { allowFoldNodeOnFilter } = config;\n    if (hasFilter && !allowFoldNodeOnFilter && vmIsLocked) return true;\n    const expandedMap = map || tree.expandedMap;\n    return !!(tree.nodeMap.get(value) && expandedMap.get(value));\n  }\n\n  /**\n   * 节点是否被选中\n   * @param {Map} [map] 预设选中节点 map, 用于计算节点在预期环境中的选中态\n   * @return boolean 是否被选中\n   */\n  public isChecked(map?: TypeIdMap): boolean {\n    const { children, tree, value } = this;\n    const { checkStrictly } = tree.config;\n    // 节点不在当前树上，视为未选中\n    if (!tree.nodeMap.get(value)) return false;\n    // 节点不可选，视为未选中\n    if (!this.isCheckable()) return false;\n    const checkedMap = map || tree.checkedMap;\n    let checked = false;\n    // 如果在 checkedMap 中，则直接为 true\n    if (checkedMap.get(value)) {\n      return true;\n    }\n    // 严格模式，则已经可以判定选中状态\n    if (checkStrictly) return checked;\n    // 允许关联状态的情况下，需要进一步判断\n    if (Array.isArray(children) && children.length > 0) {\n      // 子节点全部选中，则当前节点选中\n      checked = children.every((node) => {\n        const childIsChecked = node.isChecked(checkedMap);\n        return childIsChecked;\n      });\n    } else {\n      // 从父节点状态推断子节点状态\n      // 这里再调用 isChecked 会导致死循环\n      const parents = this.getParents();\n      checked = parents.some((node) => checkedMap.get(node.value));\n    }\n    return checked;\n  }\n\n  /**\n   * 是否为半选状态\n   * @return boolean 是否为半选状态\n   */\n  public isIndeterminate(): boolean {\n    const { children, tree, value } = this;\n    const { checkStrictly } = tree.config;\n    // 节点不在当前树上，视为未选中\n    if (!tree.nodeMap.get(value)) return false;\n    // 节点不可选，视为未选中\n    if (!this.isCheckable()) return false;\n    // 严格模式没有半选状态\n    if (checkStrictly) return false;\n    // 叶节点不存在半选状态\n    if (!Array.isArray(children)) return false;\n\n    let childChecked: null | boolean = null;\n    const indeterminate = children.some((node: TreeNode) => {\n      if (node.isIndeterminate()) {\n        // 子节点有任意一个半选，则其为半选状态\n        return true;\n      }\n      if (isNull(childChecked)) {\n        childChecked = node.isChecked();\n      }\n      if (childChecked !== node.isChecked()) {\n        // 子节点选中状态不一致，则其为半选状态\n        return true;\n      }\n      return false;\n    });\n\n    return indeterminate;\n  }\n\n  /**\n   * 是否为兄弟节点中的第一个节点\n   * @return boolean 是否为第一个节点\n   */\n  public isFirst(): boolean {\n    const siblings = this.getSiblings();\n    return siblings[0] === this;\n  }\n\n  /**\n   * 是否为兄弟节点中的最后一个节点\n   * @return boolean 是否为最后一个节点\n   */\n  public isLast(): boolean {\n    const siblings = this.getSiblings();\n    return siblings[siblings.length - 1] === this;\n  }\n\n  /**\n   * 是否为叶子节点，叶子节点没有子节点\n   * @return boolean 是否为叶子节点\n   */\n  public isLeaf(): boolean {\n    let isLeaf = false;\n    if (Array.isArray(this.children)) {\n      isLeaf = this.children.length <= 0;\n    } else {\n      isLeaf = !this.children;\n    }\n    return isLeaf;\n  }\n\n  /* ------ 节点状态切换 ------ */\n\n  /**\n   * 锁定节点，解锁节点\n   * - 搜索过滤节点时，路径节点需要固定呈现，视其为锁定态\n   * @param {boolean} lockState 锁定状态\n   * @return void\n   */\n  public lock(lockState: boolean): void {\n    this.vmIsLocked = lockState;\n    this.expanded = this.isExpanded();\n    this.visible = this.isVisible();\n  }\n\n  /**\n   * 节点展开关闭后需要调用的状态检查函数\n   * @return void\n   */\n  public afterExpanded(): void {\n    this.update();\n    // 节点展开时检查延迟加载的数据\n    if (this.expanded && this.children === true) {\n      this.loadChildren();\n    }\n    this.updateChildren();\n  }\n\n  /**\n   * 切换节点展开状态\n   * - 用于受控逻辑处理\n   * - 仅返回预期状态值数组，不直接操作状态\n   * @return string[] 当前树展开的节点值数组\n   */\n  public toggleExpanded(): TreeNodeValue[] {\n    return this.setExpanded(!this.isExpanded());\n  }\n\n  /**\n   * 设置节点展开状态\n   * @param {boolean} expanded 节点展开状态\n   * @param {object} [opts] 操作选项\n   * @param {boolean} [opts.directly=false] 是否直接操作节点状态\n   * @return string[] 当前树展开的节点值数组\n   */\n  public setExpanded(\n    expanded: boolean,\n    opts?: TypeSettingOptions\n  ): TreeNodeValue[] {\n    const { tree } = this;\n    const { config } = tree;\n    const options = {\n      directly: false,\n      ...opts,\n    };\n\n    let map = tree.expandedMap;\n    if (!options.directly) {\n      map = new Map(tree.expandedMap);\n    }\n\n    // 手风琴效果，先折叠同级节点\n    if (expanded) {\n      // 列举需要展开的节点\n      const shouldExpandNodes = [];\n      // 自己一定在展开列表中\n      shouldExpandNodes.push(this);\n      if (config.expandParent) {\n        // expandParent 为 true，则父节点都要展开\n        this.getParents().forEach((node) => {\n          shouldExpandNodes.push(node);\n        });\n      }\n      shouldExpandNodes.forEach((node) => {\n        let isExpandMutex = false;\n        // 对于每一个节点，都需要判断是否启用手风琴效果\n        if (node.parent) {\n          isExpandMutex = node.parent.isExpandMutex();\n        } else {\n          isExpandMutex = tree?.config?.expandMutex;\n        }\n        if (isExpandMutex) {\n          // 折叠列表中，先移除同级节点\n          const siblings = node.getSiblings();\n          siblings.forEach((snode) => {\n            map.delete(snode.value);\n            // 同级节点相关状态更新\n            snode.update();\n            snode.updateChildren();\n          });\n        }\n        // 最后设置自己的折叠状态\n        map.set(node.value, true);\n        node.update();\n        node.updateChildren();\n      });\n    } else {\n      map.delete(this.value);\n    }\n\n    if (options.directly) {\n      this.afterExpanded();\n    }\n\n    return tree.getExpanded(map);\n  }\n\n  /**\n   * 切换节点激活状态\n   * - 用于受控逻辑处理\n   * - 仅返回预期状态值数组，不直接操作状态\n   * @return string[] 当前树激活的节点值数组\n   */\n  public toggleActived(): TreeNodeValue[] {\n    return this.setActived(!this.isActived());\n  }\n\n  /**\n   * 设置节点激活状态\n   * @param {boolean} actived 节点激活状态\n   * @param {object} [opts] 操作选项\n   * @param {boolean} [opts.directly=false] 是否直接操作节点状态\n   * @return string[] 当前树激活的节点值数组\n   */\n  public setActived(\n    actived: boolean,\n    opts?: TypeSettingOptions\n  ): TreeNodeValue[] {\n    const { tree } = this;\n    const options = {\n      directly: false,\n      ...opts,\n    };\n    const config = tree.config || {};\n    let map = tree.activedMap;\n    if (!options.directly) {\n      map = new Map(tree.activedMap);\n    }\n    if (this.isActivable()) {\n      if (actived) {\n        const prevKeys = Array.from(map.keys());\n        if (!config.activeMultiple) {\n          map.clear();\n        }\n        prevKeys.forEach((value) => {\n          const node = tree.getNode(value);\n          node?.update();\n        });\n        map.set(this.value, true);\n      } else {\n        map.delete(this.value);\n      }\n    }\n    this.update();\n    return tree.getActived(map);\n  }\n\n  /**\n   * 切换节点选中状态\n   * - 用于受控逻辑处理\n   * - 仅返回预期状态值数组，不直接操作状态\n   * @return string[] 当前树选中的节点值数组\n   */\n  public toggleChecked(): TreeNodeValue[] {\n    return this.setChecked(!this.isChecked());\n  }\n\n  /**\n   * 设置节点选中状态\n   * - 节点 UI 操作时调用这个方法\n   * - 节点设置自身状态时调用这个方法\n   * @param {boolean} checked 节点选中状态\n   * @param {object} [opts] 操作选项\n   * @param {boolean} [opts.isAction=true] 是否为 UI 动作\n   * @param {boolean} [opts.directly=false] 是否直接操作节点状态\n   * @return string[] 当前树选中的节点值数组\n   */\n  public setChecked(\n    checked: boolean,\n    opts?: TypeSettingOptions\n  ): TreeNodeValue[] {\n    const { tree } = this;\n    const config = tree.config || {};\n    const options: TypeSettingOptions = {\n      // 为 true, 为 UI 操作，状态扩散受 disabled 影响\n      // 为 false, 为值操作, 状态扩散不受 disabled 影响\n      isAction: true,\n      // 为 true, 直接操作节点状态\n      // 为 false, 返回预期状态\n      directly: false,\n      ...opts,\n    };\n    let map = tree.checkedMap;\n    if (!options.directly) {\n      map = new Map(tree.checkedMap);\n    }\n    if (!this.isCheckable()) {\n      // 当前节点非可选节点，则不可设置选中态\n      return tree.getChecked(map);\n    }\n    if (options.isAction && this.isDisabled()) {\n      // 对于 UI 动作，禁用时不可切换选中态\n      return tree.getChecked(map);\n    }\n    if (checked === this.isChecked()) {\n      // 值没有变更，则选中态无变化\n      return tree.getChecked(map);\n    }\n\n    if (checked) {\n      map.set(this.value, true);\n    } else {\n      map.delete(this.value);\n    }\n\n    if (config.checkStrictly) {\n      // 严格模式下，选中态不扩散，仅操作节点自身\n      if (options.directly) {\n        // 严格模式值更新节点自身\n        this.updateChecked();\n      }\n    } else {\n      // 先向下游扩散选中态\n      this.spreadChildrenChecked(checked, map, options);\n      // 再计算上游选中态\n      this.spreadParentChecked(checked, map, options);\n      // 状态更新务必放到扩散动作之后\n      // 过早的状态更新会导致后续计算出错\n      if (options.directly) {\n        const relatedNodes = tree.getRelatedNodes([this.value], {\n          reverse: true,\n        });\n        relatedNodes.forEach((node) => {\n          node.updateChecked();\n        });\n      }\n    }\n\n    return tree.getChecked(map);\n  }\n\n  // 选中态向上游扩散\n  private spreadParentChecked(\n    checked: boolean,\n    map?: TypeIdMap,\n    opts?: TypeSettingOptions\n  ) {\n    const options: TypeSettingOptions = {\n      isAction: true,\n      directly: false,\n      ...opts,\n    };\n\n    // 碰到不可选节点，中断扩散\n    if (!this.isCheckable()) return;\n\n    const { children } = this;\n    if (Array.isArray(children) && children.length > 0) {\n      // 有子节点，则选中态由子节点选中态集合来决定\n      map.delete(this.value);\n    }\n\n    const { parent } = this;\n    if (!parent) return;\n    parent.spreadParentChecked(checked, map, options);\n  }\n\n  // 选中态向下游扩散\n  private spreadChildrenChecked(\n    checked: boolean,\n    map?: TypeIdMap,\n    opts?: TypeSettingOptions\n  ) {\n    const options: TypeSettingOptions = {\n      isAction: true,\n      directly: false,\n      ...opts,\n    };\n\n    // 碰到不可选节点，中断扩散\n    if (!this.isCheckable()) return;\n    // 对于 UI 动作操作，节点禁用，中断扩散\n    if (options.isAction && this.isDisabled()) return;\n\n    const { children } = this;\n    if (!Array.isArray(children)) return;\n    children.forEach((node) => {\n      // 对于 UI 动作，向下扩散时，禁用状态会阻止状态切换\n      if (options.isAction && node.isDisabled()) return;\n      if (checked) {\n        map.set(node.value, true);\n      } else {\n        map.delete(node.value);\n      }\n      node.spreadChildrenChecked(checked, map, options);\n    });\n  }\n\n  /* ------ 节点状态更新 ------ */\n\n  /**\n   * 更新节点当前状态，将节点放到延时更新检查队列\n   * @return void\n   */\n  public update(): void {\n    this.level = this.getLevel();\n    this.vmIsFirst = this.isFirst();\n    this.vmIsLast = this.isLast();\n    this.vmIsLeaf = this.isLeaf();\n    this.vmCheckable = this.isCheckable();\n    this.vmIsRest = this.isRest();\n    this.actived = this.isActived();\n    this.expanded = this.isExpanded();\n    this.visible = this.isVisible();\n    this.tree.updated(this);\n  }\n\n  /**\n   * 更新节点选中态\n   * @return void\n   */\n  public updateChecked(): void {\n    const { tree, value } = this;\n    const { checkedMap } = tree;\n    this.checked = this.isChecked();\n    this.indeterminate = this.isIndeterminate();\n    if (this.checked) {\n      checkedMap.set(value, true);\n    }\n    tree.updated(this);\n  }\n\n  /**\n   * 更新所有子节点状态\n   * - 不包含自己\n   * @return void\n   */\n  public updateChildren(): void {\n    const { children } = this;\n    if (Array.isArray(children)) {\n      children.forEach((node) => {\n        node.update();\n        node.updateChecked();\n        node.updateChildren();\n      });\n    }\n  }\n\n  /**\n   * 更新所有父级节点状态\n   * - 不包含自己\n   * @return void\n   */\n  public updateParents(): void {\n    const { parent } = this;\n    if (parent) {\n      parent.update();\n      parent.updateChecked();\n      parent.updateParents();\n    }\n  }\n\n  /**\n   * 更新上下游相关节点状态\n   * - 包含自己\n   * @return void\n   */\n  public updateRelated(): void {\n    const { tree } = this;\n    const relatedNodes = tree.getRelatedNodes([this.value]);\n    relatedNodes.forEach((node) => {\n      node.update();\n      node.updateChecked();\n    });\n  }\n\n  /* ------ 节点遍历 ------ */\n\n  /**\n   * 获取包含自己在内所有的子节点\n   * - 包含自己\n   * @return TreeNode[] 遍历结果节点数组\n   */\n  public walk(): TreeNode[] {\n    const { children } = this;\n    let list: TreeNode[] = [];\n    list.push(this);\n    if (Array.isArray(children) && children.length > 0) {\n      children.forEach((node) => {\n        list = list.concat(node.walk());\n      });\n    }\n    return list;\n  }\n\n  /**\n   * 获取节点封装对象\n   * - TreeNode 对象 => TypeTreeNodeModel 对象\n   * - TypeTreeNodeModel 用于封装 treeNode 对外暴露的 api\n   * - 用户仅可操作经过封装的对象，减少了对外暴露的 api，利于代码重构\n   * @return TypeTreeNodeModel 节点封装对象\n   */\n  public getModel(): TypeTreeNodeModel {\n    let { model } = this;\n    if (!model) {\n      model = createNodeModel(this);\n      this.model = model;\n    }\n    updateNodeModel(model, this);\n    return model;\n  }\n}\n\nexport default TreeNode;\n"],"names":["hasOwnProperty","Object","prototype","setableStatus","expandMutex","activable","checkable","draggable","loading","setableProps","keys","syncableProps","privateKey","TreeNode","tree","data","parent","_this","_classCallCheck","_defineProperty","config","prefix","propChildren","children","propLabel","label","propValue","value","propsDisabled","disabled","model","level","vmCheckable","vmIsLeaf","vmIsFirst","vmIsLast","vmIsRest","vmIsLocked","visible","actived","checked","indeterminate","expanded","expandAll","uniqueId","isNil","get","nodeMap","privateMap","log","warn","concat","set","forEach","prop","initActived","initExpanded","initChecked","Array","isArray","append","lazy","loadChildren","updateChecked","update","reflow","_createClass","key","checkedMap","checkStrictly","isChecked","isNumber","expandLevel","getLevel","expandedMap","delete","isActivable","activedMap","_this2","list","push","apply","_toConsumableArray","length","item","node","appendTo","updateRelated","index","_this3","parentNode","targetIndex","targetParents","getParents","includeCurrent","some","pnode","Error","targetPosNode","siblings","prevLength","prevIndex","getIndex","remove","curLength","splice","nodes","walk","updateNodes","map","flat","insert","getSiblings","sibling","insertBefore","newData","insertAfter","clean","updateParents","filterMap","_loadChildren","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","next","isFunction","load","sent","emit","stop","arguments","_this4","call","updated","getParent","parents","getChildren","deep","childrenModel","shift","getModel","isBoolean","getRoot","indexOf","getPath","unshift","reverse","isRest","_this$tree","hasFilter","rest","nodeModel","filter","isVisible","_this$tree2","allowFoldNodeOnFilter","expandVisible","every","isDisabled","state","isDraggable","isExpandMutex","isCheckable","isActived","isExpanded","childIsChecked","isIndeterminate","childChecked","isNull","isFirst","isLast","isLeaf","lock","lockState","afterExpanded","updateChildren","toggleExpanded","setExpanded","opts","options","_objectSpread","directly","Map","shouldExpandNodes","expandParent","_tree$config","snode","getExpanded","toggleActived","setActived","prevKeys","from","activeMultiple","clear","getNode","getActived","toggleChecked","setChecked","isAction","getChecked","spreadChildrenChecked","spreadParentChecked","relatedNodes","getRelatedNodes","createNodeModel","updateNodeModel"],"mappings":"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"}