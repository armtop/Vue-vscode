/**
 * tdesign v1.2.3
 * (c) 2024 TDesign Group
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var _slicedToArray = require('@babel/runtime/helpers/slicedToArray');
var vue = require('vue');
var tabBar_props = require('./props.js');
var config = require('../config.js');
var hooks_tnode = require('../hooks/tnode.js');
var shared_useDefault_index = require('../shared/useDefault/index.js');
var shared_useChildSlots_index = require('../shared/useChildSlots/index.js');
var tdesignIconsVueNext = require('tdesign-icons-vue-next');
var badge_index = require('../badge/index.js');
var tabBar_useTabBar = require('./useTabBar.js');
var tabBar_tabBarItemProps = require('./tab-bar-item-props.js');
var configProvider_useConfig = require('../config-provider/useConfig.js');
var shared_component = require('../shared/component.js');
require('lodash/isFunction');
require('lodash/camelCase');
require('lodash/kebabCase');
require('../hooks/render-tnode.js');
require('lodash/isEmpty');
require('lodash/isString');
require('lodash/isObject');
require('@babel/runtime/helpers/toConsumableArray');
require('@babel/runtime/helpers/typeof');
require('../badge/props.js');
require('../hooks/useClass.js');
require('lodash/cloneDeep');
require('../config-provider/context.js');
require('lodash/mergeWith');
require('lodash/merge');
require('lodash/isArray');
require('../_common/js/global-config/mobile/default-config.js');
require('../_common/js/global-config/mobile/locale/zh_CN.js');
require('../_chunks/dep-191173f8.js');
require('../_chunks/dep-2088457f.js');
require('dayjs');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);
var _slicedToArray__default = /*#__PURE__*/_interopDefaultLegacy(_slicedToArray);

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty__default["default"](e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var prefix$1 = config["default"].prefix;
var name$1 = "".concat(prefix$1, "-tab-bar");
var LocalTabBar = vue.defineComponent({
  name: name$1,
  props: tabBar_props["default"],
  emits: ["update:value", "update:modelValue", "change"],
  setup: function setup(props, context) {
    var renderTNodeJSX = hooks_tnode.useTNodeJSX();
    var _useDefault = shared_useDefault_index.useDefault(props, context.emit, "value", "change"),
      _useDefault2 = _slicedToArray__default["default"](_useDefault, 1),
      activeValue = _useDefault2[0];
    var defaultIndex = vue.ref(-1);
    var itemCount = vue.ref(0);
    vue.onMounted(function () {
      var nodes = context.slots.default && context.slots.default();
      if (nodes !== void 0) {
        var childSlots = shared_useChildSlots_index.useChildSlots("".concat(prefix$1, "-tab-bar-item"));
        itemCount.value = childSlots.length;
      }
    });
    var updateChild = function updateChild(currentValue) {
      activeValue.value = currentValue;
    };
    var tabBarClass = vue.computed(function () {
      return ["".concat(name$1), _defineProperty__default["default"](_defineProperty__default["default"](_defineProperty__default["default"]({}, "".concat(name$1, "--bordered"), props.bordered), "".concat(name$1, "--fixed"), props.fixed), "".concat(name$1, "--safe"), props.safeAreaInsetBottom), "".concat(name$1, "--").concat(props.shape)];
    });
    vue.provide("tab-bar", _objectSpread(_objectSpread({}, vue.toRefs(props)), {}, {
      defaultIndex: defaultIndex,
      activeValue: activeValue,
      itemCount: itemCount,
      updateChild: updateChild
    }));
    return function () {
      return vue.createVNode("div", {
        "class": tabBarClass.value,
        "role": "tablist"
      }, [renderTNodeJSX("default")]);
    };
  }
});

function _isSlot(s) {
  return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !vue.isVNode(s);
}
var prefix = config["default"].prefix;
var name = "".concat(prefix, "-tab-bar-item");
var LocalTabBarItem = vue.defineComponent({
  name: name,
  components: {
    TBadge: badge_index["default"],
    TViewListIcon: tdesignIconsVueNext.ViewListIcon
  },
  props: tabBar_tabBarItemProps["default"],
  setup: function setup(props, context) {
    var renderTNodeJSX = hooks_tnode.useTNodeJSX();
    var renderContent = hooks_tnode.useContent();
    var _useConfig = configProvider_useConfig.useConfig("tabBar"),
      t = _useConfig.t,
      globalConfig = _useConfig.globalConfig;
    var _inject = vue.inject("tab-bar"),
      split = _inject.split,
      shape = _inject.shape,
      theme = _inject.theme,
      defaultIndex = _inject.defaultIndex,
      activeValue = _inject.activeValue,
      itemCount = _inject.itemCount,
      updateChild = _inject.updateChild;
    var currentName = tabBar_useTabBar.initName(defaultIndex);
    var textNode = vue.ref();
    var badgeProps = vue.computed(function () {
      return props.badgeProps;
    });
    var getBadgeAriaLabel = function getBadgeAriaLabel() {
      var options = badgeProps.value;
      if (options !== null && options !== void 0 && options.dot || options !== null && options !== void 0 && options.count) {
        var maxCount = options.maxCount || 99;
        if (options.dot) {
          return globalConfig.value.newsAriaLabel;
        }
        if (options.count === "...") {
          return globalConfig.value.moreNewsAriaLabel;
        }
        var count = Number(options.count);
        if (isNaN(count)) {
          return "".concat(options.count);
        }
        var str1 = t(globalConfig.value.haveMoreNewsAriaLabel, {
          value: maxCount
        });
        var str2 = t(globalConfig.value.haveNewsAriaLabel, {
          value: options.count
        });
        return "".concat(Number(options.count) > maxCount ? str1 : str2);
      }
      return "TabBar";
    };
    vue.ref(getBadgeAriaLabel());
    var iconOnly = vue.ref(false);
    vue.watch(textNode, function () {
      var _textNode$value;
      var height = (_textNode$value = textNode.value) === null || _textNode$value === void 0 ? void 0 : _textNode$value.clientHeight;
      iconOnly.value = Number(height) === 0;
    });
    var hasSubTabBar = vue.computed(function () {
      return Array.isArray(props.subTabBar) && props.subTabBar.length > 0;
    });
    var isChecked = vue.computed(function () {
      if (hasSubTabBar.value && Array.isArray(activeValue.value)) {
        return activeValue.value.includes(currentName);
      }
      return currentName === activeValue.value;
    });
    var isSpread = vue.ref(false);
    vue.watch(isChecked, function (newValue) {
      if (!newValue) {
        isSpread.value = false;
      }
    });
    var crowded = vue.ref(false);
    vue.watch(itemCount, function () {
      if (isChecked.value) {
        crowded.value = itemCount.value > 3;
        isSpread.value = true;
      }
    });
    var isToggleCurrent = vue.computed(function () {
      return Array.isArray(activeValue.value) && activeValue.value[0] === currentName;
    });
    var toggle = function toggle() {
      if (hasSubTabBar.value) {
        isSpread.value = !isSpread.value;
        if (!isToggleCurrent.value) {
          updateChild([currentName]);
          return;
        }
      }
      updateChild(currentName);
    };
    var hasChildren = vue.computed(function () {
      var _props$subTabBar;
      return Number((_props$subTabBar = props.subTabBar) === null || _props$subTabBar === void 0 ? void 0 : _props$subTabBar.length) > 0;
    });
    var selectChild = function selectChild(childName) {
      if (!(Array.isArray(activeValue.value) && activeValue.value[1] === childName)) {
        updateChild([currentName, childName]);
      }
      isSpread.value = false;
    };
    return function () {
      var iconContent = function iconContent() {
        var iconSlot = renderTNodeJSX("icon");
        if (!iconSlot) {
          return null;
        }
        iconSlot === null || iconSlot === void 0 || iconSlot.forEach(function (item) {
          var _item$type;
          if (((_item$type = item.type) === null || _item$type === void 0 ? void 0 : _item$type.name) === "Icon") {
            item.props.size = iconOnly.value ? "24px" : "20px";
          }
        });
        return iconSlot;
      };
      var badge = function badge() {
        var _slot;
        var _badgeProps$value, _badgeProps$value2, _badgeProps$value3, _badgeProps$value4, _badgeProps$value5, _badgeProps$value6, _badgeProps$value7, _badgeProps$value8;
        return iconContent() && vue.createVNode("div", {
          "class": "".concat(name, "__icon"),
          "style": {
            height: "".concat(iconOnly.value ? 24 : 20, "px")
          }
        }, [(_badgeProps$value = badgeProps.value) !== null && _badgeProps$value !== void 0 && _badgeProps$value.dot || (_badgeProps$value2 = badgeProps.value) !== null && _badgeProps$value2 !== void 0 && _badgeProps$value2.count ? vue.createVNode(vue.resolveComponent("t-badge"), {
          "count": ((_badgeProps$value3 = badgeProps.value) === null || _badgeProps$value3 === void 0 ? void 0 : _badgeProps$value3.count) || 0,
          "max-count": ((_badgeProps$value4 = badgeProps.value) === null || _badgeProps$value4 === void 0 ? void 0 : _badgeProps$value4.maxCount) || 99,
          "dot": ((_badgeProps$value5 = badgeProps.value) === null || _badgeProps$value5 === void 0 ? void 0 : _badgeProps$value5.dot) || false,
          "content": ((_badgeProps$value6 = badgeProps.value) === null || _badgeProps$value6 === void 0 ? void 0 : _badgeProps$value6.content) || "",
          "size": ((_badgeProps$value7 = badgeProps.value) === null || _badgeProps$value7 === void 0 ? void 0 : _badgeProps$value7.size) || "medium",
          "offset": ((_badgeProps$value8 = badgeProps.value) === null || _badgeProps$value8 === void 0 ? void 0 : _badgeProps$value8.offset) || [0, 0]
        }, _isSlot(_slot = iconContent()) ? _slot : {
          default: function _default() {
            return [_slot];
          }
        }) : iconContent()]);
      };
      var textNodeContent = function textNodeContent() {
        return vue.createVNode("div", {
          "ref": textNode,
          "class": _defineProperty__default["default"](_defineProperty__default["default"]({}, "".concat(name, "__text"), true), "".concat(name, "__text--small"), !!iconContent())
        }, [hasChildren.value && vue.createVNode(vue.resolveComponent("t-view-list-icon"), {
          "size": "16",
          "class": "".concat(name, "__icon-menu")
        }, null), renderContent("default", "content")]);
      };
      var menu = function menu() {
        if (hasChildren.value && isSpread.value) {
          return vue.createVNode("div", {
            "role": "menu",
            "class": "".concat(name, "__spread")
          }, [props.subTabBar.map(function (child, index) {
            return vue.createVNode("div", {
              "key": index,
              "role": "tab",
              "class": "".concat(name, "__spread-item"),
              "onClick": function onClick() {
                return selectChild(child.value || index);
              }
            }, [index !== 0 && vue.createVNode("div", {
              "class": "".concat(name, "__spread-item-split")
            }, null), vue.createVNode("div", {
              "class": "".concat(name, "__spread-item-text")
            }, [child.label])]);
          })]);
        }
      };
      return vue.createVNode("div", {
        "class": _defineProperty__default["default"](_defineProperty__default["default"](_defineProperty__default["default"](_defineProperty__default["default"](_defineProperty__default["default"](_defineProperty__default["default"]({}, "".concat(name), true), "".concat(name, "--split"), split.value), "".concat(name, "--text-only"), !iconContent()), "".concat(name, "--crowded"), crowded.value), "".concat(name, "--").concat(shape.value), true), "".concat(context.attrs.class || ""), true)
      }, [vue.createVNode("div", {
        "class": _defineProperty__default["default"](_defineProperty__default["default"](_defineProperty__default["default"]({}, "".concat(name, "__content"), true), "".concat(name, "__content--checked"), isChecked.value), "".concat(name, "__content--").concat(theme.value), true),
        "aria-selected": (!hasChildren.value || !isSpread.value) && isChecked.value,
        "aria-expanded": hasChildren.value && isSpread.value,
        "role": hasChildren.value ? "button" : "tab",
        "onClick": toggle
      }, [badge(), textNodeContent()]), menu()]);
    };
  }
});

var TabBar = shared_component.withInstall(LocalTabBar);
var TabBarItem = shared_component.withInstall(LocalTabBarItem);

exports.TabBar = TabBar;
exports.TabBarItem = TabBarItem;
//# sourceMappingURL=index.js.map
