/**
 * tdesign v1.2.3
 * (c) 2024 TDesign Group
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var vue = require('vue');
var config = require('../config.js');
var fab_props = require('./props.js');
var hooks_tnode = require('../hooks/tnode.js');
var hooks_useClass = require('../hooks/useClass.js');
var button_index = require('../button/index.js');
var shared_component = require('../shared/component.js');
require('lodash/isFunction');
require('lodash/camelCase');
require('lodash/kebabCase');
require('../hooks/render-tnode.js');
require('lodash/isEmpty');
require('lodash/isString');
require('lodash/isObject');
require('../config-provider/useConfig.js');
require('lodash/cloneDeep');
require('../config-provider/context.js');
require('lodash/mergeWith');
require('lodash/merge');
require('lodash/isArray');
require('../_common/js/global-config/mobile/default-config.js');
require('../_common/js/global-config/mobile/locale/zh_CN.js');
require('../_chunks/dep-191173f8.js');
require('@babel/runtime/helpers/typeof');
require('../_chunks/dep-2088457f.js');
require('dayjs');
require('@babel/runtime/helpers/defineProperty');
require('../loading/index.js');
require('../_common/js/loading/circle-adapter.js');
require('../_common/js/utils/set-style.js');
require('../_common/js/utils/helper.js');
require('@babel/runtime/helpers/toConsumableArray');
require('@babel/runtime/helpers/objectWithoutProperties');
require('@babel/runtime/helpers/slicedToArray');
require('lodash/isNull');
require('lodash/isUndefined');
require('lodash/isNumber');
require('../loading/props.js');
require('../button/props.js');
require('../form/hooks.js');
require('../shared/hover.js');

var prefix = config["default"].prefix;
var name = "".concat(prefix, "-fab");
var Fab = vue.defineComponent({
  name: name,
  props: fab_props["default"],
  setup: function setup(props) {
    var renderTNodeJSX = hooks_tnode.useTNodeJSX();
    var fabClass = hooks_useClass.usePrefixClass("fab");
    var handleClick = function handleClick(e) {
      var _props$onClick;
      (_props$onClick = props.onClick) === null || _props$onClick === void 0 || _props$onClick.call(props, {
        e: e
      });
    };
    return function () {
      var icon = renderTNodeJSX("icon");
      return vue.createVNode("div", {
        "class": fabClass.value,
        "style": props.style,
        "onClick": handleClick
      }, [vue.createVNode(button_index["default"], vue.mergeProps({
        "size": "large",
        "theme": "primary",
        "shape": props.text ? "round" : "circle",
        "class": "".concat(fabClass.value, "__button")
      }, props.buttonProps, {
        "icon": icon
      }), {
        default: function _default() {
          return [props.text];
        }
      })]);
    };
  }
});

var _Fab = shared_component.withInstall(Fab);

exports["default"] = _Fab;
//# sourceMappingURL=index.js.map
